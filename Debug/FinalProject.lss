
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011e  00800100  00001478  0000150c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001478  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  0080021e  0080021e  0000162a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000162a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001688  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000016c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001161  00000000  00000000  00001770  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b2a  00000000  00000000  000028d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008fb  00000000  00000000  000033fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000027c  00000000  00000000  00003cf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000069f  00000000  00000000  00003f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000076b  00000000  00000000  00004613  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00004d7e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__ctors_end>
       4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
       8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
       c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      10:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__vector_4>
      14:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      18:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      1c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      20:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      24:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      28:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      2c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      30:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      34:	0c 94 2c 02 	jmp	0x458	; 0x458 <__vector_13>
      38:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      3c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      40:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      44:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      48:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      4c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      50:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      54:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      58:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      5c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      60:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      64:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      68:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      6c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      70:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      74:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      78:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      7c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      80:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      84:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      88:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      8c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      90:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      94:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      98:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      9c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      a0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      a4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      a8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      ac:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      b0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      b4:	08 00       	.word	0x0008	; ????
      b6:	00 00       	nop
      b8:	be 92       	st	-X, r11
      ba:	24 49       	sbci	r18, 0x94	; 148
      bc:	12 3e       	cpi	r17, 0xE2	; 226
      be:	ab aa       	std	Y+51, r10	; 0x33
      c0:	aa 2a       	or	r10, r26
      c2:	be cd       	rjmp	.-1156   	; 0xfffffc40 <__eeprom_end+0xff7efc40>
      c4:	cc cc       	rjmp	.-1640   	; 0xfffffa5e <__eeprom_end+0xff7efa5e>
      c6:	4c 3e       	cpi	r20, 0xEC	; 236
      c8:	00 00       	nop
      ca:	00 80       	ld	r0, Z
      cc:	be ab       	std	Y+54, r27	; 0x36
      ce:	aa aa       	std	Y+50, r10	; 0x32
      d0:	aa 3e       	cpi	r26, 0xEA	; 234
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	bf 00       	.word	0x00bf	; ????
      d8:	00 00       	nop
      da:	80 3f       	cpi	r24, 0xF0	; 240
      dc:	00 00       	nop
      de:	00 00       	nop
      e0:	00 08       	sbc	r0, r0
      e2:	41 78       	andi	r20, 0x81	; 129
      e4:	d3 bb       	out	0x13, r29	; 19
      e6:	43 87       	std	Z+11, r20	; 0x0b
      e8:	d1 13       	cpse	r29, r17
      ea:	3d 19       	sub	r19, r13
      ec:	0e 3c       	cpi	r16, 0xCE	; 206
      ee:	c3 bd       	out	0x23, r28	; 35
      f0:	42 82       	std	Z+2, r4	; 0x02
      f2:	ad 2b       	or	r26, r29
      f4:	3e 68       	ori	r19, 0x8E	; 142
      f6:	ec 82       	std	Y+4, r14	; 0x04
      f8:	76 be       	out	0x36, r7	; 54
      fa:	d9 8f       	std	Y+25, r29	; 0x19
      fc:	e1 a9       	ldd	r30, Z+49	; 0x31
      fe:	3e 4c       	sbci	r19, 0xCE	; 206
     100:	80 ef       	ldi	r24, 0xF0	; 240
     102:	ff be       	out	0x3f, r15	; 63
     104:	01 c4       	rjmp	.+2050   	; 0x908 <__stack+0x9>
     106:	ff 7f       	andi	r31, 0xFF	; 255
     108:	3f 00       	.word	0x003f	; ????
     10a:	00 00       	nop
	...

0000010e <__ctors_end>:
     10e:	11 24       	eor	r1, r1
     110:	1f be       	out	0x3f, r1	; 63
     112:	cf ef       	ldi	r28, 0xFF	; 255
     114:	d8 e0       	ldi	r29, 0x08	; 8
     116:	de bf       	out	0x3e, r29	; 62
     118:	cd bf       	out	0x3d, r28	; 61

0000011a <__do_copy_data>:
     11a:	12 e0       	ldi	r17, 0x02	; 2
     11c:	a0 e0       	ldi	r26, 0x00	; 0
     11e:	b1 e0       	ldi	r27, 0x01	; 1
     120:	e8 e7       	ldi	r30, 0x78	; 120
     122:	f4 e1       	ldi	r31, 0x14	; 20
     124:	02 c0       	rjmp	.+4      	; 0x12a <__do_copy_data+0x10>
     126:	05 90       	lpm	r0, Z+
     128:	0d 92       	st	X+, r0
     12a:	ae 31       	cpi	r26, 0x1E	; 30
     12c:	b1 07       	cpc	r27, r17
     12e:	d9 f7       	brne	.-10     	; 0x126 <__do_copy_data+0xc>

00000130 <__do_clear_bss>:
     130:	22 e0       	ldi	r18, 0x02	; 2
     132:	ae e1       	ldi	r26, 0x1E	; 30
     134:	b2 e0       	ldi	r27, 0x02	; 2
     136:	01 c0       	rjmp	.+2      	; 0x13a <.do_clear_bss_start>

00000138 <.do_clear_bss_loop>:
     138:	1d 92       	st	X+, r1

0000013a <.do_clear_bss_start>:
     13a:	a9 32       	cpi	r26, 0x29	; 41
     13c:	b2 07       	cpc	r27, r18
     13e:	e1 f7       	brne	.-8      	; 0x138 <.do_clear_bss_loop>
     140:	0e 94 21 04 	call	0x842	; 0x842 <main>
     144:	0c 94 3a 0a 	jmp	0x1474	; 0x1474 <_exit>

00000148 <__bad_interrupt>:
     148:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000014c <Mega328P_Init>:
.section ".text"			
.global Mega328P_Init
Mega328P_Init:
		//***********************************************
		//initialize PB0(R*W),PB1(RS),PB2(E) as fixed cleared outputs
		ldi	r16,0x07		// 0b00000111
     14c:	07 e0       	ldi	r16, 0x07	; 7
		out	DDRB,r16		
     14e:	04 b9       	out	0x04, r16	; 4
		ldi	r16,0			// 0b00000000
     150:	00 e0       	ldi	r16, 0x00	; 0
		out	PORTB,r16		
     152:	05 b9       	out	0x05, r16	; 5
		//***********************************************
		//initialize UART, 8bits, no parity, 1 stop, 9600
		out	U2X0,r16		// 0b00000000	
     154:	01 b9       	out	0x01, r16	; 1
		ldi	r17,0x0			
     156:	10 e0       	ldi	r17, 0x00	; 0
		ldi	r16,0x67		
     158:	07 e6       	ldi	r16, 0x67	; 103
		sts	UBRR0H,r17		// 0b00000000
     15a:	10 93 c5 00 	sts	0x00C5, r17	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
		sts	UBRR0L,r16		// 0b01100111
     15e:	00 93 c4 00 	sts	0x00C4, r16	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
		ldi	r16,24			
     162:	08 e1       	ldi	r16, 0x18	; 24
		sts	UCSR0B,r16		// 0b00011000
     164:	00 93 c1 00 	sts	0x00C1, r16	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
		ldi	r16,6			
     168:	06 e0       	ldi	r16, 0x06	; 6
		sts	UCSR0C,r16		// 0b00000110
     16a:	00 93 c2 00 	sts	0x00C2, r16	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
		//************************************************
		//initialize ADC
		ldi r16,0x87		
     16e:	07 e8       	ldi	r16, 0x87	; 135
		sts	ADCSRA,r16		// 0b10000111
     170:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
		ldi r16,0x40		
     174:	00 e4       	ldi	r16, 0x40	; 64
		sts ADMUX,r16		// 0b01000000
     176:	00 93 7c 00 	sts	0x007C, r16	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
		ldi r16,0			
     17a:	00 e0       	ldi	r16, 0x00	; 0
		sts ADCSRB,r16		// 0b00000000
     17c:	00 93 7b 00 	sts	0x007B, r16	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
		ldi r16,0xFE		
     180:	0e ef       	ldi	r16, 0xFE	; 254
		sts DIDR0,r16		// 0b11111110
     182:	00 93 7e 00 	sts	0x007E, r16	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
		ldi r16,0xFF		
     186:	0f ef       	ldi	r16, 0xFF	; 255
		sts DIDR1,r16		// 0b11111111
     188:	00 93 7f 00 	sts	0x007F, r16	; 0x80007f <__TEXT_REGION_LENGTH__+0x7f807f>
		//************************************************
		//initialize PC1 as output for trigger and PC2 and input for echo
		; Initialize PC1 as output for trigger
		ldi r16, (1<<1)  ; Load register r16 with the bit mask for PC1
     18c:	02 e0       	ldi	r16, 0x02	; 2
		out DDRC, r16    ; Set PC1 as output
     18e:	07 b9       	out	0x07, r16	; 7

		; Initialize PC2 as input for echo
		ldi r16, (1<<2)  ; Load register r16 with the bit mask for PC2
     190:	04 e0       	ldi	r16, 0x04	; 4
		in r17, PORTC    ; Load the current value of PORTC into r17
     192:	18 b1       	in	r17, 0x08	; 8
		or r17, r16      ; Set the bit for PC2 in r17
     194:	10 2b       	or	r17, r16
		out PORTC, r17   ; Write the new value back to PORTC, enabling pull-up resistor for PC2
     196:	18 b9       	out	0x08, r17	; 8

		; Set all pins to low
		ldi r16, 0x00    ; Load register r16 with 0
     198:	00 e0       	ldi	r16, 0x00	; 0
		out PORTC, r16   ; Set all pins to low
     19a:	08 b9       	out	0x08, r16	; 8

0000019c <LCD_Write_Command>:
		//************************************************

.global LCD_Write_Command
LCD_Write_Command:
	call	UART_Off		
     19c:	0e 94 0b 01 	call	0x216	; 0x216 <UART_Off>
	ldi		r16,0xFF		
     1a0:	0f ef       	ldi	r16, 0xFF	; 255
	out		DDRD,r16		
     1a2:	0a b9       	out	0x0a, r16	; 10
	lds		r16,DATA		
     1a4:	00 91 1e 02 	lds	r16, 0x021E	; 0x80021e <__data_end>
	out		PORTD,r16		
     1a8:	0b b9       	out	0x0b, r16	; 11
	ldi		r16,4			
     1aa:	04 e0       	ldi	r16, 0x04	; 4
	out		PORTB,r16		
     1ac:	05 b9       	out	0x05, r16	; 5
	call	LCD_Delay		
     1ae:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_Delay>
	ldi		r16,0			
     1b2:	00 e0       	ldi	r16, 0x00	; 0
	out		PORTB,r16		
     1b4:	05 b9       	out	0x05, r16	; 5
	call	LCD_Delay		
     1b6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_Delay>
	call	UART_On			
     1ba:	0e 94 05 01 	call	0x20a	; 0x20a <UART_On>
	ret						
     1be:	08 95       	ret

000001c0 <LCD_Delay>:

LCD_Delay:
	ldi		r16,0xFA		
     1c0:	0a ef       	ldi	r16, 0xFA	; 250

000001c2 <D0>:
D0:	ldi		r17,0xFF		
     1c2:	1f ef       	ldi	r17, 0xFF	; 255

000001c4 <D1>:
D1:	dec		r17				
     1c4:	1a 95       	dec	r17
	brne	D1				
     1c6:	f1 f7       	brne	.-4      	; 0x1c4 <D1>
	dec		r16				
     1c8:	0a 95       	dec	r16
	brne	D0				
     1ca:	d9 f7       	brne	.-10     	; 0x1c2 <D0>
	ret						
     1cc:	08 95       	ret

000001ce <LCD_Write_Data>:

.global LCD_Write_Data
LCD_Write_Data:
	call	UART_Off		
     1ce:	0e 94 0b 01 	call	0x216	; 0x216 <UART_Off>
	ldi		r16,0xFF		
     1d2:	0f ef       	ldi	r16, 0xFF	; 255
	out		DDRD,r16		
     1d4:	0a b9       	out	0x0a, r16	; 10
	lds		r16,DATA		
     1d6:	00 91 1e 02 	lds	r16, 0x021E	; 0x80021e <__data_end>
	out		PORTD,r16		
     1da:	0b b9       	out	0x0b, r16	; 11
	ldi		r16,6			
     1dc:	06 e0       	ldi	r16, 0x06	; 6
	out		PORTB,r16		
     1de:	05 b9       	out	0x05, r16	; 5
	call	LCD_Delay		
     1e0:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_Delay>
	ldi		r16,0			
     1e4:	00 e0       	ldi	r16, 0x00	; 0
	out		PORTB,r16		
     1e6:	05 b9       	out	0x05, r16	; 5
	call	LCD_Delay		
     1e8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_Delay>
	call	UART_On			
     1ec:	0e 94 05 01 	call	0x20a	; 0x20a <UART_On>
	ret						
     1f0:	08 95       	ret

000001f2 <LCD_Read_Data>:

.global LCD_Read_Data
LCD_Read_Data:
	call	UART_Off		
     1f2:	0e 94 0b 01 	call	0x216	; 0x216 <UART_Off>
	ldi		r16,0x00		
     1f6:	00 e0       	ldi	r16, 0x00	; 0
	out		DDRD,r16		
     1f8:	0a b9       	out	0x0a, r16	; 10
	out		PORTB,4			
     1fa:	45 b8       	out	0x05, r4	; 5
	in		r16,PORTD		
     1fc:	0b b1       	in	r16, 0x0b	; 11
	sts		DATA,r16		
     1fe:	00 93 1e 02 	sts	0x021E, r16	; 0x80021e <__data_end>
	out		PORTB,0			
     202:	05 b8       	out	0x05, r0	; 5
	call	UART_On			
     204:	0e 94 05 01 	call	0x20a	; 0x20a <UART_On>
	ret						
     208:	08 95       	ret

0000020a <UART_On>:

.global UART_On
UART_On:
	ldi		r16,2				
     20a:	02 e0       	ldi	r16, 0x02	; 2
	out		DDRD,r16			
     20c:	0a b9       	out	0x0a, r16	; 10
	ldi		r16,24				
     20e:	08 e1       	ldi	r16, 0x18	; 24
	sts		UCSR0B,r16			
     210:	00 93 c1 00 	sts	0x00C1, r16	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	ret							
     214:	08 95       	ret

00000216 <UART_Off>:

.global UART_Off
UART_Off:
	ldi	r16,0					
     216:	00 e0       	ldi	r16, 0x00	; 0
	sts UCSR0B,r16				
     218:	00 93 c1 00 	sts	0x00C1, r16	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	ret							
     21c:	08 95       	ret

0000021e <UART_Clear>:

.global UART_Clear
UART_Clear:
	lds		r16,UCSR0A			
     21e:	00 91 c0 00 	lds	r16, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	sbrs	r16,RXC0			
     222:	07 ff       	sbrs	r16, 7
	ret							
     224:	08 95       	ret
	lds		r16,UDR0			
     226:	00 91 c6 00 	lds	r16, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	rjmp	UART_Clear			
     22a:	f9 cf       	rjmp	.-14     	; 0x21e <UART_Clear>

0000022c <UART_Get>:

.global UART_Get
UART_Get:
	lds		r16,UCSR0A			
     22c:	00 91 c0 00 	lds	r16, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	sbrs	r16,RXC0			
     230:	07 ff       	sbrs	r16, 7
	rjmp	UART_Get			
     232:	fc cf       	rjmp	.-8      	; 0x22c <UART_Get>
	lds		r16,UDR0			
     234:	00 91 c6 00 	lds	r16, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	sts		ASCII,r16			
     238:	00 93 20 02 	sts	0x0220, r16	; 0x800220 <ASCII>
	ret							
     23c:	08 95       	ret

0000023e <UART_Put>:

.global UART_Put
UART_Put:
	lds		r17,UCSR0A			
     23e:	10 91 c0 00 	lds	r17, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	sbrs	r17,UDRE0			
     242:	15 ff       	sbrs	r17, 5
	rjmp	UART_Put			
     244:	fc cf       	rjmp	.-8      	; 0x23e <UART_Put>
	lds		r16,ASCII			
     246:	00 91 20 02 	lds	r16, 0x0220	; 0x800220 <ASCII>
	sts		UDR0,r16			
     24a:	00 93 c6 00 	sts	0x00C6, r16	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	ret							
     24e:	08 95       	ret

00000250 <ADC_Get>:

.global ADC_Get
ADC_Get:
		ldi		r16,0xC7			
     250:	07 ec       	ldi	r16, 0xC7	; 199
		sts		ADCSRA,r16			
     252:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

00000256 <A2V1>:
A2V1:	lds		r16,ADCSRA			
     256:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
		sbrc	r16,ADSC			
     25a:	06 fd       	sbrc	r16, 6
		rjmp 	A2V1				
     25c:	fc cf       	rjmp	.-8      	; 0x256 <A2V1>
		lds		r16,ADCL			
     25e:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
		sts		LADC,r16			
     262:	00 93 26 02 	sts	0x0226, r16	; 0x800226 <LADC>
		lds		r16,ADCH			
     266:	00 91 79 00 	lds	r16, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
		sts		HADC,r16			
     26a:	00 93 1f 02 	sts	0x021F, r16	; 0x80021f <HADC>
		ret							
     26e:	08 95       	ret

00000270 <getPrescaler>:
void USS(void);
void Banner(void);
void Command(void);

int getPrescaler(){
	int prescalerBits = TCCR1B & 0x7;	// mask last three bits
     270:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	switch (prescalerBits){
     274:	87 70       	andi	r24, 0x07	; 7
     276:	83 30       	cpi	r24, 0x03	; 3
     278:	71 f0       	breq	.+28     	; 0x296 <getPrescaler+0x26>
     27a:	28 f4       	brcc	.+10     	; 0x286 <getPrescaler+0x16>
     27c:	81 30       	cpi	r24, 0x01	; 1
     27e:	41 f0       	breq	.+16     	; 0x290 <getPrescaler+0x20>
     280:	82 30       	cpi	r24, 0x02	; 2
     282:	a9 f0       	breq	.+42     	; 0x2ae <getPrescaler+0x3e>
     284:	11 c0       	rjmp	.+34     	; 0x2a8 <getPrescaler+0x38>
     286:	84 30       	cpi	r24, 0x04	; 4
     288:	49 f0       	breq	.+18     	; 0x29c <getPrescaler+0x2c>
     28a:	85 30       	cpi	r24, 0x05	; 5
     28c:	51 f0       	breq	.+20     	; 0x2a2 <getPrescaler+0x32>
     28e:	0c c0       	rjmp	.+24     	; 0x2a8 <getPrescaler+0x38>
		case 0x1: return 1;
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	08 95       	ret
		case 0x2: return 8;
		case 0x3: return 64;
     296:	80 e4       	ldi	r24, 0x40	; 64
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	08 95       	ret
		case 0x4: return 256;
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	91 e0       	ldi	r25, 0x01	; 1
     2a0:	08 95       	ret
		case 0x5: return 1024;
     2a2:	80 e0       	ldi	r24, 0x00	; 0
     2a4:	94 e0       	ldi	r25, 0x04	; 4
     2a6:	08 95       	ret
		default: return 0;				// error in prescaler bits
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	08 95       	ret

int getPrescaler(){
	int prescalerBits = TCCR1B & 0x7;	// mask last three bits
	switch (prescalerBits){
		case 0x1: return 1;
		case 0x2: return 8;
     2ae:	88 e0       	ldi	r24, 0x08	; 8
     2b0:	90 e0       	ldi	r25, 0x00	; 0
		case 0x3: return 64;
		case 0x4: return 256;
		case 0x5: return 1024;
		default: return 0;				// error in prescaler bits
	}
}
     2b2:	08 95       	ret

000002b4 <Timer1>:

void Timer1(float us){
     2b4:	cf 92       	push	r12
     2b6:	df 92       	push	r13
     2b8:	ef 92       	push	r14
     2ba:	ff 92       	push	r15
     2bc:	0f 93       	push	r16
     2be:	1f 93       	push	r17
     2c0:	cf 93       	push	r28
     2c2:	df 93       	push	r29
     2c4:	cd b7       	in	r28, 0x3d	; 61
     2c6:	de b7       	in	r29, 0x3e	; 62
     2c8:	64 97       	sbiw	r28, 0x14	; 20
     2ca:	0f b6       	in	r0, 0x3f	; 63
     2cc:	f8 94       	cli
     2ce:	de bf       	out	0x3e, r29	; 62
     2d0:	0f be       	out	0x3f, r0	; 63
     2d2:	cd bf       	out	0x3d, r28	; 61
	us *= pow(10, -6);		// adjust us to microseconds
     2d4:	2d eb       	ldi	r18, 0xBD	; 189
     2d6:	37 e3       	ldi	r19, 0x37	; 55
     2d8:	46 e8       	ldi	r20, 0x86	; 134
     2da:	55 e3       	ldi	r21, 0x35	; 53
     2dc:	0e 94 21 06 	call	0xc42	; 0xc42 <__mulsf3>
     2e0:	6b 01       	movw	r12, r22
     2e2:	7c 01       	movw	r14, r24
	
	int timerBits = 16;
	float C = pow(2, timerBits);
    //allowed prescaler values
    float prescalers[] = {1.0, 8.0, 64.0, 256.0, 1024.0};
     2e4:	84 e1       	ldi	r24, 0x14	; 20
     2e6:	e0 e0       	ldi	r30, 0x00	; 0
     2e8:	f1 e0       	ldi	r31, 0x01	; 1
     2ea:	de 01       	movw	r26, r28
     2ec:	11 96       	adiw	r26, 0x01	; 1
     2ee:	01 90       	ld	r0, Z+
     2f0:	0d 92       	st	X+, r0
     2f2:	8a 95       	dec	r24
     2f4:	e1 f7       	brne	.-8      	; 0x2ee <Timer1+0x3a>
	int i;
    //find the best prescaler value
    for (i = 0; i < 5; i++){
     2f6:	00 e0       	ldi	r16, 0x00	; 0
     2f8:	10 e0       	ldi	r17, 0x00	; 0
     2fa:	2a c0       	rjmp	.+84     	; 0x350 <Timer1+0x9c>
		if (C - (F_CPU * us)/prescalers[i] >= 0){
     2fc:	20 e0       	ldi	r18, 0x00	; 0
     2fe:	34 e2       	ldi	r19, 0x24	; 36
     300:	44 e7       	ldi	r20, 0x74	; 116
     302:	5b e4       	ldi	r21, 0x4B	; 75
     304:	c7 01       	movw	r24, r14
     306:	b6 01       	movw	r22, r12
     308:	0e 94 21 06 	call	0xc42	; 0xc42 <__mulsf3>
     30c:	f8 01       	movw	r30, r16
     30e:	ee 0f       	add	r30, r30
     310:	ff 1f       	adc	r31, r31
     312:	ee 0f       	add	r30, r30
     314:	ff 1f       	adc	r31, r31
     316:	21 e0       	ldi	r18, 0x01	; 1
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	2c 0f       	add	r18, r28
     31c:	3d 1f       	adc	r19, r29
     31e:	e2 0f       	add	r30, r18
     320:	f3 1f       	adc	r31, r19
     322:	20 81       	ld	r18, Z
     324:	31 81       	ldd	r19, Z+1	; 0x01
     326:	42 81       	ldd	r20, Z+2	; 0x02
     328:	53 81       	ldd	r21, Z+3	; 0x03
     32a:	0e 94 96 04 	call	0x92c	; 0x92c <__divsf3>
     32e:	9b 01       	movw	r18, r22
     330:	ac 01       	movw	r20, r24
     332:	60 e0       	ldi	r22, 0x00	; 0
     334:	70 e0       	ldi	r23, 0x00	; 0
     336:	80 e8       	ldi	r24, 0x80	; 128
     338:	97 e4       	ldi	r25, 0x47	; 71
     33a:	0e 94 29 04 	call	0x852	; 0x852 <__subsf3>
     33e:	20 e0       	ldi	r18, 0x00	; 0
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	a9 01       	movw	r20, r18
     344:	0e 94 cc 05 	call	0xb98	; 0xb98 <__gesf2>
     348:	88 23       	and	r24, r24
     34a:	2c f4       	brge	.+10     	; 0x356 <Timer1+0xa2>
	float C = pow(2, timerBits);
    //allowed prescaler values
    float prescalers[] = {1.0, 8.0, 64.0, 256.0, 1024.0};
	int i;
    //find the best prescaler value
    for (i = 0; i < 5; i++){
     34c:	0f 5f       	subi	r16, 0xFF	; 255
     34e:	1f 4f       	sbci	r17, 0xFF	; 255
     350:	05 30       	cpi	r16, 0x05	; 5
     352:	11 05       	cpc	r17, r1
     354:	9c f2       	brlt	.-90     	; 0x2fc <Timer1+0x48>
			break;
		}
    }
	
    // calculate timer count
	float timerCount = C - (F_CPU * us)/prescalers[i];
     356:	20 e0       	ldi	r18, 0x00	; 0
     358:	34 e2       	ldi	r19, 0x24	; 36
     35a:	44 e7       	ldi	r20, 0x74	; 116
     35c:	5b e4       	ldi	r21, 0x4B	; 75
     35e:	c7 01       	movw	r24, r14
     360:	b6 01       	movw	r22, r12
     362:	0e 94 21 06 	call	0xc42	; 0xc42 <__mulsf3>
     366:	f8 01       	movw	r30, r16
     368:	ee 0f       	add	r30, r30
     36a:	ff 1f       	adc	r31, r31
     36c:	ee 0f       	add	r30, r30
     36e:	ff 1f       	adc	r31, r31
     370:	21 e0       	ldi	r18, 0x01	; 1
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	2c 0f       	add	r18, r28
     376:	3d 1f       	adc	r19, r29
     378:	e2 0f       	add	r30, r18
     37a:	f3 1f       	adc	r31, r19
     37c:	20 81       	ld	r18, Z
     37e:	31 81       	ldd	r19, Z+1	; 0x01
     380:	42 81       	ldd	r20, Z+2	; 0x02
     382:	53 81       	ldd	r21, Z+3	; 0x03
     384:	0e 94 96 04 	call	0x92c	; 0x92c <__divsf3>
     388:	9b 01       	movw	r18, r22
     38a:	ac 01       	movw	r20, r24
     38c:	60 e0       	ldi	r22, 0x00	; 0
     38e:	70 e0       	ldi	r23, 0x00	; 0
     390:	80 e8       	ldi	r24, 0x80	; 128
     392:	97 e4       	ldi	r25, 0x47	; 71
     394:	0e 94 29 04 	call	0x852	; 0x852 <__subsf3>

	// set timer count in register
	TCNT1 = timerCount;
     398:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__fixunssfsi>
     39c:	70 93 85 00 	sts	0x0085, r23	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     3a0:	60 93 84 00 	sts	0x0084, r22	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>

	// set TCCR1A and TCCR1B registers for normal mode and prescaler
	TCCR1A = 0x0;		// normal mode
     3a4:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = i + 1;		// prescaler bits 
     3a8:	0f 5f       	subi	r16, 0xFF	; 255
     3aa:	00 93 81 00 	sts	0x0081, r16	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

	// enable timer overflow interrupt
	TIMSK1 = (1 << TOIE1);
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>

	// enable pin change interrupt for ECHO pin
	PCICR = (1 << PCIE1);
     3b4:	82 e0       	ldi	r24, 0x02	; 2
     3b6:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
	PCMSK1 = (1 << ECHO_PIN);
     3ba:	84 e0       	ldi	r24, 0x04	; 4
     3bc:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7f806c>
	
	return;
}
     3c0:	64 96       	adiw	r28, 0x14	; 20
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	f8 94       	cli
     3c6:	de bf       	out	0x3e, r29	; 62
     3c8:	0f be       	out	0x3f, r0	; 63
     3ca:	cd bf       	out	0x3d, r28	; 61
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	1f 91       	pop	r17
     3d2:	0f 91       	pop	r16
     3d4:	ff 90       	pop	r15
     3d6:	ef 90       	pop	r14
     3d8:	df 90       	pop	r13
     3da:	cf 90       	pop	r12
     3dc:	08 95       	ret

000003de <UART_Puts>:
	TIMSK1 &= ~(1 << TOIE1); // disable timer overflow interrupt
}


void UART_Puts(const char *str)				// Display a string in the PC Terminal Program
{
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
     3e2:	ec 01       	movw	r28, r24
	while (*str)
     3e4:	05 c0       	rjmp	.+10     	; 0x3f0 <UART_Puts+0x12>
	{
		ASCII = *str++;
     3e6:	21 96       	adiw	r28, 0x01	; 1
     3e8:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <ASCII>
		UART_Put();
     3ec:	0e 94 1f 01 	call	0x23e	; 0x23e <UART_Put>
}


void UART_Puts(const char *str)				// Display a string in the PC Terminal Program
{
	while (*str)
     3f0:	88 81       	ld	r24, Y
     3f2:	81 11       	cpse	r24, r1
     3f4:	f8 cf       	rjmp	.-16     	; 0x3e6 <UART_Puts+0x8>
	{
		ASCII = *str++;
		UART_Put();
	}
}
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	08 95       	ret

000003fc <__vector_4>:
	
	return;
}

// Timer1 interrupt for ECHO pin
ISR(PCINT1_vect){
     3fc:	1f 92       	push	r1
     3fe:	0f 92       	push	r0
     400:	0f b6       	in	r0, 0x3f	; 63
     402:	0f 92       	push	r0
     404:	11 24       	eor	r1, r1
     406:	2f 93       	push	r18
     408:	3f 93       	push	r19
     40a:	4f 93       	push	r20
     40c:	5f 93       	push	r21
     40e:	6f 93       	push	r22
     410:	7f 93       	push	r23
     412:	8f 93       	push	r24
     414:	9f 93       	push	r25
     416:	af 93       	push	r26
     418:	bf 93       	push	r27
     41a:	ef 93       	push	r30
     41c:	ff 93       	push	r31
    UART_Puts("echo interrupt \n\r");
     41e:	84 e1       	ldi	r24, 0x14	; 20
     420:	91 e0       	ldi	r25, 0x01	; 1
     422:	0e 94 ef 01 	call	0x3de	; 0x3de <UART_Puts>
    if (!(PINC & (1 << ECHO_PIN))){	// if ECHO pin is low
     426:	32 99       	sbic	0x06, 2	; 6
     428:	06 c0       	rjmp	.+12     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
        UART_Puts("AND ECHO WENT LOW \n\r");
     42a:	86 e2       	ldi	r24, 0x26	; 38
     42c:	91 e0       	ldi	r25, 0x01	; 1
     42e:	0e 94 ef 01 	call	0x3de	; 0x3de <UART_Puts>
        TCCR1B = 0x0; // stop the timer
     432:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    }
}
     436:	ff 91       	pop	r31
     438:	ef 91       	pop	r30
     43a:	bf 91       	pop	r27
     43c:	af 91       	pop	r26
     43e:	9f 91       	pop	r25
     440:	8f 91       	pop	r24
     442:	7f 91       	pop	r23
     444:	6f 91       	pop	r22
     446:	5f 91       	pop	r21
     448:	4f 91       	pop	r20
     44a:	3f 91       	pop	r19
     44c:	2f 91       	pop	r18
     44e:	0f 90       	pop	r0
     450:	0f be       	out	0x3f, r0	; 63
     452:	0f 90       	pop	r0
     454:	1f 90       	pop	r1
     456:	18 95       	reti

00000458 <__vector_13>:

// Timer1 overflow interrupt
ISR(TIMER1_OVF_vect) 
{	
     458:	1f 92       	push	r1
     45a:	0f 92       	push	r0
     45c:	0f b6       	in	r0, 0x3f	; 63
     45e:	0f 92       	push	r0
     460:	11 24       	eor	r1, r1
     462:	2f 93       	push	r18
     464:	3f 93       	push	r19
     466:	4f 93       	push	r20
     468:	5f 93       	push	r21
     46a:	6f 93       	push	r22
     46c:	7f 93       	push	r23
     46e:	8f 93       	push	r24
     470:	9f 93       	push	r25
     472:	af 93       	push	r26
     474:	bf 93       	push	r27
     476:	ef 93       	push	r30
     478:	ff 93       	push	r31
    UART_Puts("overflow interrupt \n\r");
     47a:	8b e3       	ldi	r24, 0x3B	; 59
     47c:	91 e0       	ldi	r25, 0x01	; 1
     47e:	0e 94 ef 01 	call	0x3de	; 0x3de <UART_Puts>
    TCCR1B = 0x0; // stop the timer
     482:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1 &= ~(1 << TOIE1); // disable timer overflow interrupt
     486:	ef e6       	ldi	r30, 0x6F	; 111
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	80 81       	ld	r24, Z
     48c:	8e 7f       	andi	r24, 0xFE	; 254
     48e:	80 83       	st	Z, r24
}
     490:	ff 91       	pop	r31
     492:	ef 91       	pop	r30
     494:	bf 91       	pop	r27
     496:	af 91       	pop	r26
     498:	9f 91       	pop	r25
     49a:	8f 91       	pop	r24
     49c:	7f 91       	pop	r23
     49e:	6f 91       	pop	r22
     4a0:	5f 91       	pop	r21
     4a2:	4f 91       	pop	r20
     4a4:	3f 91       	pop	r19
     4a6:	2f 91       	pop	r18
     4a8:	0f 90       	pop	r0
     4aa:	0f be       	out	0x3f, r0	; 63
     4ac:	0f 90       	pop	r0
     4ae:	1f 90       	pop	r1
     4b0:	18 95       	reti

000004b2 <LCD_Puts>:
		UART_Put();
	}
}

void LCD_Puts(const char *str)				// Display a string on the LCD Module
{
     4b2:	cf 93       	push	r28
     4b4:	df 93       	push	r29
     4b6:	ec 01       	movw	r28, r24
	while (*str)
     4b8:	05 c0       	rjmp	.+10     	; 0x4c4 <LCD_Puts+0x12>
	{
		DATA = *str++;
     4ba:	21 96       	adiw	r28, 0x01	; 1
     4bc:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>
		LCD_Write_Data();
     4c0:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LCD_Write_Data>
	}
}

void LCD_Puts(const char *str)				// Display a string on the LCD Module
{
	while (*str)
     4c4:	88 81       	ld	r24, Y
     4c6:	81 11       	cpse	r24, r1
     4c8:	f8 cf       	rjmp	.-16     	; 0x4ba <LCD_Puts+0x8>
	{
		DATA = *str++;
		LCD_Write_Data();
	}
}
     4ca:	df 91       	pop	r29
     4cc:	cf 91       	pop	r28
     4ce:	08 95       	ret

000004d0 <LCD>:

void LCD(void)								// LCD Display
{
	DATA = 0x38;					// 8 bit 1 line 
     4d0:	88 e3       	ldi	r24, 0x38	; 56
     4d2:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>
	LCD_Write_Command();
     4d6:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_Write_Command>
	
	DATA = 0x0E;					// display cursor on 
     4da:	8e e0       	ldi	r24, 0x0E	; 14
     4dc:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>
	LCD_Write_Command();
     4e0:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_Write_Command>
	
	DATA = 0x01;					// clear LCD
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>
	LCD_Write_Command();
     4ea:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_Write_Command>
	
	LCD_Puts("test lcd");
     4ee:	81 e5       	ldi	r24, 0x51	; 81
     4f0:	91 e0       	ldi	r25, 0x01	; 1
     4f2:	0e 94 59 02 	call	0x4b2	; 0x4b2 <LCD_Puts>
     4f6:	08 95       	ret

000004f8 <calculateTemperature>:
}

float calculateTemperature(int adcValue)	// helper function to calculate temperature from adc
{
     4f8:	8f 92       	push	r8
     4fa:	9f 92       	push	r9
     4fc:	af 92       	push	r10
     4fe:	bf 92       	push	r11
     500:	cf 92       	push	r12
     502:	df 92       	push	r13
     504:	ef 92       	push	r14
     506:	ff 92       	push	r15
	// ADC reference voltage and resolution
	float Vref = 3.3;     // ADC reference voltage
	int resolution = 1024;  // ADC resolution (10 bits)

	// Convert ADC value to voltage
	float voltage = (adcValue * Vref) / (float)resolution;
     508:	bc 01       	movw	r22, r24
     50a:	99 0f       	add	r25, r25
     50c:	88 0b       	sbc	r24, r24
     50e:	99 0b       	sbc	r25, r25
     510:	0e 94 40 05 	call	0xa80	; 0xa80 <__floatsisf>
     514:	23 e3       	ldi	r18, 0x33	; 51
     516:	33 e3       	ldi	r19, 0x33	; 51
     518:	43 e5       	ldi	r20, 0x53	; 83
     51a:	50 e4       	ldi	r21, 0x40	; 64
     51c:	0e 94 21 06 	call	0xc42	; 0xc42 <__mulsf3>
     520:	20 e0       	ldi	r18, 0x00	; 0
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	40 e8       	ldi	r20, 0x80	; 128
     526:	5a e3       	ldi	r21, 0x3A	; 58
     528:	0e 94 21 06 	call	0xc42	; 0xc42 <__mulsf3>
     52c:	6b 01       	movw	r12, r22
     52e:	7c 01       	movw	r14, r24

	// Calculate thermistor resistance
	float resistance = R0 * voltage / (Vref - voltage);
     530:	20 e0       	ldi	r18, 0x00	; 0
     532:	30 e4       	ldi	r19, 0x40	; 64
     534:	4c e1       	ldi	r20, 0x1C	; 28
     536:	56 e4       	ldi	r21, 0x46	; 70
     538:	0e 94 21 06 	call	0xc42	; 0xc42 <__mulsf3>
     53c:	4b 01       	movw	r8, r22
     53e:	5c 01       	movw	r10, r24
     540:	a7 01       	movw	r20, r14
     542:	96 01       	movw	r18, r12
     544:	63 e3       	ldi	r22, 0x33	; 51
     546:	73 e3       	ldi	r23, 0x33	; 51
     548:	83 e5       	ldi	r24, 0x53	; 83
     54a:	90 e4       	ldi	r25, 0x40	; 64
     54c:	0e 94 29 04 	call	0x852	; 0x852 <__subsf3>
     550:	9b 01       	movw	r18, r22
     552:	ac 01       	movw	r20, r24
     554:	c5 01       	movw	r24, r10
     556:	b4 01       	movw	r22, r8
     558:	0e 94 96 04 	call	0x92c	; 0x92c <__divsf3>
	
	// Calculate temperature in Kelvin using the Steinhart-Hart equation
	float tempKelvin = 1.0 / ((log(resistance / R0) / B) + (1.0 / (T0 + 273.15)));
     55c:	20 e0       	ldi	r18, 0x00	; 0
     55e:	30 e4       	ldi	r19, 0x40	; 64
     560:	4c e1       	ldi	r20, 0x1C	; 28
     562:	56 e4       	ldi	r21, 0x46	; 70
     564:	0e 94 96 04 	call	0x92c	; 0x92c <__divsf3>
     568:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <log>
     56c:	20 e0       	ldi	r18, 0x00	; 0
     56e:	30 ee       	ldi	r19, 0xE0	; 224
     570:	46 e7       	ldi	r20, 0x76	; 118
     572:	55 e4       	ldi	r21, 0x45	; 69
     574:	0e 94 96 04 	call	0x92c	; 0x92c <__divsf3>
     578:	2f e0       	ldi	r18, 0x0F	; 15
     57a:	3f ec       	ldi	r19, 0xCF	; 207
     57c:	4b e5       	ldi	r20, 0x5B	; 91
     57e:	5b e3       	ldi	r21, 0x3B	; 59
     580:	0e 94 2a 04 	call	0x854	; 0x854 <__addsf3>
     584:	9b 01       	movw	r18, r22
     586:	ac 01       	movw	r20, r24
     588:	60 e0       	ldi	r22, 0x00	; 0
     58a:	70 e0       	ldi	r23, 0x00	; 0
     58c:	80 e8       	ldi	r24, 0x80	; 128
     58e:	9f e3       	ldi	r25, 0x3F	; 63
     590:	0e 94 96 04 	call	0x92c	; 0x92c <__divsf3>
	float temperature = tempKelvin - 273.15;
     594:	23 e3       	ldi	r18, 0x33	; 51
     596:	33 e9       	ldi	r19, 0x93	; 147
     598:	48 e8       	ldi	r20, 0x88	; 136
     59a:	53 e4       	ldi	r21, 0x43	; 67
     59c:	0e 94 29 04 	call	0x852	; 0x852 <__subsf3>
	
	return temperature;
}
     5a0:	ff 90       	pop	r15
     5a2:	ef 90       	pop	r14
     5a4:	df 90       	pop	r13
     5a6:	cf 90       	pop	r12
     5a8:	bf 90       	pop	r11
     5aa:	af 90       	pop	r10
     5ac:	9f 90       	pop	r9
     5ae:	8f 90       	pop	r8
     5b0:	08 95       	ret

000005b2 <ADConverter>:

void ADConverter(void)								// take in adc value and convert to temp
{
     5b2:	8f 92       	push	r8
     5b4:	9f 92       	push	r9
     5b6:	af 92       	push	r10
     5b8:	bf 92       	push	r11
     5ba:	cf 92       	push	r12
     5bc:	df 92       	push	r13
     5be:	ef 92       	push	r14
     5c0:	ff 92       	push	r15
     5c2:	0f 93       	push	r16
     5c4:	1f 93       	push	r17
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
	volts[0x1]='.';
     5ca:	c1 e2       	ldi	r28, 0x21	; 33
     5cc:	d2 e0       	ldi	r29, 0x02	; 2
     5ce:	8e e2       	ldi	r24, 0x2E	; 46
     5d0:	89 83       	std	Y+1, r24	; 0x01
	volts[0x3]=' ';
     5d2:	80 e2       	ldi	r24, 0x20	; 32
     5d4:	8b 83       	std	Y+3, r24	; 0x03
	volts[0x4]= 0;
     5d6:	1c 82       	std	Y+4, r1	; 0x04
	ADC_Get();
     5d8:	0e 94 28 01 	call	0x250	; 0x250 <ADC_Get>
	Acc = (((int)HADC) * 0x100 + (int)(LADC))*0xA;
     5dc:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <HADC>
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
     5e2:	3e 2f       	mov	r19, r30
     5e4:	22 27       	eor	r18, r18
     5e6:	00 91 26 02 	lds	r16, 0x0226	; 0x800226 <LADC>
     5ea:	10 e0       	ldi	r17, 0x00	; 0
     5ec:	20 0f       	add	r18, r16
     5ee:	31 1f       	adc	r19, r17
     5f0:	c9 01       	movw	r24, r18
     5f2:	88 0f       	add	r24, r24
     5f4:	99 1f       	adc	r25, r25
     5f6:	22 0f       	add	r18, r18
     5f8:	33 1f       	adc	r19, r19
     5fa:	22 0f       	add	r18, r18
     5fc:	33 1f       	adc	r19, r19
     5fe:	22 0f       	add	r18, r18
     600:	33 1f       	adc	r19, r19
     602:	82 0f       	add	r24, r18
     604:	93 1f       	adc	r25, r19
	volts[0x0] = 48 + (Acc / 0x7FE);
     606:	2e ef       	ldi	r18, 0xFE	; 254
     608:	37 e0       	ldi	r19, 0x07	; 7
     60a:	b9 01       	movw	r22, r18
     60c:	0e 94 e7 06 	call	0xdce	; 0xdce <__divmodhi4>
     610:	40 e3       	ldi	r20, 0x30	; 48
     612:	46 0f       	add	r20, r22
     614:	48 83       	st	Y, r20
	Acc = Acc % 0x7FE;
	volts[0x2] = ((Acc *0xA) / 0x7FE) + 48;
     616:	bc 01       	movw	r22, r24
     618:	66 0f       	add	r22, r22
     61a:	77 1f       	adc	r23, r23
     61c:	88 0f       	add	r24, r24
     61e:	99 1f       	adc	r25, r25
     620:	88 0f       	add	r24, r24
     622:	99 1f       	adc	r25, r25
     624:	88 0f       	add	r24, r24
     626:	99 1f       	adc	r25, r25
     628:	86 0f       	add	r24, r22
     62a:	97 1f       	adc	r25, r23
     62c:	b9 01       	movw	r22, r18
     62e:	0e 94 e7 06 	call	0xdce	; 0xdce <__divmodhi4>
     632:	60 5d       	subi	r22, 0xD0	; 208
     634:	6a 83       	std	Y+2, r22	; 0x02
	Acc = (Acc * 0xA) % 0x7FE;
     636:	90 93 28 02 	sts	0x0228, r25	; 0x800228 <Acc+0x1>
     63a:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <Acc>
	if (Acc >= 0x3FF) volts[0x2]++;
     63e:	8f 3f       	cpi	r24, 0xFF	; 255
     640:	93 40       	sbci	r25, 0x03	; 3
     642:	1c f0       	brlt	.+6      	; 0x64a <ADConverter+0x98>
     644:	6f 5f       	subi	r22, 0xFF	; 255
     646:	60 93 23 02 	sts	0x0223, r22	; 0x800223 <volts+0x2>
	if (volts[0x2] == 58)
     64a:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <volts+0x2>
     64e:	8a 33       	cpi	r24, 0x3A	; 58
     650:	41 f4       	brne	.+16     	; 0x662 <ADConverter+0xb0>
	{
		volts[0x2] = 48;
     652:	a1 e2       	ldi	r26, 0x21	; 33
     654:	b2 e0       	ldi	r27, 0x02	; 2
     656:	80 e3       	ldi	r24, 0x30	; 48
     658:	12 96       	adiw	r26, 0x02	; 2
     65a:	8c 93       	st	X, r24
     65c:	12 97       	sbiw	r26, 0x02	; 2
		volts[0x0]++;
     65e:	4f 5f       	subi	r20, 0xFF	; 255
     660:	4c 93       	st	X, r20
	}
	int adcValue = (HADC << 8) | LADC;
     662:	9e 2f       	mov	r25, r30
     664:	88 27       	eor	r24, r24
	float temperature_Celsius = calculateTemperature(adcValue);
     666:	80 2b       	or	r24, r16
     668:	91 2b       	or	r25, r17
     66a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <calculateTemperature>
     66e:	4b 01       	movw	r8, r22
     670:	5c 01       	movw	r10, r24
	unsigned int temp_integer = (int)temperature_Celsius;
     672:	0e 94 08 05 	call	0xa10	; 0xa10 <__fixsfsi>
     676:	6b 01       	movw	r12, r22
     678:	7c 01       	movw	r14, r24
	int temp_fractional = (int)((temperature_Celsius - temp_integer)*100);
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__floatunsisf>
     682:	9b 01       	movw	r18, r22
     684:	ac 01       	movw	r20, r24
     686:	c5 01       	movw	r24, r10
     688:	b4 01       	movw	r22, r8
     68a:	0e 94 29 04 	call	0x852	; 0x852 <__subsf3>
     68e:	20 e0       	ldi	r18, 0x00	; 0
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	48 ec       	ldi	r20, 0xC8	; 200
     694:	52 e4       	ldi	r21, 0x42	; 66
     696:	0e 94 21 06 	call	0xc42	; 0xc42 <__mulsf3>
     69a:	0e 94 08 05 	call	0xa10	; 0xa10 <__fixsfsi>
	sprintf(volts, "%d.%d degrees Celsius\n", temp_integer, temp_fractional);
     69e:	7f 93       	push	r23
     6a0:	6f 93       	push	r22
     6a2:	df 92       	push	r13
     6a4:	cf 92       	push	r12
     6a6:	8a e5       	ldi	r24, 0x5A	; 90
     6a8:	91 e0       	ldi	r25, 0x01	; 1
     6aa:	9f 93       	push	r25
     6ac:	8f 93       	push	r24
     6ae:	81 e2       	ldi	r24, 0x21	; 33
     6b0:	92 e0       	ldi	r25, 0x02	; 2
     6b2:	9f 93       	push	r25
     6b4:	8f 93       	push	r24
     6b6:	0e 94 50 07 	call	0xea0	; 0xea0 <sprintf>
	UART_Puts(volts);
     6ba:	81 e2       	ldi	r24, 0x21	; 33
     6bc:	92 e0       	ldi	r25, 0x02	; 2
     6be:	0e 94 ef 01 	call	0x3de	; 0x3de <UART_Puts>
}
     6c2:	8d b7       	in	r24, 0x3d	; 61
     6c4:	9e b7       	in	r25, 0x3e	; 62
     6c6:	08 96       	adiw	r24, 0x08	; 8
     6c8:	0f b6       	in	r0, 0x3f	; 63
     6ca:	f8 94       	cli
     6cc:	9e bf       	out	0x3e, r25	; 62
     6ce:	0f be       	out	0x3f, r0	; 63
     6d0:	8d bf       	out	0x3d, r24	; 61
     6d2:	df 91       	pop	r29
     6d4:	cf 91       	pop	r28
     6d6:	1f 91       	pop	r17
     6d8:	0f 91       	pop	r16
     6da:	ff 90       	pop	r15
     6dc:	ef 90       	pop	r14
     6de:	df 90       	pop	r13
     6e0:	cf 90       	pop	r12
     6e2:	bf 90       	pop	r11
     6e4:	af 90       	pop	r10
     6e6:	9f 90       	pop	r9
     6e8:	8f 90       	pop	r8
     6ea:	08 95       	ret

000006ec <pingDistance>:
	DDRC &= ~(1 << ECHO_PIN);	// Set PC2 as input
}
*/

float pingDistance(void)						// helper function to time trigger ping and return distance
{
     6ec:	cf 92       	push	r12
     6ee:	df 92       	push	r13
     6f0:	ef 92       	push	r14
     6f2:	ff 92       	push	r15
	UART_Puts("starting trigger ping\n\r");
     6f4:	81 e7       	ldi	r24, 0x71	; 113
     6f6:	91 e0       	ldi	r25, 0x01	; 1
     6f8:	0e 94 ef 01 	call	0x3de	; 0x3de <UART_Puts>
	// Send a 10us pulse on the Trig pin
	PORTC |= (1 << TRIGGER_PIN);
     6fc:	88 b1       	in	r24, 0x08	; 8
     6fe:	82 60       	ori	r24, 0x02	; 2
     700:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     702:	25 e3       	ldi	r18, 0x35	; 53
     704:	2a 95       	dec	r18
     706:	f1 f7       	brne	.-4      	; 0x704 <pingDistance+0x18>
     708:	00 00       	nop
	_delay_us(10);
	PORTC &= ~(1 << TRIGGER_PIN);
     70a:	88 b1       	in	r24, 0x08	; 8
     70c:	8d 7f       	andi	r24, 0xFD	; 253
     70e:	88 b9       	out	0x08, r24	; 8

	// Measure the time the Echo pin stays high
	Timer1(MAX_TIMEOUT); // timeout/overflow value
     710:	60 e0       	ldi	r22, 0x00	; 0
     712:	7b e1       	ldi	r23, 0x1B	; 27
     714:	87 e3       	ldi	r24, 0x37	; 55
     716:	9a e4       	ldi	r25, 0x4A	; 74
     718:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <Timer1>
	
	// Calculate time passed
	float time = (TCNT1 * getPrescaler()) / F_CPU; 	// time in seconds
     71c:	e0 90 84 00 	lds	r14, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     720:	f0 90 85 00 	lds	r15, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     724:	0e 94 38 01 	call	0x270	; 0x270 <getPrescaler>
     728:	9c 01       	movw	r18, r24
     72a:	2e 9d       	mul	r18, r14
     72c:	c0 01       	movw	r24, r0
     72e:	2f 9d       	mul	r18, r15
     730:	90 0d       	add	r25, r0
     732:	3e 9d       	mul	r19, r14
     734:	90 0d       	add	r25, r0
     736:	11 24       	eor	r1, r1
     738:	bc 01       	movw	r22, r24
     73a:	80 e0       	ldi	r24, 0x00	; 0
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	20 e0       	ldi	r18, 0x00	; 0
     740:	34 e2       	ldi	r19, 0x24	; 36
     742:	44 ef       	ldi	r20, 0xF4	; 244
     744:	50 e0       	ldi	r21, 0x00	; 0
     746:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__divmodsi4>
     74a:	ca 01       	movw	r24, r20
     74c:	b9 01       	movw	r22, r18
     74e:	0e 94 40 05 	call	0xa80	; 0xa80 <__floatsisf>

	// Calculate distance using speed of sound (34300 cm/s) and accounting for return trip
	float distance = time * 34300 / 2;	// distance in cm
     752:	20 e0       	ldi	r18, 0x00	; 0
     754:	3c ef       	ldi	r19, 0xFC	; 252
     756:	45 e0       	ldi	r20, 0x05	; 5
     758:	57 e4       	ldi	r21, 0x47	; 71
     75a:	0e 94 21 06 	call	0xc42	; 0xc42 <__mulsf3>
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	40 e0       	ldi	r20, 0x00	; 0
     764:	5f e3       	ldi	r21, 0x3F	; 63
     766:	0e 94 21 06 	call	0xc42	; 0xc42 <__mulsf3>
     76a:	6b 01       	movw	r12, r22
     76c:	7c 01       	movw	r14, r24

	UART_Puts("distance calculated\n\r");
     76e:	89 e8       	ldi	r24, 0x89	; 137
     770:	91 e0       	ldi	r25, 0x01	; 1
     772:	0e 94 ef 01 	call	0x3de	; 0x3de <UART_Puts>
	return distance;
}
     776:	c7 01       	movw	r24, r14
     778:	b6 01       	movw	r22, r12
     77a:	ff 90       	pop	r15
     77c:	ef 90       	pop	r14
     77e:	df 90       	pop	r13
     780:	cf 90       	pop	r12
     782:	08 95       	ret

00000784 <USS>:

void USS(void){
     784:	0f 93       	push	r16
     786:	1f 93       	push	r17
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
     78c:	cd b7       	in	r28, 0x3d	; 61
     78e:	de b7       	in	r29, 0x3e	; 62
     790:	6c 97       	sbiw	r28, 0x1c	; 28
     792:	0f b6       	in	r0, 0x3f	; 63
     794:	f8 94       	cli
     796:	de bf       	out	0x3e, r29	; 62
     798:	0f be       	out	0x3f, r0	; 63
     79a:	cd bf       	out	0x3d, r28	; 61
	int distance = (int)pingDistance();
     79c:	0e 94 76 03 	call	0x6ec	; 0x6ec <pingDistance>
     7a0:	0e 94 08 05 	call	0xa10	; 0xa10 <__fixsfsi>
	char buff[28]; // buffer to store distance as string

	sprintf(buff, "distance = %d cm\n", distance); // actually convert to string
     7a4:	7f 93       	push	r23
     7a6:	6f 93       	push	r22
     7a8:	8f e9       	ldi	r24, 0x9F	; 159
     7aa:	91 e0       	ldi	r25, 0x01	; 1
     7ac:	9f 93       	push	r25
     7ae:	8f 93       	push	r24
     7b0:	8e 01       	movw	r16, r28
     7b2:	0f 5f       	subi	r16, 0xFF	; 255
     7b4:	1f 4f       	sbci	r17, 0xFF	; 255
     7b6:	1f 93       	push	r17
     7b8:	0f 93       	push	r16
     7ba:	0e 94 50 07 	call	0xea0	; 0xea0 <sprintf>
	
	//display to both UART and LCD
	UART_Puts(buff);
     7be:	c8 01       	movw	r24, r16
     7c0:	0e 94 ef 01 	call	0x3de	; 0x3de <UART_Puts>
	LCD_Puts(buff);
     7c4:	c8 01       	movw	r24, r16
     7c6:	0e 94 59 02 	call	0x4b2	; 0x4b2 <LCD_Puts>
	
	return;
     7ca:	0f 90       	pop	r0
     7cc:	0f 90       	pop	r0
     7ce:	0f 90       	pop	r0
     7d0:	0f 90       	pop	r0
     7d2:	0f 90       	pop	r0
     7d4:	0f 90       	pop	r0
}
     7d6:	6c 96       	adiw	r28, 0x1c	; 28
     7d8:	0f b6       	in	r0, 0x3f	; 63
     7da:	f8 94       	cli
     7dc:	de bf       	out	0x3e, r29	; 62
     7de:	0f be       	out	0x3f, r0	; 63
     7e0:	cd bf       	out	0x3d, r28	; 61
     7e2:	df 91       	pop	r29
     7e4:	cf 91       	pop	r28
     7e6:	1f 91       	pop	r17
     7e8:	0f 91       	pop	r16
     7ea:	08 95       	ret

000007ec <Banner>:

void Banner(void)							// Display the Banner
{
	LCD_Puts(BannerMSG);
     7ec:	81 eb       	ldi	r24, 0xB1	; 177
     7ee:	91 e0       	ldi	r25, 0x01	; 1
     7f0:	0e 94 59 02 	call	0x4b2	; 0x4b2 <LCD_Puts>
	UART_Puts(BannerMSG);
     7f4:	81 eb       	ldi	r24, 0xB1	; 177
     7f6:	91 e0       	ldi	r25, 0x01	; 1
     7f8:	0e 94 ef 01 	call	0x3de	; 0x3de <UART_Puts>
     7fc:	08 95       	ret

000007fe <Command>:
	return;
}

void Command(void)							// command interpreter
{
	UART_Puts(MenuMSG);
     7fe:	8b ef       	ldi	r24, 0xFB	; 251
     800:	91 e0       	ldi	r25, 0x01	; 1
     802:	0e 94 ef 01 	call	0x3de	; 0x3de <UART_Puts>
	ASCII = '\0';
     806:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <ASCII>
	while (ASCII == '\0')
     80a:	02 c0       	rjmp	.+4      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
	{
		UART_Get();
     80c:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Get>

void Command(void)							// command interpreter
{
	UART_Puts(MenuMSG);
	ASCII = '\0';
	while (ASCII == '\0')
     810:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <ASCII>
     814:	88 23       	and	r24, r24
     816:	d1 f3       	breq	.-12     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
	{
		UART_Get();
	}
	switch (ASCII)
     818:	8c 36       	cpi	r24, 0x6C	; 108
     81a:	29 f0       	breq	.+10     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
     81c:	80 37       	cpi	r24, 0x70	; 112
     81e:	49 f0       	breq	.+18     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
     820:	81 36       	cpi	r24, 0x61	; 97
     822:	51 f4       	brne	.+20     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
     824:	03 c0       	rjmp	.+6      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
	{
		case 'L' | 'l': LCD();
     826:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LCD>
		break;
     82a:	08 95       	ret
		case 'A' | 'a': ADConverter();
     82c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <ADConverter>
		break;
     830:	08 95       	ret
		case 'P' | 'p': USS();
     832:	0e 94 c2 03 	call	0x784	; 0x784 <USS>
		break;
     836:	08 95       	ret
		default: UART_Puts(InvalidCommandMSG);
     838:	8c ed       	ldi	r24, 0xDC	; 220
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	0e 94 ef 01 	call	0x3de	; 0x3de <UART_Puts>
     840:	08 95       	ret

00000842 <main>:
}


int main(void)
{
	Mega328P_Init();
     842:	0e 94 a6 00 	call	0x14c	; 0x14c <Mega328P_Init>
	Banner();
     846:	0e 94 f6 03 	call	0x7ec	; 0x7ec <Banner>
	sei();
     84a:	78 94       	sei
	
	while (1){
		Command();
     84c:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Command>
     850:	fd cf       	rjmp	.-6      	; 0x84c <main+0xa>

00000852 <__subsf3>:
     852:	50 58       	subi	r21, 0x80	; 128

00000854 <__addsf3>:
     854:	bb 27       	eor	r27, r27
     856:	aa 27       	eor	r26, r26
     858:	0e 94 41 04 	call	0x882	; 0x882 <__addsf3x>
     85c:	0c 94 92 05 	jmp	0xb24	; 0xb24 <__fp_round>
     860:	0e 94 84 05 	call	0xb08	; 0xb08 <__fp_pscA>
     864:	38 f0       	brcs	.+14     	; 0x874 <__addsf3+0x20>
     866:	0e 94 8b 05 	call	0xb16	; 0xb16 <__fp_pscB>
     86a:	20 f0       	brcs	.+8      	; 0x874 <__addsf3+0x20>
     86c:	39 f4       	brne	.+14     	; 0x87c <__addsf3+0x28>
     86e:	9f 3f       	cpi	r25, 0xFF	; 255
     870:	19 f4       	brne	.+6      	; 0x878 <__addsf3+0x24>
     872:	26 f4       	brtc	.+8      	; 0x87c <__addsf3+0x28>
     874:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__fp_nan>
     878:	0e f4       	brtc	.+2      	; 0x87c <__addsf3+0x28>
     87a:	e0 95       	com	r30
     87c:	e7 fb       	bst	r30, 7
     87e:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__fp_inf>

00000882 <__addsf3x>:
     882:	e9 2f       	mov	r30, r25
     884:	0e 94 a3 05 	call	0xb46	; 0xb46 <__fp_split3>
     888:	58 f3       	brcs	.-42     	; 0x860 <__addsf3+0xc>
     88a:	ba 17       	cp	r27, r26
     88c:	62 07       	cpc	r22, r18
     88e:	73 07       	cpc	r23, r19
     890:	84 07       	cpc	r24, r20
     892:	95 07       	cpc	r25, r21
     894:	20 f0       	brcs	.+8      	; 0x89e <__addsf3x+0x1c>
     896:	79 f4       	brne	.+30     	; 0x8b6 <__addsf3x+0x34>
     898:	a6 f5       	brtc	.+104    	; 0x902 <__stack+0x3>
     89a:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__fp_zero>
     89e:	0e f4       	brtc	.+2      	; 0x8a2 <__addsf3x+0x20>
     8a0:	e0 95       	com	r30
     8a2:	0b 2e       	mov	r0, r27
     8a4:	ba 2f       	mov	r27, r26
     8a6:	a0 2d       	mov	r26, r0
     8a8:	0b 01       	movw	r0, r22
     8aa:	b9 01       	movw	r22, r18
     8ac:	90 01       	movw	r18, r0
     8ae:	0c 01       	movw	r0, r24
     8b0:	ca 01       	movw	r24, r20
     8b2:	a0 01       	movw	r20, r0
     8b4:	11 24       	eor	r1, r1
     8b6:	ff 27       	eor	r31, r31
     8b8:	59 1b       	sub	r21, r25
     8ba:	99 f0       	breq	.+38     	; 0x8e2 <__addsf3x+0x60>
     8bc:	59 3f       	cpi	r21, 0xF9	; 249
     8be:	50 f4       	brcc	.+20     	; 0x8d4 <__addsf3x+0x52>
     8c0:	50 3e       	cpi	r21, 0xE0	; 224
     8c2:	68 f1       	brcs	.+90     	; 0x91e <__stack+0x1f>
     8c4:	1a 16       	cp	r1, r26
     8c6:	f0 40       	sbci	r31, 0x00	; 0
     8c8:	a2 2f       	mov	r26, r18
     8ca:	23 2f       	mov	r18, r19
     8cc:	34 2f       	mov	r19, r20
     8ce:	44 27       	eor	r20, r20
     8d0:	58 5f       	subi	r21, 0xF8	; 248
     8d2:	f3 cf       	rjmp	.-26     	; 0x8ba <__addsf3x+0x38>
     8d4:	46 95       	lsr	r20
     8d6:	37 95       	ror	r19
     8d8:	27 95       	ror	r18
     8da:	a7 95       	ror	r26
     8dc:	f0 40       	sbci	r31, 0x00	; 0
     8de:	53 95       	inc	r21
     8e0:	c9 f7       	brne	.-14     	; 0x8d4 <__addsf3x+0x52>
     8e2:	7e f4       	brtc	.+30     	; 0x902 <__stack+0x3>
     8e4:	1f 16       	cp	r1, r31
     8e6:	ba 0b       	sbc	r27, r26
     8e8:	62 0b       	sbc	r22, r18
     8ea:	73 0b       	sbc	r23, r19
     8ec:	84 0b       	sbc	r24, r20
     8ee:	ba f0       	brmi	.+46     	; 0x91e <__stack+0x1f>
     8f0:	91 50       	subi	r25, 0x01	; 1
     8f2:	a1 f0       	breq	.+40     	; 0x91c <__stack+0x1d>
     8f4:	ff 0f       	add	r31, r31
     8f6:	bb 1f       	adc	r27, r27
     8f8:	66 1f       	adc	r22, r22
     8fa:	77 1f       	adc	r23, r23
     8fc:	88 1f       	adc	r24, r24
     8fe:	c2 f7       	brpl	.-16     	; 0x8f0 <__addsf3x+0x6e>
     900:	0e c0       	rjmp	.+28     	; 0x91e <__stack+0x1f>
     902:	ba 0f       	add	r27, r26
     904:	62 1f       	adc	r22, r18
     906:	73 1f       	adc	r23, r19
     908:	84 1f       	adc	r24, r20
     90a:	48 f4       	brcc	.+18     	; 0x91e <__stack+0x1f>
     90c:	87 95       	ror	r24
     90e:	77 95       	ror	r23
     910:	67 95       	ror	r22
     912:	b7 95       	ror	r27
     914:	f7 95       	ror	r31
     916:	9e 3f       	cpi	r25, 0xFE	; 254
     918:	08 f0       	brcs	.+2      	; 0x91c <__stack+0x1d>
     91a:	b0 cf       	rjmp	.-160    	; 0x87c <__addsf3+0x28>
     91c:	93 95       	inc	r25
     91e:	88 0f       	add	r24, r24
     920:	08 f0       	brcs	.+2      	; 0x924 <__stack+0x25>
     922:	99 27       	eor	r25, r25
     924:	ee 0f       	add	r30, r30
     926:	97 95       	ror	r25
     928:	87 95       	ror	r24
     92a:	08 95       	ret

0000092c <__divsf3>:
     92c:	0e 94 aa 04 	call	0x954	; 0x954 <__divsf3x>
     930:	0c 94 92 05 	jmp	0xb24	; 0xb24 <__fp_round>
     934:	0e 94 8b 05 	call	0xb16	; 0xb16 <__fp_pscB>
     938:	58 f0       	brcs	.+22     	; 0x950 <__divsf3+0x24>
     93a:	0e 94 84 05 	call	0xb08	; 0xb08 <__fp_pscA>
     93e:	40 f0       	brcs	.+16     	; 0x950 <__divsf3+0x24>
     940:	29 f4       	brne	.+10     	; 0x94c <__divsf3+0x20>
     942:	5f 3f       	cpi	r21, 0xFF	; 255
     944:	29 f0       	breq	.+10     	; 0x950 <__divsf3+0x24>
     946:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__fp_inf>
     94a:	51 11       	cpse	r21, r1
     94c:	0c 94 c6 05 	jmp	0xb8c	; 0xb8c <__fp_szero>
     950:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__fp_nan>

00000954 <__divsf3x>:
     954:	0e 94 a3 05 	call	0xb46	; 0xb46 <__fp_split3>
     958:	68 f3       	brcs	.-38     	; 0x934 <__divsf3+0x8>

0000095a <__divsf3_pse>:
     95a:	99 23       	and	r25, r25
     95c:	b1 f3       	breq	.-20     	; 0x94a <__divsf3+0x1e>
     95e:	55 23       	and	r21, r21
     960:	91 f3       	breq	.-28     	; 0x946 <__divsf3+0x1a>
     962:	95 1b       	sub	r25, r21
     964:	55 0b       	sbc	r21, r21
     966:	bb 27       	eor	r27, r27
     968:	aa 27       	eor	r26, r26
     96a:	62 17       	cp	r22, r18
     96c:	73 07       	cpc	r23, r19
     96e:	84 07       	cpc	r24, r20
     970:	38 f0       	brcs	.+14     	; 0x980 <__divsf3_pse+0x26>
     972:	9f 5f       	subi	r25, 0xFF	; 255
     974:	5f 4f       	sbci	r21, 0xFF	; 255
     976:	22 0f       	add	r18, r18
     978:	33 1f       	adc	r19, r19
     97a:	44 1f       	adc	r20, r20
     97c:	aa 1f       	adc	r26, r26
     97e:	a9 f3       	breq	.-22     	; 0x96a <__divsf3_pse+0x10>
     980:	35 d0       	rcall	.+106    	; 0x9ec <__divsf3_pse+0x92>
     982:	0e 2e       	mov	r0, r30
     984:	3a f0       	brmi	.+14     	; 0x994 <__divsf3_pse+0x3a>
     986:	e0 e8       	ldi	r30, 0x80	; 128
     988:	32 d0       	rcall	.+100    	; 0x9ee <__divsf3_pse+0x94>
     98a:	91 50       	subi	r25, 0x01	; 1
     98c:	50 40       	sbci	r21, 0x00	; 0
     98e:	e6 95       	lsr	r30
     990:	00 1c       	adc	r0, r0
     992:	ca f7       	brpl	.-14     	; 0x986 <__divsf3_pse+0x2c>
     994:	2b d0       	rcall	.+86     	; 0x9ec <__divsf3_pse+0x92>
     996:	fe 2f       	mov	r31, r30
     998:	29 d0       	rcall	.+82     	; 0x9ec <__divsf3_pse+0x92>
     99a:	66 0f       	add	r22, r22
     99c:	77 1f       	adc	r23, r23
     99e:	88 1f       	adc	r24, r24
     9a0:	bb 1f       	adc	r27, r27
     9a2:	26 17       	cp	r18, r22
     9a4:	37 07       	cpc	r19, r23
     9a6:	48 07       	cpc	r20, r24
     9a8:	ab 07       	cpc	r26, r27
     9aa:	b0 e8       	ldi	r27, 0x80	; 128
     9ac:	09 f0       	breq	.+2      	; 0x9b0 <__divsf3_pse+0x56>
     9ae:	bb 0b       	sbc	r27, r27
     9b0:	80 2d       	mov	r24, r0
     9b2:	bf 01       	movw	r22, r30
     9b4:	ff 27       	eor	r31, r31
     9b6:	93 58       	subi	r25, 0x83	; 131
     9b8:	5f 4f       	sbci	r21, 0xFF	; 255
     9ba:	3a f0       	brmi	.+14     	; 0x9ca <__divsf3_pse+0x70>
     9bc:	9e 3f       	cpi	r25, 0xFE	; 254
     9be:	51 05       	cpc	r21, r1
     9c0:	78 f0       	brcs	.+30     	; 0x9e0 <__divsf3_pse+0x86>
     9c2:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__fp_inf>
     9c6:	0c 94 c6 05 	jmp	0xb8c	; 0xb8c <__fp_szero>
     9ca:	5f 3f       	cpi	r21, 0xFF	; 255
     9cc:	e4 f3       	brlt	.-8      	; 0x9c6 <__divsf3_pse+0x6c>
     9ce:	98 3e       	cpi	r25, 0xE8	; 232
     9d0:	d4 f3       	brlt	.-12     	; 0x9c6 <__divsf3_pse+0x6c>
     9d2:	86 95       	lsr	r24
     9d4:	77 95       	ror	r23
     9d6:	67 95       	ror	r22
     9d8:	b7 95       	ror	r27
     9da:	f7 95       	ror	r31
     9dc:	9f 5f       	subi	r25, 0xFF	; 255
     9de:	c9 f7       	brne	.-14     	; 0x9d2 <__divsf3_pse+0x78>
     9e0:	88 0f       	add	r24, r24
     9e2:	91 1d       	adc	r25, r1
     9e4:	96 95       	lsr	r25
     9e6:	87 95       	ror	r24
     9e8:	97 f9       	bld	r25, 7
     9ea:	08 95       	ret
     9ec:	e1 e0       	ldi	r30, 0x01	; 1
     9ee:	66 0f       	add	r22, r22
     9f0:	77 1f       	adc	r23, r23
     9f2:	88 1f       	adc	r24, r24
     9f4:	bb 1f       	adc	r27, r27
     9f6:	62 17       	cp	r22, r18
     9f8:	73 07       	cpc	r23, r19
     9fa:	84 07       	cpc	r24, r20
     9fc:	ba 07       	cpc	r27, r26
     9fe:	20 f0       	brcs	.+8      	; 0xa08 <__divsf3_pse+0xae>
     a00:	62 1b       	sub	r22, r18
     a02:	73 0b       	sbc	r23, r19
     a04:	84 0b       	sbc	r24, r20
     a06:	ba 0b       	sbc	r27, r26
     a08:	ee 1f       	adc	r30, r30
     a0a:	88 f7       	brcc	.-30     	; 0x9ee <__divsf3_pse+0x94>
     a0c:	e0 95       	com	r30
     a0e:	08 95       	ret

00000a10 <__fixsfsi>:
     a10:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__fixunssfsi>
     a14:	68 94       	set
     a16:	b1 11       	cpse	r27, r1
     a18:	0c 94 c6 05 	jmp	0xb8c	; 0xb8c <__fp_szero>
     a1c:	08 95       	ret

00000a1e <__fixunssfsi>:
     a1e:	0e 94 ab 05 	call	0xb56	; 0xb56 <__fp_splitA>
     a22:	88 f0       	brcs	.+34     	; 0xa46 <__fixunssfsi+0x28>
     a24:	9f 57       	subi	r25, 0x7F	; 127
     a26:	98 f0       	brcs	.+38     	; 0xa4e <__fixunssfsi+0x30>
     a28:	b9 2f       	mov	r27, r25
     a2a:	99 27       	eor	r25, r25
     a2c:	b7 51       	subi	r27, 0x17	; 23
     a2e:	b0 f0       	brcs	.+44     	; 0xa5c <__fixunssfsi+0x3e>
     a30:	e1 f0       	breq	.+56     	; 0xa6a <__fixunssfsi+0x4c>
     a32:	66 0f       	add	r22, r22
     a34:	77 1f       	adc	r23, r23
     a36:	88 1f       	adc	r24, r24
     a38:	99 1f       	adc	r25, r25
     a3a:	1a f0       	brmi	.+6      	; 0xa42 <__fixunssfsi+0x24>
     a3c:	ba 95       	dec	r27
     a3e:	c9 f7       	brne	.-14     	; 0xa32 <__fixunssfsi+0x14>
     a40:	14 c0       	rjmp	.+40     	; 0xa6a <__fixunssfsi+0x4c>
     a42:	b1 30       	cpi	r27, 0x01	; 1
     a44:	91 f0       	breq	.+36     	; 0xa6a <__fixunssfsi+0x4c>
     a46:	0e 94 c5 05 	call	0xb8a	; 0xb8a <__fp_zero>
     a4a:	b1 e0       	ldi	r27, 0x01	; 1
     a4c:	08 95       	ret
     a4e:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__fp_zero>
     a52:	67 2f       	mov	r22, r23
     a54:	78 2f       	mov	r23, r24
     a56:	88 27       	eor	r24, r24
     a58:	b8 5f       	subi	r27, 0xF8	; 248
     a5a:	39 f0       	breq	.+14     	; 0xa6a <__fixunssfsi+0x4c>
     a5c:	b9 3f       	cpi	r27, 0xF9	; 249
     a5e:	cc f3       	brlt	.-14     	; 0xa52 <__fixunssfsi+0x34>
     a60:	86 95       	lsr	r24
     a62:	77 95       	ror	r23
     a64:	67 95       	ror	r22
     a66:	b3 95       	inc	r27
     a68:	d9 f7       	brne	.-10     	; 0xa60 <__fixunssfsi+0x42>
     a6a:	3e f4       	brtc	.+14     	; 0xa7a <__fixunssfsi+0x5c>
     a6c:	90 95       	com	r25
     a6e:	80 95       	com	r24
     a70:	70 95       	com	r23
     a72:	61 95       	neg	r22
     a74:	7f 4f       	sbci	r23, 0xFF	; 255
     a76:	8f 4f       	sbci	r24, 0xFF	; 255
     a78:	9f 4f       	sbci	r25, 0xFF	; 255
     a7a:	08 95       	ret

00000a7c <__floatunsisf>:
     a7c:	e8 94       	clt
     a7e:	09 c0       	rjmp	.+18     	; 0xa92 <__floatsisf+0x12>

00000a80 <__floatsisf>:
     a80:	97 fb       	bst	r25, 7
     a82:	3e f4       	brtc	.+14     	; 0xa92 <__floatsisf+0x12>
     a84:	90 95       	com	r25
     a86:	80 95       	com	r24
     a88:	70 95       	com	r23
     a8a:	61 95       	neg	r22
     a8c:	7f 4f       	sbci	r23, 0xFF	; 255
     a8e:	8f 4f       	sbci	r24, 0xFF	; 255
     a90:	9f 4f       	sbci	r25, 0xFF	; 255
     a92:	99 23       	and	r25, r25
     a94:	a9 f0       	breq	.+42     	; 0xac0 <__floatsisf+0x40>
     a96:	f9 2f       	mov	r31, r25
     a98:	96 e9       	ldi	r25, 0x96	; 150
     a9a:	bb 27       	eor	r27, r27
     a9c:	93 95       	inc	r25
     a9e:	f6 95       	lsr	r31
     aa0:	87 95       	ror	r24
     aa2:	77 95       	ror	r23
     aa4:	67 95       	ror	r22
     aa6:	b7 95       	ror	r27
     aa8:	f1 11       	cpse	r31, r1
     aaa:	f8 cf       	rjmp	.-16     	; 0xa9c <__floatsisf+0x1c>
     aac:	fa f4       	brpl	.+62     	; 0xaec <__floatsisf+0x6c>
     aae:	bb 0f       	add	r27, r27
     ab0:	11 f4       	brne	.+4      	; 0xab6 <__floatsisf+0x36>
     ab2:	60 ff       	sbrs	r22, 0
     ab4:	1b c0       	rjmp	.+54     	; 0xaec <__floatsisf+0x6c>
     ab6:	6f 5f       	subi	r22, 0xFF	; 255
     ab8:	7f 4f       	sbci	r23, 0xFF	; 255
     aba:	8f 4f       	sbci	r24, 0xFF	; 255
     abc:	9f 4f       	sbci	r25, 0xFF	; 255
     abe:	16 c0       	rjmp	.+44     	; 0xaec <__floatsisf+0x6c>
     ac0:	88 23       	and	r24, r24
     ac2:	11 f0       	breq	.+4      	; 0xac8 <__floatsisf+0x48>
     ac4:	96 e9       	ldi	r25, 0x96	; 150
     ac6:	11 c0       	rjmp	.+34     	; 0xaea <__floatsisf+0x6a>
     ac8:	77 23       	and	r23, r23
     aca:	21 f0       	breq	.+8      	; 0xad4 <__floatsisf+0x54>
     acc:	9e e8       	ldi	r25, 0x8E	; 142
     ace:	87 2f       	mov	r24, r23
     ad0:	76 2f       	mov	r23, r22
     ad2:	05 c0       	rjmp	.+10     	; 0xade <__floatsisf+0x5e>
     ad4:	66 23       	and	r22, r22
     ad6:	71 f0       	breq	.+28     	; 0xaf4 <__floatsisf+0x74>
     ad8:	96 e8       	ldi	r25, 0x86	; 134
     ada:	86 2f       	mov	r24, r22
     adc:	70 e0       	ldi	r23, 0x00	; 0
     ade:	60 e0       	ldi	r22, 0x00	; 0
     ae0:	2a f0       	brmi	.+10     	; 0xaec <__floatsisf+0x6c>
     ae2:	9a 95       	dec	r25
     ae4:	66 0f       	add	r22, r22
     ae6:	77 1f       	adc	r23, r23
     ae8:	88 1f       	adc	r24, r24
     aea:	da f7       	brpl	.-10     	; 0xae2 <__floatsisf+0x62>
     aec:	88 0f       	add	r24, r24
     aee:	96 95       	lsr	r25
     af0:	87 95       	ror	r24
     af2:	97 f9       	bld	r25, 7
     af4:	08 95       	ret

00000af6 <__fp_inf>:
     af6:	97 f9       	bld	r25, 7
     af8:	9f 67       	ori	r25, 0x7F	; 127
     afa:	80 e8       	ldi	r24, 0x80	; 128
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	60 e0       	ldi	r22, 0x00	; 0
     b00:	08 95       	ret

00000b02 <__fp_nan>:
     b02:	9f ef       	ldi	r25, 0xFF	; 255
     b04:	80 ec       	ldi	r24, 0xC0	; 192
     b06:	08 95       	ret

00000b08 <__fp_pscA>:
     b08:	00 24       	eor	r0, r0
     b0a:	0a 94       	dec	r0
     b0c:	16 16       	cp	r1, r22
     b0e:	17 06       	cpc	r1, r23
     b10:	18 06       	cpc	r1, r24
     b12:	09 06       	cpc	r0, r25
     b14:	08 95       	ret

00000b16 <__fp_pscB>:
     b16:	00 24       	eor	r0, r0
     b18:	0a 94       	dec	r0
     b1a:	12 16       	cp	r1, r18
     b1c:	13 06       	cpc	r1, r19
     b1e:	14 06       	cpc	r1, r20
     b20:	05 06       	cpc	r0, r21
     b22:	08 95       	ret

00000b24 <__fp_round>:
     b24:	09 2e       	mov	r0, r25
     b26:	03 94       	inc	r0
     b28:	00 0c       	add	r0, r0
     b2a:	11 f4       	brne	.+4      	; 0xb30 <__fp_round+0xc>
     b2c:	88 23       	and	r24, r24
     b2e:	52 f0       	brmi	.+20     	; 0xb44 <__fp_round+0x20>
     b30:	bb 0f       	add	r27, r27
     b32:	40 f4       	brcc	.+16     	; 0xb44 <__fp_round+0x20>
     b34:	bf 2b       	or	r27, r31
     b36:	11 f4       	brne	.+4      	; 0xb3c <__fp_round+0x18>
     b38:	60 ff       	sbrs	r22, 0
     b3a:	04 c0       	rjmp	.+8      	; 0xb44 <__fp_round+0x20>
     b3c:	6f 5f       	subi	r22, 0xFF	; 255
     b3e:	7f 4f       	sbci	r23, 0xFF	; 255
     b40:	8f 4f       	sbci	r24, 0xFF	; 255
     b42:	9f 4f       	sbci	r25, 0xFF	; 255
     b44:	08 95       	ret

00000b46 <__fp_split3>:
     b46:	57 fd       	sbrc	r21, 7
     b48:	90 58       	subi	r25, 0x80	; 128
     b4a:	44 0f       	add	r20, r20
     b4c:	55 1f       	adc	r21, r21
     b4e:	59 f0       	breq	.+22     	; 0xb66 <__fp_splitA+0x10>
     b50:	5f 3f       	cpi	r21, 0xFF	; 255
     b52:	71 f0       	breq	.+28     	; 0xb70 <__fp_splitA+0x1a>
     b54:	47 95       	ror	r20

00000b56 <__fp_splitA>:
     b56:	88 0f       	add	r24, r24
     b58:	97 fb       	bst	r25, 7
     b5a:	99 1f       	adc	r25, r25
     b5c:	61 f0       	breq	.+24     	; 0xb76 <__fp_splitA+0x20>
     b5e:	9f 3f       	cpi	r25, 0xFF	; 255
     b60:	79 f0       	breq	.+30     	; 0xb80 <__fp_splitA+0x2a>
     b62:	87 95       	ror	r24
     b64:	08 95       	ret
     b66:	12 16       	cp	r1, r18
     b68:	13 06       	cpc	r1, r19
     b6a:	14 06       	cpc	r1, r20
     b6c:	55 1f       	adc	r21, r21
     b6e:	f2 cf       	rjmp	.-28     	; 0xb54 <__fp_split3+0xe>
     b70:	46 95       	lsr	r20
     b72:	f1 df       	rcall	.-30     	; 0xb56 <__fp_splitA>
     b74:	08 c0       	rjmp	.+16     	; 0xb86 <__fp_splitA+0x30>
     b76:	16 16       	cp	r1, r22
     b78:	17 06       	cpc	r1, r23
     b7a:	18 06       	cpc	r1, r24
     b7c:	99 1f       	adc	r25, r25
     b7e:	f1 cf       	rjmp	.-30     	; 0xb62 <__fp_splitA+0xc>
     b80:	86 95       	lsr	r24
     b82:	71 05       	cpc	r23, r1
     b84:	61 05       	cpc	r22, r1
     b86:	08 94       	sec
     b88:	08 95       	ret

00000b8a <__fp_zero>:
     b8a:	e8 94       	clt

00000b8c <__fp_szero>:
     b8c:	bb 27       	eor	r27, r27
     b8e:	66 27       	eor	r22, r22
     b90:	77 27       	eor	r23, r23
     b92:	cb 01       	movw	r24, r22
     b94:	97 f9       	bld	r25, 7
     b96:	08 95       	ret

00000b98 <__gesf2>:
     b98:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__fp_cmp>
     b9c:	08 f4       	brcc	.+2      	; 0xba0 <__gesf2+0x8>
     b9e:	8f ef       	ldi	r24, 0xFF	; 255
     ba0:	08 95       	ret
     ba2:	16 f0       	brts	.+4      	; 0xba8 <__gesf2+0x10>
     ba4:	0c 94 b2 06 	jmp	0xd64	; 0xd64 <__fp_mpack>
     ba8:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__fp_nan>
     bac:	68 94       	set
     bae:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__fp_inf>

00000bb2 <log>:
     bb2:	0e 94 ab 05 	call	0xb56	; 0xb56 <__fp_splitA>
     bb6:	a8 f3       	brcs	.-22     	; 0xba2 <__gesf2+0xa>
     bb8:	99 23       	and	r25, r25
     bba:	c1 f3       	breq	.-16     	; 0xbac <__gesf2+0x14>
     bbc:	ae f3       	brts	.-22     	; 0xba8 <__gesf2+0x10>
     bbe:	df 93       	push	r29
     bc0:	cf 93       	push	r28
     bc2:	1f 93       	push	r17
     bc4:	0f 93       	push	r16
     bc6:	ff 92       	push	r15
     bc8:	c9 2f       	mov	r28, r25
     bca:	dd 27       	eor	r29, r29
     bcc:	88 23       	and	r24, r24
     bce:	2a f0       	brmi	.+10     	; 0xbda <log+0x28>
     bd0:	21 97       	sbiw	r28, 0x01	; 1
     bd2:	66 0f       	add	r22, r22
     bd4:	77 1f       	adc	r23, r23
     bd6:	88 1f       	adc	r24, r24
     bd8:	da f7       	brpl	.-10     	; 0xbd0 <log+0x1e>
     bda:	20 e0       	ldi	r18, 0x00	; 0
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	40 e8       	ldi	r20, 0x80	; 128
     be0:	5f eb       	ldi	r21, 0xBF	; 191
     be2:	9f e3       	ldi	r25, 0x3F	; 63
     be4:	88 39       	cpi	r24, 0x98	; 152
     be6:	20 f0       	brcs	.+8      	; 0xbf0 <log+0x3e>
     be8:	80 3e       	cpi	r24, 0xE0	; 224
     bea:	38 f0       	brcs	.+14     	; 0xbfa <log+0x48>
     bec:	21 96       	adiw	r28, 0x01	; 1
     bee:	8f 77       	andi	r24, 0x7F	; 127
     bf0:	0e 94 2a 04 	call	0x854	; 0x854 <__addsf3>
     bf4:	e4 eb       	ldi	r30, 0xB4	; 180
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	04 c0       	rjmp	.+8      	; 0xc02 <log+0x50>
     bfa:	0e 94 2a 04 	call	0x854	; 0x854 <__addsf3>
     bfe:	e1 ee       	ldi	r30, 0xE1	; 225
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	0e 94 c0 06 	call	0xd80	; 0xd80 <__fp_powser>
     c06:	8b 01       	movw	r16, r22
     c08:	be 01       	movw	r22, r28
     c0a:	ec 01       	movw	r28, r24
     c0c:	fb 2e       	mov	r15, r27
     c0e:	6f 57       	subi	r22, 0x7F	; 127
     c10:	71 09       	sbc	r23, r1
     c12:	75 95       	asr	r23
     c14:	77 1f       	adc	r23, r23
     c16:	88 0b       	sbc	r24, r24
     c18:	99 0b       	sbc	r25, r25
     c1a:	0e 94 40 05 	call	0xa80	; 0xa80 <__floatsisf>
     c1e:	28 e1       	ldi	r18, 0x18	; 24
     c20:	32 e7       	ldi	r19, 0x72	; 114
     c22:	41 e3       	ldi	r20, 0x31	; 49
     c24:	5f e3       	ldi	r21, 0x3F	; 63
     c26:	0e 94 34 06 	call	0xc68	; 0xc68 <__mulsf3x>
     c2a:	af 2d       	mov	r26, r15
     c2c:	98 01       	movw	r18, r16
     c2e:	ae 01       	movw	r20, r28
     c30:	ff 90       	pop	r15
     c32:	0f 91       	pop	r16
     c34:	1f 91       	pop	r17
     c36:	cf 91       	pop	r28
     c38:	df 91       	pop	r29
     c3a:	0e 94 41 04 	call	0x882	; 0x882 <__addsf3x>
     c3e:	0c 94 92 05 	jmp	0xb24	; 0xb24 <__fp_round>

00000c42 <__mulsf3>:
     c42:	0e 94 34 06 	call	0xc68	; 0xc68 <__mulsf3x>
     c46:	0c 94 92 05 	jmp	0xb24	; 0xb24 <__fp_round>
     c4a:	0e 94 84 05 	call	0xb08	; 0xb08 <__fp_pscA>
     c4e:	38 f0       	brcs	.+14     	; 0xc5e <__mulsf3+0x1c>
     c50:	0e 94 8b 05 	call	0xb16	; 0xb16 <__fp_pscB>
     c54:	20 f0       	brcs	.+8      	; 0xc5e <__mulsf3+0x1c>
     c56:	95 23       	and	r25, r21
     c58:	11 f0       	breq	.+4      	; 0xc5e <__mulsf3+0x1c>
     c5a:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__fp_inf>
     c5e:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__fp_nan>
     c62:	11 24       	eor	r1, r1
     c64:	0c 94 c6 05 	jmp	0xb8c	; 0xb8c <__fp_szero>

00000c68 <__mulsf3x>:
     c68:	0e 94 a3 05 	call	0xb46	; 0xb46 <__fp_split3>
     c6c:	70 f3       	brcs	.-36     	; 0xc4a <__mulsf3+0x8>

00000c6e <__mulsf3_pse>:
     c6e:	95 9f       	mul	r25, r21
     c70:	c1 f3       	breq	.-16     	; 0xc62 <__mulsf3+0x20>
     c72:	95 0f       	add	r25, r21
     c74:	50 e0       	ldi	r21, 0x00	; 0
     c76:	55 1f       	adc	r21, r21
     c78:	62 9f       	mul	r22, r18
     c7a:	f0 01       	movw	r30, r0
     c7c:	72 9f       	mul	r23, r18
     c7e:	bb 27       	eor	r27, r27
     c80:	f0 0d       	add	r31, r0
     c82:	b1 1d       	adc	r27, r1
     c84:	63 9f       	mul	r22, r19
     c86:	aa 27       	eor	r26, r26
     c88:	f0 0d       	add	r31, r0
     c8a:	b1 1d       	adc	r27, r1
     c8c:	aa 1f       	adc	r26, r26
     c8e:	64 9f       	mul	r22, r20
     c90:	66 27       	eor	r22, r22
     c92:	b0 0d       	add	r27, r0
     c94:	a1 1d       	adc	r26, r1
     c96:	66 1f       	adc	r22, r22
     c98:	82 9f       	mul	r24, r18
     c9a:	22 27       	eor	r18, r18
     c9c:	b0 0d       	add	r27, r0
     c9e:	a1 1d       	adc	r26, r1
     ca0:	62 1f       	adc	r22, r18
     ca2:	73 9f       	mul	r23, r19
     ca4:	b0 0d       	add	r27, r0
     ca6:	a1 1d       	adc	r26, r1
     ca8:	62 1f       	adc	r22, r18
     caa:	83 9f       	mul	r24, r19
     cac:	a0 0d       	add	r26, r0
     cae:	61 1d       	adc	r22, r1
     cb0:	22 1f       	adc	r18, r18
     cb2:	74 9f       	mul	r23, r20
     cb4:	33 27       	eor	r19, r19
     cb6:	a0 0d       	add	r26, r0
     cb8:	61 1d       	adc	r22, r1
     cba:	23 1f       	adc	r18, r19
     cbc:	84 9f       	mul	r24, r20
     cbe:	60 0d       	add	r22, r0
     cc0:	21 1d       	adc	r18, r1
     cc2:	82 2f       	mov	r24, r18
     cc4:	76 2f       	mov	r23, r22
     cc6:	6a 2f       	mov	r22, r26
     cc8:	11 24       	eor	r1, r1
     cca:	9f 57       	subi	r25, 0x7F	; 127
     ccc:	50 40       	sbci	r21, 0x00	; 0
     cce:	9a f0       	brmi	.+38     	; 0xcf6 <__mulsf3_pse+0x88>
     cd0:	f1 f0       	breq	.+60     	; 0xd0e <__mulsf3_pse+0xa0>
     cd2:	88 23       	and	r24, r24
     cd4:	4a f0       	brmi	.+18     	; 0xce8 <__mulsf3_pse+0x7a>
     cd6:	ee 0f       	add	r30, r30
     cd8:	ff 1f       	adc	r31, r31
     cda:	bb 1f       	adc	r27, r27
     cdc:	66 1f       	adc	r22, r22
     cde:	77 1f       	adc	r23, r23
     ce0:	88 1f       	adc	r24, r24
     ce2:	91 50       	subi	r25, 0x01	; 1
     ce4:	50 40       	sbci	r21, 0x00	; 0
     ce6:	a9 f7       	brne	.-22     	; 0xcd2 <__mulsf3_pse+0x64>
     ce8:	9e 3f       	cpi	r25, 0xFE	; 254
     cea:	51 05       	cpc	r21, r1
     cec:	80 f0       	brcs	.+32     	; 0xd0e <__mulsf3_pse+0xa0>
     cee:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__fp_inf>
     cf2:	0c 94 c6 05 	jmp	0xb8c	; 0xb8c <__fp_szero>
     cf6:	5f 3f       	cpi	r21, 0xFF	; 255
     cf8:	e4 f3       	brlt	.-8      	; 0xcf2 <__mulsf3_pse+0x84>
     cfa:	98 3e       	cpi	r25, 0xE8	; 232
     cfc:	d4 f3       	brlt	.-12     	; 0xcf2 <__mulsf3_pse+0x84>
     cfe:	86 95       	lsr	r24
     d00:	77 95       	ror	r23
     d02:	67 95       	ror	r22
     d04:	b7 95       	ror	r27
     d06:	f7 95       	ror	r31
     d08:	e7 95       	ror	r30
     d0a:	9f 5f       	subi	r25, 0xFF	; 255
     d0c:	c1 f7       	brne	.-16     	; 0xcfe <__mulsf3_pse+0x90>
     d0e:	fe 2b       	or	r31, r30
     d10:	88 0f       	add	r24, r24
     d12:	91 1d       	adc	r25, r1
     d14:	96 95       	lsr	r25
     d16:	87 95       	ror	r24
     d18:	97 f9       	bld	r25, 7
     d1a:	08 95       	ret

00000d1c <__fp_cmp>:
     d1c:	99 0f       	add	r25, r25
     d1e:	00 08       	sbc	r0, r0
     d20:	55 0f       	add	r21, r21
     d22:	aa 0b       	sbc	r26, r26
     d24:	e0 e8       	ldi	r30, 0x80	; 128
     d26:	fe ef       	ldi	r31, 0xFE	; 254
     d28:	16 16       	cp	r1, r22
     d2a:	17 06       	cpc	r1, r23
     d2c:	e8 07       	cpc	r30, r24
     d2e:	f9 07       	cpc	r31, r25
     d30:	c0 f0       	brcs	.+48     	; 0xd62 <__fp_cmp+0x46>
     d32:	12 16       	cp	r1, r18
     d34:	13 06       	cpc	r1, r19
     d36:	e4 07       	cpc	r30, r20
     d38:	f5 07       	cpc	r31, r21
     d3a:	98 f0       	brcs	.+38     	; 0xd62 <__fp_cmp+0x46>
     d3c:	62 1b       	sub	r22, r18
     d3e:	73 0b       	sbc	r23, r19
     d40:	84 0b       	sbc	r24, r20
     d42:	95 0b       	sbc	r25, r21
     d44:	39 f4       	brne	.+14     	; 0xd54 <__fp_cmp+0x38>
     d46:	0a 26       	eor	r0, r26
     d48:	61 f0       	breq	.+24     	; 0xd62 <__fp_cmp+0x46>
     d4a:	23 2b       	or	r18, r19
     d4c:	24 2b       	or	r18, r20
     d4e:	25 2b       	or	r18, r21
     d50:	21 f4       	brne	.+8      	; 0xd5a <__fp_cmp+0x3e>
     d52:	08 95       	ret
     d54:	0a 26       	eor	r0, r26
     d56:	09 f4       	brne	.+2      	; 0xd5a <__fp_cmp+0x3e>
     d58:	a1 40       	sbci	r26, 0x01	; 1
     d5a:	a6 95       	lsr	r26
     d5c:	8f ef       	ldi	r24, 0xFF	; 255
     d5e:	81 1d       	adc	r24, r1
     d60:	81 1d       	adc	r24, r1
     d62:	08 95       	ret

00000d64 <__fp_mpack>:
     d64:	9f 3f       	cpi	r25, 0xFF	; 255
     d66:	31 f0       	breq	.+12     	; 0xd74 <__fp_mpack_finite+0xc>

00000d68 <__fp_mpack_finite>:
     d68:	91 50       	subi	r25, 0x01	; 1
     d6a:	20 f4       	brcc	.+8      	; 0xd74 <__fp_mpack_finite+0xc>
     d6c:	87 95       	ror	r24
     d6e:	77 95       	ror	r23
     d70:	67 95       	ror	r22
     d72:	b7 95       	ror	r27
     d74:	88 0f       	add	r24, r24
     d76:	91 1d       	adc	r25, r1
     d78:	96 95       	lsr	r25
     d7a:	87 95       	ror	r24
     d7c:	97 f9       	bld	r25, 7
     d7e:	08 95       	ret

00000d80 <__fp_powser>:
     d80:	df 93       	push	r29
     d82:	cf 93       	push	r28
     d84:	1f 93       	push	r17
     d86:	0f 93       	push	r16
     d88:	ff 92       	push	r15
     d8a:	ef 92       	push	r14
     d8c:	df 92       	push	r13
     d8e:	7b 01       	movw	r14, r22
     d90:	8c 01       	movw	r16, r24
     d92:	68 94       	set
     d94:	06 c0       	rjmp	.+12     	; 0xda2 <__fp_powser+0x22>
     d96:	da 2e       	mov	r13, r26
     d98:	ef 01       	movw	r28, r30
     d9a:	0e 94 34 06 	call	0xc68	; 0xc68 <__mulsf3x>
     d9e:	fe 01       	movw	r30, r28
     da0:	e8 94       	clt
     da2:	a5 91       	lpm	r26, Z+
     da4:	25 91       	lpm	r18, Z+
     da6:	35 91       	lpm	r19, Z+
     da8:	45 91       	lpm	r20, Z+
     daa:	55 91       	lpm	r21, Z+
     dac:	a6 f3       	brts	.-24     	; 0xd96 <__fp_powser+0x16>
     dae:	ef 01       	movw	r28, r30
     db0:	0e 94 41 04 	call	0x882	; 0x882 <__addsf3x>
     db4:	fe 01       	movw	r30, r28
     db6:	97 01       	movw	r18, r14
     db8:	a8 01       	movw	r20, r16
     dba:	da 94       	dec	r13
     dbc:	69 f7       	brne	.-38     	; 0xd98 <__fp_powser+0x18>
     dbe:	df 90       	pop	r13
     dc0:	ef 90       	pop	r14
     dc2:	ff 90       	pop	r15
     dc4:	0f 91       	pop	r16
     dc6:	1f 91       	pop	r17
     dc8:	cf 91       	pop	r28
     dca:	df 91       	pop	r29
     dcc:	08 95       	ret

00000dce <__divmodhi4>:
     dce:	97 fb       	bst	r25, 7
     dd0:	07 2e       	mov	r0, r23
     dd2:	16 f4       	brtc	.+4      	; 0xdd8 <__divmodhi4+0xa>
     dd4:	00 94       	com	r0
     dd6:	07 d0       	rcall	.+14     	; 0xde6 <__divmodhi4_neg1>
     dd8:	77 fd       	sbrc	r23, 7
     dda:	09 d0       	rcall	.+18     	; 0xdee <__divmodhi4_neg2>
     ddc:	0e 94 1a 07 	call	0xe34	; 0xe34 <__udivmodhi4>
     de0:	07 fc       	sbrc	r0, 7
     de2:	05 d0       	rcall	.+10     	; 0xdee <__divmodhi4_neg2>
     de4:	3e f4       	brtc	.+14     	; 0xdf4 <__divmodhi4_exit>

00000de6 <__divmodhi4_neg1>:
     de6:	90 95       	com	r25
     de8:	81 95       	neg	r24
     dea:	9f 4f       	sbci	r25, 0xFF	; 255
     dec:	08 95       	ret

00000dee <__divmodhi4_neg2>:
     dee:	70 95       	com	r23
     df0:	61 95       	neg	r22
     df2:	7f 4f       	sbci	r23, 0xFF	; 255

00000df4 <__divmodhi4_exit>:
     df4:	08 95       	ret

00000df6 <__divmodsi4>:
     df6:	05 2e       	mov	r0, r21
     df8:	97 fb       	bst	r25, 7
     dfa:	1e f4       	brtc	.+6      	; 0xe02 <__divmodsi4+0xc>
     dfc:	00 94       	com	r0
     dfe:	0e 94 12 07 	call	0xe24	; 0xe24 <__negsi2>
     e02:	57 fd       	sbrc	r21, 7
     e04:	07 d0       	rcall	.+14     	; 0xe14 <__divmodsi4_neg2>
     e06:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__udivmodsi4>
     e0a:	07 fc       	sbrc	r0, 7
     e0c:	03 d0       	rcall	.+6      	; 0xe14 <__divmodsi4_neg2>
     e0e:	4e f4       	brtc	.+18     	; 0xe22 <__divmodsi4_exit>
     e10:	0c 94 12 07 	jmp	0xe24	; 0xe24 <__negsi2>

00000e14 <__divmodsi4_neg2>:
     e14:	50 95       	com	r21
     e16:	40 95       	com	r20
     e18:	30 95       	com	r19
     e1a:	21 95       	neg	r18
     e1c:	3f 4f       	sbci	r19, 0xFF	; 255
     e1e:	4f 4f       	sbci	r20, 0xFF	; 255
     e20:	5f 4f       	sbci	r21, 0xFF	; 255

00000e22 <__divmodsi4_exit>:
     e22:	08 95       	ret

00000e24 <__negsi2>:
     e24:	90 95       	com	r25
     e26:	80 95       	com	r24
     e28:	70 95       	com	r23
     e2a:	61 95       	neg	r22
     e2c:	7f 4f       	sbci	r23, 0xFF	; 255
     e2e:	8f 4f       	sbci	r24, 0xFF	; 255
     e30:	9f 4f       	sbci	r25, 0xFF	; 255
     e32:	08 95       	ret

00000e34 <__udivmodhi4>:
     e34:	aa 1b       	sub	r26, r26
     e36:	bb 1b       	sub	r27, r27
     e38:	51 e1       	ldi	r21, 0x11	; 17
     e3a:	07 c0       	rjmp	.+14     	; 0xe4a <__udivmodhi4_ep>

00000e3c <__udivmodhi4_loop>:
     e3c:	aa 1f       	adc	r26, r26
     e3e:	bb 1f       	adc	r27, r27
     e40:	a6 17       	cp	r26, r22
     e42:	b7 07       	cpc	r27, r23
     e44:	10 f0       	brcs	.+4      	; 0xe4a <__udivmodhi4_ep>
     e46:	a6 1b       	sub	r26, r22
     e48:	b7 0b       	sbc	r27, r23

00000e4a <__udivmodhi4_ep>:
     e4a:	88 1f       	adc	r24, r24
     e4c:	99 1f       	adc	r25, r25
     e4e:	5a 95       	dec	r21
     e50:	a9 f7       	brne	.-22     	; 0xe3c <__udivmodhi4_loop>
     e52:	80 95       	com	r24
     e54:	90 95       	com	r25
     e56:	bc 01       	movw	r22, r24
     e58:	cd 01       	movw	r24, r26
     e5a:	08 95       	ret

00000e5c <__udivmodsi4>:
     e5c:	a1 e2       	ldi	r26, 0x21	; 33
     e5e:	1a 2e       	mov	r1, r26
     e60:	aa 1b       	sub	r26, r26
     e62:	bb 1b       	sub	r27, r27
     e64:	fd 01       	movw	r30, r26
     e66:	0d c0       	rjmp	.+26     	; 0xe82 <__udivmodsi4_ep>

00000e68 <__udivmodsi4_loop>:
     e68:	aa 1f       	adc	r26, r26
     e6a:	bb 1f       	adc	r27, r27
     e6c:	ee 1f       	adc	r30, r30
     e6e:	ff 1f       	adc	r31, r31
     e70:	a2 17       	cp	r26, r18
     e72:	b3 07       	cpc	r27, r19
     e74:	e4 07       	cpc	r30, r20
     e76:	f5 07       	cpc	r31, r21
     e78:	20 f0       	brcs	.+8      	; 0xe82 <__udivmodsi4_ep>
     e7a:	a2 1b       	sub	r26, r18
     e7c:	b3 0b       	sbc	r27, r19
     e7e:	e4 0b       	sbc	r30, r20
     e80:	f5 0b       	sbc	r31, r21

00000e82 <__udivmodsi4_ep>:
     e82:	66 1f       	adc	r22, r22
     e84:	77 1f       	adc	r23, r23
     e86:	88 1f       	adc	r24, r24
     e88:	99 1f       	adc	r25, r25
     e8a:	1a 94       	dec	r1
     e8c:	69 f7       	brne	.-38     	; 0xe68 <__udivmodsi4_loop>
     e8e:	60 95       	com	r22
     e90:	70 95       	com	r23
     e92:	80 95       	com	r24
     e94:	90 95       	com	r25
     e96:	9b 01       	movw	r18, r22
     e98:	ac 01       	movw	r20, r24
     e9a:	bd 01       	movw	r22, r26
     e9c:	cf 01       	movw	r24, r30
     e9e:	08 95       	ret

00000ea0 <sprintf>:
     ea0:	ae e0       	ldi	r26, 0x0E	; 14
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	e6 e5       	ldi	r30, 0x56	; 86
     ea6:	f7 e0       	ldi	r31, 0x07	; 7
     ea8:	0c 94 11 0a 	jmp	0x1422	; 0x1422 <__prologue_saves__+0x1c>
     eac:	0d 89       	ldd	r16, Y+21	; 0x15
     eae:	1e 89       	ldd	r17, Y+22	; 0x16
     eb0:	86 e0       	ldi	r24, 0x06	; 6
     eb2:	8c 83       	std	Y+4, r24	; 0x04
     eb4:	1a 83       	std	Y+2, r17	; 0x02
     eb6:	09 83       	std	Y+1, r16	; 0x01
     eb8:	8f ef       	ldi	r24, 0xFF	; 255
     eba:	9f e7       	ldi	r25, 0x7F	; 127
     ebc:	9e 83       	std	Y+6, r25	; 0x06
     ebe:	8d 83       	std	Y+5, r24	; 0x05
     ec0:	ae 01       	movw	r20, r28
     ec2:	47 5e       	subi	r20, 0xE7	; 231
     ec4:	5f 4f       	sbci	r21, 0xFF	; 255
     ec6:	6f 89       	ldd	r22, Y+23	; 0x17
     ec8:	78 8d       	ldd	r23, Y+24	; 0x18
     eca:	ce 01       	movw	r24, r28
     ecc:	01 96       	adiw	r24, 0x01	; 1
     ece:	0e 94 72 07 	call	0xee4	; 0xee4 <vfprintf>
     ed2:	ef 81       	ldd	r30, Y+7	; 0x07
     ed4:	f8 85       	ldd	r31, Y+8	; 0x08
     ed6:	e0 0f       	add	r30, r16
     ed8:	f1 1f       	adc	r31, r17
     eda:	10 82       	st	Z, r1
     edc:	2e 96       	adiw	r28, 0x0e	; 14
     ede:	e4 e0       	ldi	r30, 0x04	; 4
     ee0:	0c 94 2d 0a 	jmp	0x145a	; 0x145a <__epilogue_restores__+0x1c>

00000ee4 <vfprintf>:
     ee4:	ab e0       	ldi	r26, 0x0B	; 11
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e8 e7       	ldi	r30, 0x78	; 120
     eea:	f7 e0       	ldi	r31, 0x07	; 7
     eec:	0c 94 03 0a 	jmp	0x1406	; 0x1406 <__prologue_saves__>
     ef0:	6c 01       	movw	r12, r24
     ef2:	7b 01       	movw	r14, r22
     ef4:	8a 01       	movw	r16, r20
     ef6:	fc 01       	movw	r30, r24
     ef8:	17 82       	std	Z+7, r1	; 0x07
     efa:	16 82       	std	Z+6, r1	; 0x06
     efc:	83 81       	ldd	r24, Z+3	; 0x03
     efe:	81 ff       	sbrs	r24, 1
     f00:	cc c1       	rjmp	.+920    	; 0x129a <vfprintf+0x3b6>
     f02:	ce 01       	movw	r24, r28
     f04:	01 96       	adiw	r24, 0x01	; 1
     f06:	3c 01       	movw	r6, r24
     f08:	f6 01       	movw	r30, r12
     f0a:	93 81       	ldd	r25, Z+3	; 0x03
     f0c:	f7 01       	movw	r30, r14
     f0e:	93 fd       	sbrc	r25, 3
     f10:	85 91       	lpm	r24, Z+
     f12:	93 ff       	sbrs	r25, 3
     f14:	81 91       	ld	r24, Z+
     f16:	7f 01       	movw	r14, r30
     f18:	88 23       	and	r24, r24
     f1a:	09 f4       	brne	.+2      	; 0xf1e <vfprintf+0x3a>
     f1c:	ba c1       	rjmp	.+884    	; 0x1292 <vfprintf+0x3ae>
     f1e:	85 32       	cpi	r24, 0x25	; 37
     f20:	39 f4       	brne	.+14     	; 0xf30 <vfprintf+0x4c>
     f22:	93 fd       	sbrc	r25, 3
     f24:	85 91       	lpm	r24, Z+
     f26:	93 ff       	sbrs	r25, 3
     f28:	81 91       	ld	r24, Z+
     f2a:	7f 01       	movw	r14, r30
     f2c:	85 32       	cpi	r24, 0x25	; 37
     f2e:	29 f4       	brne	.+10     	; 0xf3a <vfprintf+0x56>
     f30:	b6 01       	movw	r22, r12
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	0e 94 69 09 	call	0x12d2	; 0x12d2 <fputc>
     f38:	e7 cf       	rjmp	.-50     	; 0xf08 <vfprintf+0x24>
     f3a:	91 2c       	mov	r9, r1
     f3c:	21 2c       	mov	r2, r1
     f3e:	31 2c       	mov	r3, r1
     f40:	ff e1       	ldi	r31, 0x1F	; 31
     f42:	f3 15       	cp	r31, r3
     f44:	d8 f0       	brcs	.+54     	; 0xf7c <vfprintf+0x98>
     f46:	8b 32       	cpi	r24, 0x2B	; 43
     f48:	79 f0       	breq	.+30     	; 0xf68 <vfprintf+0x84>
     f4a:	38 f4       	brcc	.+14     	; 0xf5a <vfprintf+0x76>
     f4c:	80 32       	cpi	r24, 0x20	; 32
     f4e:	79 f0       	breq	.+30     	; 0xf6e <vfprintf+0x8a>
     f50:	83 32       	cpi	r24, 0x23	; 35
     f52:	a1 f4       	brne	.+40     	; 0xf7c <vfprintf+0x98>
     f54:	23 2d       	mov	r18, r3
     f56:	20 61       	ori	r18, 0x10	; 16
     f58:	1d c0       	rjmp	.+58     	; 0xf94 <vfprintf+0xb0>
     f5a:	8d 32       	cpi	r24, 0x2D	; 45
     f5c:	61 f0       	breq	.+24     	; 0xf76 <vfprintf+0x92>
     f5e:	80 33       	cpi	r24, 0x30	; 48
     f60:	69 f4       	brne	.+26     	; 0xf7c <vfprintf+0x98>
     f62:	23 2d       	mov	r18, r3
     f64:	21 60       	ori	r18, 0x01	; 1
     f66:	16 c0       	rjmp	.+44     	; 0xf94 <vfprintf+0xb0>
     f68:	83 2d       	mov	r24, r3
     f6a:	82 60       	ori	r24, 0x02	; 2
     f6c:	38 2e       	mov	r3, r24
     f6e:	e3 2d       	mov	r30, r3
     f70:	e4 60       	ori	r30, 0x04	; 4
     f72:	3e 2e       	mov	r3, r30
     f74:	2a c0       	rjmp	.+84     	; 0xfca <vfprintf+0xe6>
     f76:	f3 2d       	mov	r31, r3
     f78:	f8 60       	ori	r31, 0x08	; 8
     f7a:	1d c0       	rjmp	.+58     	; 0xfb6 <vfprintf+0xd2>
     f7c:	37 fc       	sbrc	r3, 7
     f7e:	2d c0       	rjmp	.+90     	; 0xfda <vfprintf+0xf6>
     f80:	20 ed       	ldi	r18, 0xD0	; 208
     f82:	28 0f       	add	r18, r24
     f84:	2a 30       	cpi	r18, 0x0A	; 10
     f86:	40 f0       	brcs	.+16     	; 0xf98 <vfprintf+0xb4>
     f88:	8e 32       	cpi	r24, 0x2E	; 46
     f8a:	b9 f4       	brne	.+46     	; 0xfba <vfprintf+0xd6>
     f8c:	36 fc       	sbrc	r3, 6
     f8e:	81 c1       	rjmp	.+770    	; 0x1292 <vfprintf+0x3ae>
     f90:	23 2d       	mov	r18, r3
     f92:	20 64       	ori	r18, 0x40	; 64
     f94:	32 2e       	mov	r3, r18
     f96:	19 c0       	rjmp	.+50     	; 0xfca <vfprintf+0xe6>
     f98:	36 fe       	sbrs	r3, 6
     f9a:	06 c0       	rjmp	.+12     	; 0xfa8 <vfprintf+0xc4>
     f9c:	8a e0       	ldi	r24, 0x0A	; 10
     f9e:	98 9e       	mul	r9, r24
     fa0:	20 0d       	add	r18, r0
     fa2:	11 24       	eor	r1, r1
     fa4:	92 2e       	mov	r9, r18
     fa6:	11 c0       	rjmp	.+34     	; 0xfca <vfprintf+0xe6>
     fa8:	ea e0       	ldi	r30, 0x0A	; 10
     faa:	2e 9e       	mul	r2, r30
     fac:	20 0d       	add	r18, r0
     fae:	11 24       	eor	r1, r1
     fb0:	22 2e       	mov	r2, r18
     fb2:	f3 2d       	mov	r31, r3
     fb4:	f0 62       	ori	r31, 0x20	; 32
     fb6:	3f 2e       	mov	r3, r31
     fb8:	08 c0       	rjmp	.+16     	; 0xfca <vfprintf+0xe6>
     fba:	8c 36       	cpi	r24, 0x6C	; 108
     fbc:	21 f4       	brne	.+8      	; 0xfc6 <vfprintf+0xe2>
     fbe:	83 2d       	mov	r24, r3
     fc0:	80 68       	ori	r24, 0x80	; 128
     fc2:	38 2e       	mov	r3, r24
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <vfprintf+0xe6>
     fc6:	88 36       	cpi	r24, 0x68	; 104
     fc8:	41 f4       	brne	.+16     	; 0xfda <vfprintf+0xf6>
     fca:	f7 01       	movw	r30, r14
     fcc:	93 fd       	sbrc	r25, 3
     fce:	85 91       	lpm	r24, Z+
     fd0:	93 ff       	sbrs	r25, 3
     fd2:	81 91       	ld	r24, Z+
     fd4:	7f 01       	movw	r14, r30
     fd6:	81 11       	cpse	r24, r1
     fd8:	b3 cf       	rjmp	.-154    	; 0xf40 <vfprintf+0x5c>
     fda:	98 2f       	mov	r25, r24
     fdc:	9f 7d       	andi	r25, 0xDF	; 223
     fde:	95 54       	subi	r25, 0x45	; 69
     fe0:	93 30       	cpi	r25, 0x03	; 3
     fe2:	28 f4       	brcc	.+10     	; 0xfee <vfprintf+0x10a>
     fe4:	0c 5f       	subi	r16, 0xFC	; 252
     fe6:	1f 4f       	sbci	r17, 0xFF	; 255
     fe8:	9f e3       	ldi	r25, 0x3F	; 63
     fea:	99 83       	std	Y+1, r25	; 0x01
     fec:	0d c0       	rjmp	.+26     	; 0x1008 <vfprintf+0x124>
     fee:	83 36       	cpi	r24, 0x63	; 99
     ff0:	31 f0       	breq	.+12     	; 0xffe <vfprintf+0x11a>
     ff2:	83 37       	cpi	r24, 0x73	; 115
     ff4:	71 f0       	breq	.+28     	; 0x1012 <vfprintf+0x12e>
     ff6:	83 35       	cpi	r24, 0x53	; 83
     ff8:	09 f0       	breq	.+2      	; 0xffc <vfprintf+0x118>
     ffa:	59 c0       	rjmp	.+178    	; 0x10ae <vfprintf+0x1ca>
     ffc:	21 c0       	rjmp	.+66     	; 0x1040 <vfprintf+0x15c>
     ffe:	f8 01       	movw	r30, r16
    1000:	80 81       	ld	r24, Z
    1002:	89 83       	std	Y+1, r24	; 0x01
    1004:	0e 5f       	subi	r16, 0xFE	; 254
    1006:	1f 4f       	sbci	r17, 0xFF	; 255
    1008:	88 24       	eor	r8, r8
    100a:	83 94       	inc	r8
    100c:	91 2c       	mov	r9, r1
    100e:	53 01       	movw	r10, r6
    1010:	13 c0       	rjmp	.+38     	; 0x1038 <vfprintf+0x154>
    1012:	28 01       	movw	r4, r16
    1014:	f2 e0       	ldi	r31, 0x02	; 2
    1016:	4f 0e       	add	r4, r31
    1018:	51 1c       	adc	r5, r1
    101a:	f8 01       	movw	r30, r16
    101c:	a0 80       	ld	r10, Z
    101e:	b1 80       	ldd	r11, Z+1	; 0x01
    1020:	36 fe       	sbrs	r3, 6
    1022:	03 c0       	rjmp	.+6      	; 0x102a <vfprintf+0x146>
    1024:	69 2d       	mov	r22, r9
    1026:	70 e0       	ldi	r23, 0x00	; 0
    1028:	02 c0       	rjmp	.+4      	; 0x102e <vfprintf+0x14a>
    102a:	6f ef       	ldi	r22, 0xFF	; 255
    102c:	7f ef       	ldi	r23, 0xFF	; 255
    102e:	c5 01       	movw	r24, r10
    1030:	0e 94 5e 09 	call	0x12bc	; 0x12bc <strnlen>
    1034:	4c 01       	movw	r8, r24
    1036:	82 01       	movw	r16, r4
    1038:	f3 2d       	mov	r31, r3
    103a:	ff 77       	andi	r31, 0x7F	; 127
    103c:	3f 2e       	mov	r3, r31
    103e:	16 c0       	rjmp	.+44     	; 0x106c <vfprintf+0x188>
    1040:	28 01       	movw	r4, r16
    1042:	22 e0       	ldi	r18, 0x02	; 2
    1044:	42 0e       	add	r4, r18
    1046:	51 1c       	adc	r5, r1
    1048:	f8 01       	movw	r30, r16
    104a:	a0 80       	ld	r10, Z
    104c:	b1 80       	ldd	r11, Z+1	; 0x01
    104e:	36 fe       	sbrs	r3, 6
    1050:	03 c0       	rjmp	.+6      	; 0x1058 <vfprintf+0x174>
    1052:	69 2d       	mov	r22, r9
    1054:	70 e0       	ldi	r23, 0x00	; 0
    1056:	02 c0       	rjmp	.+4      	; 0x105c <vfprintf+0x178>
    1058:	6f ef       	ldi	r22, 0xFF	; 255
    105a:	7f ef       	ldi	r23, 0xFF	; 255
    105c:	c5 01       	movw	r24, r10
    105e:	0e 94 53 09 	call	0x12a6	; 0x12a6 <strnlen_P>
    1062:	4c 01       	movw	r8, r24
    1064:	f3 2d       	mov	r31, r3
    1066:	f0 68       	ori	r31, 0x80	; 128
    1068:	3f 2e       	mov	r3, r31
    106a:	82 01       	movw	r16, r4
    106c:	33 fc       	sbrc	r3, 3
    106e:	1b c0       	rjmp	.+54     	; 0x10a6 <vfprintf+0x1c2>
    1070:	82 2d       	mov	r24, r2
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	88 16       	cp	r8, r24
    1076:	99 06       	cpc	r9, r25
    1078:	b0 f4       	brcc	.+44     	; 0x10a6 <vfprintf+0x1c2>
    107a:	b6 01       	movw	r22, r12
    107c:	80 e2       	ldi	r24, 0x20	; 32
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	0e 94 69 09 	call	0x12d2	; 0x12d2 <fputc>
    1084:	2a 94       	dec	r2
    1086:	f4 cf       	rjmp	.-24     	; 0x1070 <vfprintf+0x18c>
    1088:	f5 01       	movw	r30, r10
    108a:	37 fc       	sbrc	r3, 7
    108c:	85 91       	lpm	r24, Z+
    108e:	37 fe       	sbrs	r3, 7
    1090:	81 91       	ld	r24, Z+
    1092:	5f 01       	movw	r10, r30
    1094:	b6 01       	movw	r22, r12
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	0e 94 69 09 	call	0x12d2	; 0x12d2 <fputc>
    109c:	21 10       	cpse	r2, r1
    109e:	2a 94       	dec	r2
    10a0:	21 e0       	ldi	r18, 0x01	; 1
    10a2:	82 1a       	sub	r8, r18
    10a4:	91 08       	sbc	r9, r1
    10a6:	81 14       	cp	r8, r1
    10a8:	91 04       	cpc	r9, r1
    10aa:	71 f7       	brne	.-36     	; 0x1088 <vfprintf+0x1a4>
    10ac:	e8 c0       	rjmp	.+464    	; 0x127e <vfprintf+0x39a>
    10ae:	84 36       	cpi	r24, 0x64	; 100
    10b0:	11 f0       	breq	.+4      	; 0x10b6 <vfprintf+0x1d2>
    10b2:	89 36       	cpi	r24, 0x69	; 105
    10b4:	41 f5       	brne	.+80     	; 0x1106 <vfprintf+0x222>
    10b6:	f8 01       	movw	r30, r16
    10b8:	37 fe       	sbrs	r3, 7
    10ba:	07 c0       	rjmp	.+14     	; 0x10ca <vfprintf+0x1e6>
    10bc:	60 81       	ld	r22, Z
    10be:	71 81       	ldd	r23, Z+1	; 0x01
    10c0:	82 81       	ldd	r24, Z+2	; 0x02
    10c2:	93 81       	ldd	r25, Z+3	; 0x03
    10c4:	0c 5f       	subi	r16, 0xFC	; 252
    10c6:	1f 4f       	sbci	r17, 0xFF	; 255
    10c8:	08 c0       	rjmp	.+16     	; 0x10da <vfprintf+0x1f6>
    10ca:	60 81       	ld	r22, Z
    10cc:	71 81       	ldd	r23, Z+1	; 0x01
    10ce:	07 2e       	mov	r0, r23
    10d0:	00 0c       	add	r0, r0
    10d2:	88 0b       	sbc	r24, r24
    10d4:	99 0b       	sbc	r25, r25
    10d6:	0e 5f       	subi	r16, 0xFE	; 254
    10d8:	1f 4f       	sbci	r17, 0xFF	; 255
    10da:	f3 2d       	mov	r31, r3
    10dc:	ff 76       	andi	r31, 0x6F	; 111
    10de:	3f 2e       	mov	r3, r31
    10e0:	97 ff       	sbrs	r25, 7
    10e2:	09 c0       	rjmp	.+18     	; 0x10f6 <vfprintf+0x212>
    10e4:	90 95       	com	r25
    10e6:	80 95       	com	r24
    10e8:	70 95       	com	r23
    10ea:	61 95       	neg	r22
    10ec:	7f 4f       	sbci	r23, 0xFF	; 255
    10ee:	8f 4f       	sbci	r24, 0xFF	; 255
    10f0:	9f 4f       	sbci	r25, 0xFF	; 255
    10f2:	f0 68       	ori	r31, 0x80	; 128
    10f4:	3f 2e       	mov	r3, r31
    10f6:	2a e0       	ldi	r18, 0x0A	; 10
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	a3 01       	movw	r20, r6
    10fc:	0e 94 a5 09 	call	0x134a	; 0x134a <__ultoa_invert>
    1100:	88 2e       	mov	r8, r24
    1102:	86 18       	sub	r8, r6
    1104:	45 c0       	rjmp	.+138    	; 0x1190 <vfprintf+0x2ac>
    1106:	85 37       	cpi	r24, 0x75	; 117
    1108:	31 f4       	brne	.+12     	; 0x1116 <vfprintf+0x232>
    110a:	23 2d       	mov	r18, r3
    110c:	2f 7e       	andi	r18, 0xEF	; 239
    110e:	b2 2e       	mov	r11, r18
    1110:	2a e0       	ldi	r18, 0x0A	; 10
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	25 c0       	rjmp	.+74     	; 0x1160 <vfprintf+0x27c>
    1116:	93 2d       	mov	r25, r3
    1118:	99 7f       	andi	r25, 0xF9	; 249
    111a:	b9 2e       	mov	r11, r25
    111c:	8f 36       	cpi	r24, 0x6F	; 111
    111e:	c1 f0       	breq	.+48     	; 0x1150 <vfprintf+0x26c>
    1120:	18 f4       	brcc	.+6      	; 0x1128 <vfprintf+0x244>
    1122:	88 35       	cpi	r24, 0x58	; 88
    1124:	79 f0       	breq	.+30     	; 0x1144 <vfprintf+0x260>
    1126:	b5 c0       	rjmp	.+362    	; 0x1292 <vfprintf+0x3ae>
    1128:	80 37       	cpi	r24, 0x70	; 112
    112a:	19 f0       	breq	.+6      	; 0x1132 <vfprintf+0x24e>
    112c:	88 37       	cpi	r24, 0x78	; 120
    112e:	21 f0       	breq	.+8      	; 0x1138 <vfprintf+0x254>
    1130:	b0 c0       	rjmp	.+352    	; 0x1292 <vfprintf+0x3ae>
    1132:	e9 2f       	mov	r30, r25
    1134:	e0 61       	ori	r30, 0x10	; 16
    1136:	be 2e       	mov	r11, r30
    1138:	b4 fe       	sbrs	r11, 4
    113a:	0d c0       	rjmp	.+26     	; 0x1156 <vfprintf+0x272>
    113c:	fb 2d       	mov	r31, r11
    113e:	f4 60       	ori	r31, 0x04	; 4
    1140:	bf 2e       	mov	r11, r31
    1142:	09 c0       	rjmp	.+18     	; 0x1156 <vfprintf+0x272>
    1144:	34 fe       	sbrs	r3, 4
    1146:	0a c0       	rjmp	.+20     	; 0x115c <vfprintf+0x278>
    1148:	29 2f       	mov	r18, r25
    114a:	26 60       	ori	r18, 0x06	; 6
    114c:	b2 2e       	mov	r11, r18
    114e:	06 c0       	rjmp	.+12     	; 0x115c <vfprintf+0x278>
    1150:	28 e0       	ldi	r18, 0x08	; 8
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	05 c0       	rjmp	.+10     	; 0x1160 <vfprintf+0x27c>
    1156:	20 e1       	ldi	r18, 0x10	; 16
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <vfprintf+0x27c>
    115c:	20 e1       	ldi	r18, 0x10	; 16
    115e:	32 e0       	ldi	r19, 0x02	; 2
    1160:	f8 01       	movw	r30, r16
    1162:	b7 fe       	sbrs	r11, 7
    1164:	07 c0       	rjmp	.+14     	; 0x1174 <vfprintf+0x290>
    1166:	60 81       	ld	r22, Z
    1168:	71 81       	ldd	r23, Z+1	; 0x01
    116a:	82 81       	ldd	r24, Z+2	; 0x02
    116c:	93 81       	ldd	r25, Z+3	; 0x03
    116e:	0c 5f       	subi	r16, 0xFC	; 252
    1170:	1f 4f       	sbci	r17, 0xFF	; 255
    1172:	06 c0       	rjmp	.+12     	; 0x1180 <vfprintf+0x29c>
    1174:	60 81       	ld	r22, Z
    1176:	71 81       	ldd	r23, Z+1	; 0x01
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	0e 5f       	subi	r16, 0xFE	; 254
    117e:	1f 4f       	sbci	r17, 0xFF	; 255
    1180:	a3 01       	movw	r20, r6
    1182:	0e 94 a5 09 	call	0x134a	; 0x134a <__ultoa_invert>
    1186:	88 2e       	mov	r8, r24
    1188:	86 18       	sub	r8, r6
    118a:	fb 2d       	mov	r31, r11
    118c:	ff 77       	andi	r31, 0x7F	; 127
    118e:	3f 2e       	mov	r3, r31
    1190:	36 fe       	sbrs	r3, 6
    1192:	0d c0       	rjmp	.+26     	; 0x11ae <vfprintf+0x2ca>
    1194:	23 2d       	mov	r18, r3
    1196:	2e 7f       	andi	r18, 0xFE	; 254
    1198:	a2 2e       	mov	r10, r18
    119a:	89 14       	cp	r8, r9
    119c:	58 f4       	brcc	.+22     	; 0x11b4 <vfprintf+0x2d0>
    119e:	34 fe       	sbrs	r3, 4
    11a0:	0b c0       	rjmp	.+22     	; 0x11b8 <vfprintf+0x2d4>
    11a2:	32 fc       	sbrc	r3, 2
    11a4:	09 c0       	rjmp	.+18     	; 0x11b8 <vfprintf+0x2d4>
    11a6:	83 2d       	mov	r24, r3
    11a8:	8e 7e       	andi	r24, 0xEE	; 238
    11aa:	a8 2e       	mov	r10, r24
    11ac:	05 c0       	rjmp	.+10     	; 0x11b8 <vfprintf+0x2d4>
    11ae:	b8 2c       	mov	r11, r8
    11b0:	a3 2c       	mov	r10, r3
    11b2:	03 c0       	rjmp	.+6      	; 0x11ba <vfprintf+0x2d6>
    11b4:	b8 2c       	mov	r11, r8
    11b6:	01 c0       	rjmp	.+2      	; 0x11ba <vfprintf+0x2d6>
    11b8:	b9 2c       	mov	r11, r9
    11ba:	a4 fe       	sbrs	r10, 4
    11bc:	0f c0       	rjmp	.+30     	; 0x11dc <vfprintf+0x2f8>
    11be:	fe 01       	movw	r30, r28
    11c0:	e8 0d       	add	r30, r8
    11c2:	f1 1d       	adc	r31, r1
    11c4:	80 81       	ld	r24, Z
    11c6:	80 33       	cpi	r24, 0x30	; 48
    11c8:	21 f4       	brne	.+8      	; 0x11d2 <vfprintf+0x2ee>
    11ca:	9a 2d       	mov	r25, r10
    11cc:	99 7e       	andi	r25, 0xE9	; 233
    11ce:	a9 2e       	mov	r10, r25
    11d0:	09 c0       	rjmp	.+18     	; 0x11e4 <vfprintf+0x300>
    11d2:	a2 fe       	sbrs	r10, 2
    11d4:	06 c0       	rjmp	.+12     	; 0x11e2 <vfprintf+0x2fe>
    11d6:	b3 94       	inc	r11
    11d8:	b3 94       	inc	r11
    11da:	04 c0       	rjmp	.+8      	; 0x11e4 <vfprintf+0x300>
    11dc:	8a 2d       	mov	r24, r10
    11de:	86 78       	andi	r24, 0x86	; 134
    11e0:	09 f0       	breq	.+2      	; 0x11e4 <vfprintf+0x300>
    11e2:	b3 94       	inc	r11
    11e4:	a3 fc       	sbrc	r10, 3
    11e6:	11 c0       	rjmp	.+34     	; 0x120a <vfprintf+0x326>
    11e8:	a0 fe       	sbrs	r10, 0
    11ea:	06 c0       	rjmp	.+12     	; 0x11f8 <vfprintf+0x314>
    11ec:	b2 14       	cp	r11, r2
    11ee:	88 f4       	brcc	.+34     	; 0x1212 <vfprintf+0x32e>
    11f0:	28 0c       	add	r2, r8
    11f2:	92 2c       	mov	r9, r2
    11f4:	9b 18       	sub	r9, r11
    11f6:	0e c0       	rjmp	.+28     	; 0x1214 <vfprintf+0x330>
    11f8:	b2 14       	cp	r11, r2
    11fa:	60 f4       	brcc	.+24     	; 0x1214 <vfprintf+0x330>
    11fc:	b6 01       	movw	r22, r12
    11fe:	80 e2       	ldi	r24, 0x20	; 32
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	0e 94 69 09 	call	0x12d2	; 0x12d2 <fputc>
    1206:	b3 94       	inc	r11
    1208:	f7 cf       	rjmp	.-18     	; 0x11f8 <vfprintf+0x314>
    120a:	b2 14       	cp	r11, r2
    120c:	18 f4       	brcc	.+6      	; 0x1214 <vfprintf+0x330>
    120e:	2b 18       	sub	r2, r11
    1210:	02 c0       	rjmp	.+4      	; 0x1216 <vfprintf+0x332>
    1212:	98 2c       	mov	r9, r8
    1214:	21 2c       	mov	r2, r1
    1216:	a4 fe       	sbrs	r10, 4
    1218:	10 c0       	rjmp	.+32     	; 0x123a <vfprintf+0x356>
    121a:	b6 01       	movw	r22, r12
    121c:	80 e3       	ldi	r24, 0x30	; 48
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	0e 94 69 09 	call	0x12d2	; 0x12d2 <fputc>
    1224:	a2 fe       	sbrs	r10, 2
    1226:	17 c0       	rjmp	.+46     	; 0x1256 <vfprintf+0x372>
    1228:	a1 fc       	sbrc	r10, 1
    122a:	03 c0       	rjmp	.+6      	; 0x1232 <vfprintf+0x34e>
    122c:	88 e7       	ldi	r24, 0x78	; 120
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <vfprintf+0x352>
    1232:	88 e5       	ldi	r24, 0x58	; 88
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	b6 01       	movw	r22, r12
    1238:	0c c0       	rjmp	.+24     	; 0x1252 <vfprintf+0x36e>
    123a:	8a 2d       	mov	r24, r10
    123c:	86 78       	andi	r24, 0x86	; 134
    123e:	59 f0       	breq	.+22     	; 0x1256 <vfprintf+0x372>
    1240:	a1 fe       	sbrs	r10, 1
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <vfprintf+0x364>
    1244:	8b e2       	ldi	r24, 0x2B	; 43
    1246:	01 c0       	rjmp	.+2      	; 0x124a <vfprintf+0x366>
    1248:	80 e2       	ldi	r24, 0x20	; 32
    124a:	a7 fc       	sbrc	r10, 7
    124c:	8d e2       	ldi	r24, 0x2D	; 45
    124e:	b6 01       	movw	r22, r12
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	0e 94 69 09 	call	0x12d2	; 0x12d2 <fputc>
    1256:	89 14       	cp	r8, r9
    1258:	38 f4       	brcc	.+14     	; 0x1268 <vfprintf+0x384>
    125a:	b6 01       	movw	r22, r12
    125c:	80 e3       	ldi	r24, 0x30	; 48
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	0e 94 69 09 	call	0x12d2	; 0x12d2 <fputc>
    1264:	9a 94       	dec	r9
    1266:	f7 cf       	rjmp	.-18     	; 0x1256 <vfprintf+0x372>
    1268:	8a 94       	dec	r8
    126a:	f3 01       	movw	r30, r6
    126c:	e8 0d       	add	r30, r8
    126e:	f1 1d       	adc	r31, r1
    1270:	80 81       	ld	r24, Z
    1272:	b6 01       	movw	r22, r12
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	0e 94 69 09 	call	0x12d2	; 0x12d2 <fputc>
    127a:	81 10       	cpse	r8, r1
    127c:	f5 cf       	rjmp	.-22     	; 0x1268 <vfprintf+0x384>
    127e:	22 20       	and	r2, r2
    1280:	09 f4       	brne	.+2      	; 0x1284 <vfprintf+0x3a0>
    1282:	42 ce       	rjmp	.-892    	; 0xf08 <vfprintf+0x24>
    1284:	b6 01       	movw	r22, r12
    1286:	80 e2       	ldi	r24, 0x20	; 32
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	0e 94 69 09 	call	0x12d2	; 0x12d2 <fputc>
    128e:	2a 94       	dec	r2
    1290:	f6 cf       	rjmp	.-20     	; 0x127e <vfprintf+0x39a>
    1292:	f6 01       	movw	r30, r12
    1294:	86 81       	ldd	r24, Z+6	; 0x06
    1296:	97 81       	ldd	r25, Z+7	; 0x07
    1298:	02 c0       	rjmp	.+4      	; 0x129e <vfprintf+0x3ba>
    129a:	8f ef       	ldi	r24, 0xFF	; 255
    129c:	9f ef       	ldi	r25, 0xFF	; 255
    129e:	2b 96       	adiw	r28, 0x0b	; 11
    12a0:	e2 e1       	ldi	r30, 0x12	; 18
    12a2:	0c 94 1f 0a 	jmp	0x143e	; 0x143e <__epilogue_restores__>

000012a6 <strnlen_P>:
    12a6:	fc 01       	movw	r30, r24
    12a8:	05 90       	lpm	r0, Z+
    12aa:	61 50       	subi	r22, 0x01	; 1
    12ac:	70 40       	sbci	r23, 0x00	; 0
    12ae:	01 10       	cpse	r0, r1
    12b0:	d8 f7       	brcc	.-10     	; 0x12a8 <strnlen_P+0x2>
    12b2:	80 95       	com	r24
    12b4:	90 95       	com	r25
    12b6:	8e 0f       	add	r24, r30
    12b8:	9f 1f       	adc	r25, r31
    12ba:	08 95       	ret

000012bc <strnlen>:
    12bc:	fc 01       	movw	r30, r24
    12be:	61 50       	subi	r22, 0x01	; 1
    12c0:	70 40       	sbci	r23, 0x00	; 0
    12c2:	01 90       	ld	r0, Z+
    12c4:	01 10       	cpse	r0, r1
    12c6:	d8 f7       	brcc	.-10     	; 0x12be <strnlen+0x2>
    12c8:	80 95       	com	r24
    12ca:	90 95       	com	r25
    12cc:	8e 0f       	add	r24, r30
    12ce:	9f 1f       	adc	r25, r31
    12d0:	08 95       	ret

000012d2 <fputc>:
    12d2:	0f 93       	push	r16
    12d4:	1f 93       	push	r17
    12d6:	cf 93       	push	r28
    12d8:	df 93       	push	r29
    12da:	fb 01       	movw	r30, r22
    12dc:	23 81       	ldd	r18, Z+3	; 0x03
    12de:	21 fd       	sbrc	r18, 1
    12e0:	03 c0       	rjmp	.+6      	; 0x12e8 <fputc+0x16>
    12e2:	8f ef       	ldi	r24, 0xFF	; 255
    12e4:	9f ef       	ldi	r25, 0xFF	; 255
    12e6:	2c c0       	rjmp	.+88     	; 0x1340 <fputc+0x6e>
    12e8:	22 ff       	sbrs	r18, 2
    12ea:	16 c0       	rjmp	.+44     	; 0x1318 <fputc+0x46>
    12ec:	46 81       	ldd	r20, Z+6	; 0x06
    12ee:	57 81       	ldd	r21, Z+7	; 0x07
    12f0:	24 81       	ldd	r18, Z+4	; 0x04
    12f2:	35 81       	ldd	r19, Z+5	; 0x05
    12f4:	42 17       	cp	r20, r18
    12f6:	53 07       	cpc	r21, r19
    12f8:	44 f4       	brge	.+16     	; 0x130a <fputc+0x38>
    12fa:	a0 81       	ld	r26, Z
    12fc:	b1 81       	ldd	r27, Z+1	; 0x01
    12fe:	9d 01       	movw	r18, r26
    1300:	2f 5f       	subi	r18, 0xFF	; 255
    1302:	3f 4f       	sbci	r19, 0xFF	; 255
    1304:	31 83       	std	Z+1, r19	; 0x01
    1306:	20 83       	st	Z, r18
    1308:	8c 93       	st	X, r24
    130a:	26 81       	ldd	r18, Z+6	; 0x06
    130c:	37 81       	ldd	r19, Z+7	; 0x07
    130e:	2f 5f       	subi	r18, 0xFF	; 255
    1310:	3f 4f       	sbci	r19, 0xFF	; 255
    1312:	37 83       	std	Z+7, r19	; 0x07
    1314:	26 83       	std	Z+6, r18	; 0x06
    1316:	14 c0       	rjmp	.+40     	; 0x1340 <fputc+0x6e>
    1318:	8b 01       	movw	r16, r22
    131a:	ec 01       	movw	r28, r24
    131c:	fb 01       	movw	r30, r22
    131e:	00 84       	ldd	r0, Z+8	; 0x08
    1320:	f1 85       	ldd	r31, Z+9	; 0x09
    1322:	e0 2d       	mov	r30, r0
    1324:	09 95       	icall
    1326:	89 2b       	or	r24, r25
    1328:	e1 f6       	brne	.-72     	; 0x12e2 <fputc+0x10>
    132a:	d8 01       	movw	r26, r16
    132c:	16 96       	adiw	r26, 0x06	; 6
    132e:	8d 91       	ld	r24, X+
    1330:	9c 91       	ld	r25, X
    1332:	17 97       	sbiw	r26, 0x07	; 7
    1334:	01 96       	adiw	r24, 0x01	; 1
    1336:	17 96       	adiw	r26, 0x07	; 7
    1338:	9c 93       	st	X, r25
    133a:	8e 93       	st	-X, r24
    133c:	16 97       	sbiw	r26, 0x06	; 6
    133e:	ce 01       	movw	r24, r28
    1340:	df 91       	pop	r29
    1342:	cf 91       	pop	r28
    1344:	1f 91       	pop	r17
    1346:	0f 91       	pop	r16
    1348:	08 95       	ret

0000134a <__ultoa_invert>:
    134a:	fa 01       	movw	r30, r20
    134c:	aa 27       	eor	r26, r26
    134e:	28 30       	cpi	r18, 0x08	; 8
    1350:	51 f1       	breq	.+84     	; 0x13a6 <__ultoa_invert+0x5c>
    1352:	20 31       	cpi	r18, 0x10	; 16
    1354:	81 f1       	breq	.+96     	; 0x13b6 <__ultoa_invert+0x6c>
    1356:	e8 94       	clt
    1358:	6f 93       	push	r22
    135a:	6e 7f       	andi	r22, 0xFE	; 254
    135c:	6e 5f       	subi	r22, 0xFE	; 254
    135e:	7f 4f       	sbci	r23, 0xFF	; 255
    1360:	8f 4f       	sbci	r24, 0xFF	; 255
    1362:	9f 4f       	sbci	r25, 0xFF	; 255
    1364:	af 4f       	sbci	r26, 0xFF	; 255
    1366:	b1 e0       	ldi	r27, 0x01	; 1
    1368:	3e d0       	rcall	.+124    	; 0x13e6 <__ultoa_invert+0x9c>
    136a:	b4 e0       	ldi	r27, 0x04	; 4
    136c:	3c d0       	rcall	.+120    	; 0x13e6 <__ultoa_invert+0x9c>
    136e:	67 0f       	add	r22, r23
    1370:	78 1f       	adc	r23, r24
    1372:	89 1f       	adc	r24, r25
    1374:	9a 1f       	adc	r25, r26
    1376:	a1 1d       	adc	r26, r1
    1378:	68 0f       	add	r22, r24
    137a:	79 1f       	adc	r23, r25
    137c:	8a 1f       	adc	r24, r26
    137e:	91 1d       	adc	r25, r1
    1380:	a1 1d       	adc	r26, r1
    1382:	6a 0f       	add	r22, r26
    1384:	71 1d       	adc	r23, r1
    1386:	81 1d       	adc	r24, r1
    1388:	91 1d       	adc	r25, r1
    138a:	a1 1d       	adc	r26, r1
    138c:	20 d0       	rcall	.+64     	; 0x13ce <__ultoa_invert+0x84>
    138e:	09 f4       	brne	.+2      	; 0x1392 <__ultoa_invert+0x48>
    1390:	68 94       	set
    1392:	3f 91       	pop	r19
    1394:	2a e0       	ldi	r18, 0x0A	; 10
    1396:	26 9f       	mul	r18, r22
    1398:	11 24       	eor	r1, r1
    139a:	30 19       	sub	r19, r0
    139c:	30 5d       	subi	r19, 0xD0	; 208
    139e:	31 93       	st	Z+, r19
    13a0:	de f6       	brtc	.-74     	; 0x1358 <__ultoa_invert+0xe>
    13a2:	cf 01       	movw	r24, r30
    13a4:	08 95       	ret
    13a6:	46 2f       	mov	r20, r22
    13a8:	47 70       	andi	r20, 0x07	; 7
    13aa:	40 5d       	subi	r20, 0xD0	; 208
    13ac:	41 93       	st	Z+, r20
    13ae:	b3 e0       	ldi	r27, 0x03	; 3
    13b0:	0f d0       	rcall	.+30     	; 0x13d0 <__ultoa_invert+0x86>
    13b2:	c9 f7       	brne	.-14     	; 0x13a6 <__ultoa_invert+0x5c>
    13b4:	f6 cf       	rjmp	.-20     	; 0x13a2 <__ultoa_invert+0x58>
    13b6:	46 2f       	mov	r20, r22
    13b8:	4f 70       	andi	r20, 0x0F	; 15
    13ba:	40 5d       	subi	r20, 0xD0	; 208
    13bc:	4a 33       	cpi	r20, 0x3A	; 58
    13be:	18 f0       	brcs	.+6      	; 0x13c6 <__ultoa_invert+0x7c>
    13c0:	49 5d       	subi	r20, 0xD9	; 217
    13c2:	31 fd       	sbrc	r19, 1
    13c4:	40 52       	subi	r20, 0x20	; 32
    13c6:	41 93       	st	Z+, r20
    13c8:	02 d0       	rcall	.+4      	; 0x13ce <__ultoa_invert+0x84>
    13ca:	a9 f7       	brne	.-22     	; 0x13b6 <__ultoa_invert+0x6c>
    13cc:	ea cf       	rjmp	.-44     	; 0x13a2 <__ultoa_invert+0x58>
    13ce:	b4 e0       	ldi	r27, 0x04	; 4
    13d0:	a6 95       	lsr	r26
    13d2:	97 95       	ror	r25
    13d4:	87 95       	ror	r24
    13d6:	77 95       	ror	r23
    13d8:	67 95       	ror	r22
    13da:	ba 95       	dec	r27
    13dc:	c9 f7       	brne	.-14     	; 0x13d0 <__ultoa_invert+0x86>
    13de:	00 97       	sbiw	r24, 0x00	; 0
    13e0:	61 05       	cpc	r22, r1
    13e2:	71 05       	cpc	r23, r1
    13e4:	08 95       	ret
    13e6:	9b 01       	movw	r18, r22
    13e8:	ac 01       	movw	r20, r24
    13ea:	0a 2e       	mov	r0, r26
    13ec:	06 94       	lsr	r0
    13ee:	57 95       	ror	r21
    13f0:	47 95       	ror	r20
    13f2:	37 95       	ror	r19
    13f4:	27 95       	ror	r18
    13f6:	ba 95       	dec	r27
    13f8:	c9 f7       	brne	.-14     	; 0x13ec <__ultoa_invert+0xa2>
    13fa:	62 0f       	add	r22, r18
    13fc:	73 1f       	adc	r23, r19
    13fe:	84 1f       	adc	r24, r20
    1400:	95 1f       	adc	r25, r21
    1402:	a0 1d       	adc	r26, r0
    1404:	08 95       	ret

00001406 <__prologue_saves__>:
    1406:	2f 92       	push	r2
    1408:	3f 92       	push	r3
    140a:	4f 92       	push	r4
    140c:	5f 92       	push	r5
    140e:	6f 92       	push	r6
    1410:	7f 92       	push	r7
    1412:	8f 92       	push	r8
    1414:	9f 92       	push	r9
    1416:	af 92       	push	r10
    1418:	bf 92       	push	r11
    141a:	cf 92       	push	r12
    141c:	df 92       	push	r13
    141e:	ef 92       	push	r14
    1420:	ff 92       	push	r15
    1422:	0f 93       	push	r16
    1424:	1f 93       	push	r17
    1426:	cf 93       	push	r28
    1428:	df 93       	push	r29
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
    142e:	ca 1b       	sub	r28, r26
    1430:	db 0b       	sbc	r29, r27
    1432:	0f b6       	in	r0, 0x3f	; 63
    1434:	f8 94       	cli
    1436:	de bf       	out	0x3e, r29	; 62
    1438:	0f be       	out	0x3f, r0	; 63
    143a:	cd bf       	out	0x3d, r28	; 61
    143c:	09 94       	ijmp

0000143e <__epilogue_restores__>:
    143e:	2a 88       	ldd	r2, Y+18	; 0x12
    1440:	39 88       	ldd	r3, Y+17	; 0x11
    1442:	48 88       	ldd	r4, Y+16	; 0x10
    1444:	5f 84       	ldd	r5, Y+15	; 0x0f
    1446:	6e 84       	ldd	r6, Y+14	; 0x0e
    1448:	7d 84       	ldd	r7, Y+13	; 0x0d
    144a:	8c 84       	ldd	r8, Y+12	; 0x0c
    144c:	9b 84       	ldd	r9, Y+11	; 0x0b
    144e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1450:	b9 84       	ldd	r11, Y+9	; 0x09
    1452:	c8 84       	ldd	r12, Y+8	; 0x08
    1454:	df 80       	ldd	r13, Y+7	; 0x07
    1456:	ee 80       	ldd	r14, Y+6	; 0x06
    1458:	fd 80       	ldd	r15, Y+5	; 0x05
    145a:	0c 81       	ldd	r16, Y+4	; 0x04
    145c:	1b 81       	ldd	r17, Y+3	; 0x03
    145e:	aa 81       	ldd	r26, Y+2	; 0x02
    1460:	b9 81       	ldd	r27, Y+1	; 0x01
    1462:	ce 0f       	add	r28, r30
    1464:	d1 1d       	adc	r29, r1
    1466:	0f b6       	in	r0, 0x3f	; 63
    1468:	f8 94       	cli
    146a:	de bf       	out	0x3e, r29	; 62
    146c:	0f be       	out	0x3f, r0	; 63
    146e:	cd bf       	out	0x3d, r28	; 61
    1470:	ed 01       	movw	r28, r26
    1472:	08 95       	ret

00001474 <_exit>:
    1474:	f8 94       	cli

00001476 <__stop_program>:
    1476:	ff cf       	rjmp	.-2      	; 0x1476 <__stop_program>
