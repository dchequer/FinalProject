
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000158  00800100  000014c6  0000155a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800258  00800258  000016b2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000016b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001710  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00001750  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000123e  00000000  00000000  00001810  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b8f  00000000  00000000  00002a4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000098e  00000000  00000000  000035dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000348  00000000  00000000  00003f6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006b7  00000000  00000000  000042b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b16  00000000  00000000  0000496b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00005481  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__ctors_end>
       4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
       8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
       c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      10:	0c 94 15 02 	jmp	0x42a	; 0x42a <__vector_4>
      14:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      18:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      1c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      20:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      24:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      28:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      2c:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <__vector_11>
      30:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      34:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__vector_13>
      38:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      3c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      40:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      44:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      48:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      4c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      50:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      54:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      58:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      5c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      60:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      64:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      68:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      6c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      70:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      74:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      78:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      7c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      80:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      84:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      88:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      8c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      90:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      94:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      98:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      9c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      a0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      a4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      a8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      ac:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      b0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      b4:	08 00       	.word	0x0008	; ????
      b6:	00 00       	nop
      b8:	be 92       	st	-X, r11
      ba:	24 49       	sbci	r18, 0x94	; 148
      bc:	12 3e       	cpi	r17, 0xE2	; 226
      be:	ab aa       	std	Y+51, r10	; 0x33
      c0:	aa 2a       	or	r10, r26
      c2:	be cd       	rjmp	.-1156   	; 0xfffffc40 <__eeprom_end+0xff7efc40>
      c4:	cc cc       	rjmp	.-1640   	; 0xfffffa5e <__eeprom_end+0xff7efa5e>
      c6:	4c 3e       	cpi	r20, 0xEC	; 236
      c8:	00 00       	nop
      ca:	00 80       	ld	r0, Z
      cc:	be ab       	std	Y+54, r27	; 0x36
      ce:	aa aa       	std	Y+50, r10	; 0x32
      d0:	aa 3e       	cpi	r26, 0xEA	; 234
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	bf 00       	.word	0x00bf	; ????
      d8:	00 00       	nop
      da:	80 3f       	cpi	r24, 0xF0	; 240
      dc:	00 00       	nop
      de:	00 00       	nop
      e0:	00 08       	sbc	r0, r0
      e2:	41 78       	andi	r20, 0x81	; 129
      e4:	d3 bb       	out	0x13, r29	; 19
      e6:	43 87       	std	Z+11, r20	; 0x0b
      e8:	d1 13       	cpse	r29, r17
      ea:	3d 19       	sub	r19, r13
      ec:	0e 3c       	cpi	r16, 0xCE	; 206
      ee:	c3 bd       	out	0x23, r28	; 35
      f0:	42 82       	std	Z+2, r4	; 0x02
      f2:	ad 2b       	or	r26, r29
      f4:	3e 68       	ori	r19, 0x8E	; 142
      f6:	ec 82       	std	Y+4, r14	; 0x04
      f8:	76 be       	out	0x36, r7	; 54
      fa:	d9 8f       	std	Y+25, r29	; 0x19
      fc:	e1 a9       	ldd	r30, Z+49	; 0x31
      fe:	3e 4c       	sbci	r19, 0xCE	; 206
     100:	80 ef       	ldi	r24, 0xF0	; 240
     102:	ff be       	out	0x3f, r15	; 63
     104:	01 c4       	rjmp	.+2050   	; 0x908 <__stack+0x9>
     106:	ff 7f       	andi	r31, 0xFF	; 255
     108:	3f 00       	.word	0x003f	; ????
     10a:	00 00       	nop
	...

0000010e <__ctors_end>:
     10e:	11 24       	eor	r1, r1
     110:	1f be       	out	0x3f, r1	; 63
     112:	cf ef       	ldi	r28, 0xFF	; 255
     114:	d8 e0       	ldi	r29, 0x08	; 8
     116:	de bf       	out	0x3e, r29	; 62
     118:	cd bf       	out	0x3d, r28	; 61

0000011a <__do_copy_data>:
     11a:	12 e0       	ldi	r17, 0x02	; 2
     11c:	a0 e0       	ldi	r26, 0x00	; 0
     11e:	b1 e0       	ldi	r27, 0x01	; 1
     120:	e6 ec       	ldi	r30, 0xC6	; 198
     122:	f4 e1       	ldi	r31, 0x14	; 20
     124:	02 c0       	rjmp	.+4      	; 0x12a <__do_copy_data+0x10>
     126:	05 90       	lpm	r0, Z+
     128:	0d 92       	st	X+, r0
     12a:	a8 35       	cpi	r26, 0x58	; 88
     12c:	b1 07       	cpc	r27, r17
     12e:	d9 f7       	brne	.-10     	; 0x126 <__do_copy_data+0xc>

00000130 <__do_clear_bss>:
     130:	22 e0       	ldi	r18, 0x02	; 2
     132:	a8 e5       	ldi	r26, 0x58	; 88
     134:	b2 e0       	ldi	r27, 0x02	; 2
     136:	01 c0       	rjmp	.+2      	; 0x13a <.do_clear_bss_start>

00000138 <.do_clear_bss_loop>:
     138:	1d 92       	st	X+, r1

0000013a <.do_clear_bss_start>:
     13a:	a3 36       	cpi	r26, 0x63	; 99
     13c:	b2 07       	cpc	r27, r18
     13e:	e1 f7       	brne	.-8      	; 0x138 <.do_clear_bss_loop>
     140:	0e 94 b2 04 	call	0x964	; 0x964 <main>
     144:	0c 94 61 0a 	jmp	0x14c2	; 0x14c2 <_exit>

00000148 <__bad_interrupt>:
     148:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000014c <Mega328P_Init>:
.section ".text"			
.global Mega328P_Init
Mega328P_Init:
		//***********************************************
		//initialize PB0(R*W),PB1(RS),PB2(E) as fixed cleared outputs
		ldi	r16,0x07		// 0b00000111
     14c:	07 e0       	ldi	r16, 0x07	; 7
		out	DDRB,r16		
     14e:	04 b9       	out	0x04, r16	; 4
		ldi	r16,0			// 0b00000000
     150:	00 e0       	ldi	r16, 0x00	; 0
		out	PORTB,r16		
     152:	05 b9       	out	0x05, r16	; 5
		//***********************************************
		//initialize UART, 8bits, no parity, 1 stop, 9600
		out	U2X0,r16		// 0b00000000	
     154:	01 b9       	out	0x01, r16	; 1
		ldi	r17,0x0			
     156:	10 e0       	ldi	r17, 0x00	; 0
		ldi	r16,0x67		
     158:	07 e6       	ldi	r16, 0x67	; 103
		sts	UBRR0H,r17		// 0b00000000
     15a:	10 93 c5 00 	sts	0x00C5, r17	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
		sts	UBRR0L,r16		// 0b01100111
     15e:	00 93 c4 00 	sts	0x00C4, r16	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
		ldi	r16,24			
     162:	08 e1       	ldi	r16, 0x18	; 24
		sts	UCSR0B,r16		// 0b00011000
     164:	00 93 c1 00 	sts	0x00C1, r16	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
		ldi	r16,6			
     168:	06 e0       	ldi	r16, 0x06	; 6
		sts	UCSR0C,r16		// 0b00000110
     16a:	00 93 c2 00 	sts	0x00C2, r16	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
		//************************************************
		//initialize ADC
		ldi r16,0x87		
     16e:	07 e8       	ldi	r16, 0x87	; 135
		sts	ADCSRA,r16		// 0b10000111
     170:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
		ldi r16,0x40		
     174:	00 e4       	ldi	r16, 0x40	; 64
		sts ADMUX,r16		// 0b01000000
     176:	00 93 7c 00 	sts	0x007C, r16	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
		ldi r16,0			
     17a:	00 e0       	ldi	r16, 0x00	; 0
		sts ADCSRB,r16		// 0b00000000
     17c:	00 93 7b 00 	sts	0x007B, r16	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
		ldi r16,0xFE		
     180:	0e ef       	ldi	r16, 0xFE	; 254
		sts DIDR0,r16		// 0b11111110
     182:	00 93 7e 00 	sts	0x007E, r16	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
		ldi r16,0xFF		
     186:	0f ef       	ldi	r16, 0xFF	; 255
		sts DIDR1,r16		// 0b11111111
     188:	00 93 7f 00 	sts	0x007F, r16	; 0x80007f <__TEXT_REGION_LENGTH__+0x7f807f>
		//************************************************
		//initialize PC1 as output for trigger and PC2 and input for echo
		ldi r16, 0x02		// 0b00000010 
     18c:	02 e0       	ldi	r16, 0x02	; 2
		out DDRC, r16
     18e:	07 b9       	out	0x07, r16	; 7
		ldi r16, 0x00		// 0b00000000
     190:	00 e0       	ldi	r16, 0x00	; 0
		out PORTC, r16		// set all pins to low
     192:	08 b9       	out	0x08, r16	; 8

00000194 <LCD_Write_Command>:
		//************************************************

.global LCD_Write_Command
LCD_Write_Command:
	call	UART_Off		
     194:	0e 94 07 01 	call	0x20e	; 0x20e <UART_Off>
	ldi		r16,0xFF		
     198:	0f ef       	ldi	r16, 0xFF	; 255
	out		DDRD,r16		
     19a:	0a b9       	out	0x0a, r16	; 10
	lds		r16,DATA		
     19c:	00 91 58 02 	lds	r16, 0x0258	; 0x800258 <__data_end>
	out		PORTD,r16		
     1a0:	0b b9       	out	0x0b, r16	; 11
	ldi		r16,4			
     1a2:	04 e0       	ldi	r16, 0x04	; 4
	out		PORTB,r16		
     1a4:	05 b9       	out	0x05, r16	; 5
	call	LCD_Delay		
     1a6:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_Delay>
	ldi		r16,0			
     1aa:	00 e0       	ldi	r16, 0x00	; 0
	out		PORTB,r16		
     1ac:	05 b9       	out	0x05, r16	; 5
	call	LCD_Delay		
     1ae:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_Delay>
	call	UART_On			
     1b2:	0e 94 01 01 	call	0x202	; 0x202 <UART_On>
	ret						
     1b6:	08 95       	ret

000001b8 <LCD_Delay>:

LCD_Delay:
	ldi		r16,0xFA		
     1b8:	0a ef       	ldi	r16, 0xFA	; 250

000001ba <D0>:
D0:	ldi		r17,0xFF		
     1ba:	1f ef       	ldi	r17, 0xFF	; 255

000001bc <D1>:
D1:	dec		r17				
     1bc:	1a 95       	dec	r17
	brne	D1				
     1be:	f1 f7       	brne	.-4      	; 0x1bc <D1>
	dec		r16				
     1c0:	0a 95       	dec	r16
	brne	D0				
     1c2:	d9 f7       	brne	.-10     	; 0x1ba <D0>
	ret						
     1c4:	08 95       	ret

000001c6 <LCD_Write_Data>:

.global LCD_Write_Data
LCD_Write_Data:
	call	UART_Off		
     1c6:	0e 94 07 01 	call	0x20e	; 0x20e <UART_Off>
	ldi		r16,0xFF		
     1ca:	0f ef       	ldi	r16, 0xFF	; 255
	out		DDRD,r16		
     1cc:	0a b9       	out	0x0a, r16	; 10
	lds		r16,DATA		
     1ce:	00 91 58 02 	lds	r16, 0x0258	; 0x800258 <__data_end>
	out		PORTD,r16		
     1d2:	0b b9       	out	0x0b, r16	; 11
	ldi		r16,6			
     1d4:	06 e0       	ldi	r16, 0x06	; 6
	out		PORTB,r16		
     1d6:	05 b9       	out	0x05, r16	; 5
	call	LCD_Delay		
     1d8:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_Delay>
	ldi		r16,0			
     1dc:	00 e0       	ldi	r16, 0x00	; 0
	out		PORTB,r16		
     1de:	05 b9       	out	0x05, r16	; 5
	call	LCD_Delay		
     1e0:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_Delay>
	call	UART_On			
     1e4:	0e 94 01 01 	call	0x202	; 0x202 <UART_On>
	ret						
     1e8:	08 95       	ret

000001ea <LCD_Read_Data>:

.global LCD_Read_Data
LCD_Read_Data:
	call	UART_Off		
     1ea:	0e 94 07 01 	call	0x20e	; 0x20e <UART_Off>
	ldi		r16,0x00		
     1ee:	00 e0       	ldi	r16, 0x00	; 0
	out		DDRD,r16		
     1f0:	0a b9       	out	0x0a, r16	; 10
	out		PORTB,4			
     1f2:	45 b8       	out	0x05, r4	; 5
	in		r16,PORTD		
     1f4:	0b b1       	in	r16, 0x0b	; 11
	sts		DATA,r16		
     1f6:	00 93 58 02 	sts	0x0258, r16	; 0x800258 <__data_end>
	out		PORTB,0			
     1fa:	05 b8       	out	0x05, r0	; 5
	call	UART_On			
     1fc:	0e 94 01 01 	call	0x202	; 0x202 <UART_On>
	ret						
     200:	08 95       	ret

00000202 <UART_On>:

.global UART_On
UART_On:
	ldi		r16,2				
     202:	02 e0       	ldi	r16, 0x02	; 2
	out		DDRD,r16			
     204:	0a b9       	out	0x0a, r16	; 10
	ldi		r16,24				
     206:	08 e1       	ldi	r16, 0x18	; 24
	sts		UCSR0B,r16			
     208:	00 93 c1 00 	sts	0x00C1, r16	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	ret							
     20c:	08 95       	ret

0000020e <UART_Off>:

.global UART_Off
UART_Off:
	ldi	r16,0					
     20e:	00 e0       	ldi	r16, 0x00	; 0
	sts UCSR0B,r16				
     210:	00 93 c1 00 	sts	0x00C1, r16	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	ret							
     214:	08 95       	ret

00000216 <UART_Clear>:

.global UART_Clear
UART_Clear:
	lds		r16,UCSR0A			
     216:	00 91 c0 00 	lds	r16, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	sbrs	r16,RXC0			
     21a:	07 ff       	sbrs	r16, 7
	ret							
     21c:	08 95       	ret
	lds		r16,UDR0			
     21e:	00 91 c6 00 	lds	r16, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	rjmp	UART_Clear			
     222:	f9 cf       	rjmp	.-14     	; 0x216 <UART_Clear>

00000224 <UART_Get>:

.global UART_Get
UART_Get:
	lds		r16,UCSR0A			
     224:	00 91 c0 00 	lds	r16, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	sbrs	r16,RXC0			
     228:	07 ff       	sbrs	r16, 7
	rjmp	UART_Get			
     22a:	fc cf       	rjmp	.-8      	; 0x224 <UART_Get>
	lds		r16,UDR0			
     22c:	00 91 c6 00 	lds	r16, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	sts		ASCII,r16			
     230:	00 93 5a 02 	sts	0x025A, r16	; 0x80025a <ASCII>
	ret							
     234:	08 95       	ret

00000236 <UART_Put>:

.global UART_Put
UART_Put:
	lds		r17,UCSR0A			
     236:	10 91 c0 00 	lds	r17, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	sbrs	r17,UDRE0			
     23a:	15 ff       	sbrs	r17, 5
	rjmp	UART_Put			
     23c:	fc cf       	rjmp	.-8      	; 0x236 <UART_Put>
	lds		r16,ASCII			
     23e:	00 91 5a 02 	lds	r16, 0x025A	; 0x80025a <ASCII>
	sts		UDR0,r16			
     242:	00 93 c6 00 	sts	0x00C6, r16	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	ret							
     246:	08 95       	ret

00000248 <ADC_Get>:

.global ADC_Get
ADC_Get:
		ldi		r16,0xC7			
     248:	07 ec       	ldi	r16, 0xC7	; 199
		sts		ADCSRA,r16			
     24a:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

0000024e <A2V1>:
A2V1:	lds		r16,ADCSRA			
     24e:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
		sbrc	r16,ADSC			
     252:	06 fd       	sbrc	r16, 6
		rjmp 	A2V1				
     254:	fc cf       	rjmp	.-8      	; 0x24e <A2V1>
		lds		r16,ADCL			
     256:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
		sts		LADC,r16			
     25a:	00 93 60 02 	sts	0x0260, r16	; 0x800260 <LADC>
		lds		r16,ADCH			
     25e:	00 91 79 00 	lds	r16, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
		sts		HADC,r16			
     262:	00 93 59 02 	sts	0x0259, r16	; 0x800259 <HADC>
		ret							
     266:	08 95       	ret

00000268 <getPrescaler>:
		case 64: return 2;
		case 256: return 3;
		case 1024: return 4;
		default: return -1; // invalid prescaler value
	}
}
     268:	85 b5       	in	r24, 0x25	; 37
     26a:	87 70       	andi	r24, 0x07	; 7
     26c:	83 30       	cpi	r24, 0x03	; 3
     26e:	71 f0       	breq	.+28     	; 0x28c <getPrescaler+0x24>
     270:	28 f4       	brcc	.+10     	; 0x27c <getPrescaler+0x14>
     272:	81 30       	cpi	r24, 0x01	; 1
     274:	41 f0       	breq	.+16     	; 0x286 <getPrescaler+0x1e>
     276:	82 30       	cpi	r24, 0x02	; 2
     278:	a9 f0       	breq	.+42     	; 0x2a4 <getPrescaler+0x3c>
     27a:	11 c0       	rjmp	.+34     	; 0x29e <getPrescaler+0x36>
     27c:	84 30       	cpi	r24, 0x04	; 4
     27e:	49 f0       	breq	.+18     	; 0x292 <getPrescaler+0x2a>
     280:	85 30       	cpi	r24, 0x05	; 5
     282:	51 f0       	breq	.+20     	; 0x298 <getPrescaler+0x30>
     284:	0c c0       	rjmp	.+24     	; 0x29e <getPrescaler+0x36>
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	08 95       	ret
     28c:	80 e4       	ldi	r24, 0x40	; 64
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	08 95       	ret
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	91 e0       	ldi	r25, 0x01	; 1
     296:	08 95       	ret
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	94 e0       	ldi	r25, 0x04	; 4
     29c:	08 95       	ret
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	08 95       	ret
     2a4:	88 e0       	ldi	r24, 0x08	; 8
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	08 95       	ret

000002aa <setPrescalerBits>:

uint8_t setPrescalerBits(int prescaler){ // helper function to set the prescaler bits of a timer
	switch (prescaler){
     2aa:	80 34       	cpi	r24, 0x40	; 64
     2ac:	91 05       	cpc	r25, r1
     2ae:	89 f0       	breq	.+34     	; 0x2d2 <setPrescalerBits+0x28>
     2b0:	34 f4       	brge	.+12     	; 0x2be <setPrescalerBits+0x14>
     2b2:	81 30       	cpi	r24, 0x01	; 1
     2b4:	91 05       	cpc	r25, r1
     2b6:	59 f0       	breq	.+22     	; 0x2ce <setPrescalerBits+0x24>
     2b8:	08 97       	sbiw	r24, 0x08	; 8
     2ba:	99 f0       	breq	.+38     	; 0x2e2 <setPrescalerBits+0x38>
     2bc:	10 c0       	rjmp	.+32     	; 0x2de <setPrescalerBits+0x34>
     2be:	81 15       	cp	r24, r1
     2c0:	21 e0       	ldi	r18, 0x01	; 1
     2c2:	92 07       	cpc	r25, r18
     2c4:	41 f0       	breq	.+16     	; 0x2d6 <setPrescalerBits+0x2c>
     2c6:	81 15       	cp	r24, r1
     2c8:	94 40       	sbci	r25, 0x04	; 4
     2ca:	39 f0       	breq	.+14     	; 0x2da <setPrescalerBits+0x30>
     2cc:	08 c0       	rjmp	.+16     	; 0x2de <setPrescalerBits+0x34>
		case 1: return (1 << CS00);
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	08 95       	ret
		case 8: return (1 << CS01);
		case 64: return (1 << CS01) | (1 << CS00);
     2d2:	83 e0       	ldi	r24, 0x03	; 3
     2d4:	08 95       	ret
		case 256: return (1 << CS02);
     2d6:	84 e0       	ldi	r24, 0x04	; 4
     2d8:	08 95       	ret
		case 1024: return (1 << CS02) | (1 << CS00);
     2da:	85 e0       	ldi	r24, 0x05	; 5
     2dc:	08 95       	ret
		default: return 0; // invalid prescaler value
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	08 95       	ret
}

uint8_t setPrescalerBits(int prescaler){ // helper function to set the prescaler bits of a timer
	switch (prescaler){
		case 1: return (1 << CS00);
		case 8: return (1 << CS01);
     2e2:	82 e0       	ldi	r24, 0x02	; 2
		case 64: return (1 << CS01) | (1 << CS00);
		case 256: return (1 << CS02);
		case 1024: return (1 << CS02) | (1 << CS00);
		default: return 0; // invalid prescaler value
	}
}
     2e4:	08 95       	ret

000002e6 <Timer1>:

void Timer1(double us){
     2e6:	4f 92       	push	r4
     2e8:	5f 92       	push	r5
     2ea:	6f 92       	push	r6
     2ec:	7f 92       	push	r7
     2ee:	8f 92       	push	r8
     2f0:	9f 92       	push	r9
     2f2:	af 92       	push	r10
     2f4:	bf 92       	push	r11
     2f6:	ef 92       	push	r14
     2f8:	ff 92       	push	r15
     2fa:	0f 93       	push	r16
     2fc:	1f 93       	push	r17
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	cd b7       	in	r28, 0x3d	; 61
     304:	de b7       	in	r29, 0x3e	; 62
     306:	2a 97       	sbiw	r28, 0x0a	; 10
     308:	0f b6       	in	r0, 0x3f	; 63
     30a:	f8 94       	cli
     30c:	de bf       	out	0x3e, r29	; 62
     30e:	0f be       	out	0x3f, r0	; 63
     310:	cd bf       	out	0x3d, r28	; 61
     312:	4b 01       	movw	r8, r22
     314:	5c 01       	movw	r10, r24
    //allowed prescaler values
    int prescalers[] = {1, 8, 64, 256, 1024};
     316:	8a e0       	ldi	r24, 0x0A	; 10
     318:	e0 e0       	ldi	r30, 0x00	; 0
     31a:	f1 e0       	ldi	r31, 0x01	; 1
     31c:	de 01       	movw	r26, r28
     31e:	11 96       	adiw	r26, 0x01	; 1
     320:	01 90       	ld	r0, Z+
     322:	0d 92       	st	X+, r0
     324:	8a 95       	dec	r24
     326:	e1 f7       	brne	.-8      	; 0x320 <Timer1+0x3a>
    int prescaler;
    //find the best prescaler value
    int i;
    for (i = 0; i < 5; i++){
     328:	00 e0       	ldi	r16, 0x00	; 0
     32a:	10 e0       	ldi	r17, 0x00	; 0
     32c:	28 c0       	rjmp	.+80     	; 0x37e <Timer1+0x98>
        prescaler = prescalers[i];
     32e:	f8 01       	movw	r30, r16
     330:	ee 0f       	add	r30, r30
     332:	ff 1f       	adc	r31, r31
     334:	81 e0       	ldi	r24, 0x01	; 1
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	8c 0f       	add	r24, r28
     33a:	9d 1f       	adc	r25, r29
     33c:	e8 0f       	add	r30, r24
     33e:	f9 1f       	adc	r31, r25
     340:	e0 80       	ld	r14, Z
     342:	f1 80       	ldd	r15, Z+1	; 0x01
        if (us * F_CPU <= 65536 * prescaler){ // found smallest prescaler value
     344:	20 e0       	ldi	r18, 0x00	; 0
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	40 e8       	ldi	r20, 0x80	; 128
     34a:	51 e4       	ldi	r21, 0x41	; 65
     34c:	c5 01       	movw	r24, r10
     34e:	b4 01       	movw	r22, r8
     350:	0e 94 d5 06 	call	0xdaa	; 0xdaa <__mulsf3>
     354:	2b 01       	movw	r4, r22
     356:	3c 01       	movw	r6, r24
     358:	c7 01       	movw	r24, r14
     35a:	0f 2c       	mov	r0, r15
     35c:	00 0c       	add	r0, r0
     35e:	aa 0b       	sbc	r26, r26
     360:	bb 0b       	sbc	r27, r27
     362:	77 27       	eor	r23, r23
     364:	66 27       	eor	r22, r22
     366:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__floatsisf>
     36a:	9b 01       	movw	r18, r22
     36c:	ac 01       	movw	r20, r24
     36e:	c3 01       	movw	r24, r6
     370:	b2 01       	movw	r22, r4
     372:	0e 94 26 05 	call	0xa4c	; 0xa4c <__cmpsf2>
     376:	18 16       	cp	r1, r24
     378:	2c f4       	brge	.+10     	; 0x384 <Timer1+0x9e>
    //allowed prescaler values
    int prescalers[] = {1, 8, 64, 256, 1024};
    int prescaler;
    //find the best prescaler value
    int i;
    for (i = 0; i < 5; i++){
     37a:	0f 5f       	subi	r16, 0xFF	; 255
     37c:	1f 4f       	sbci	r17, 0xFF	; 255
     37e:	05 30       	cpi	r16, 0x05	; 5
     380:	11 05       	cpc	r17, r1
     382:	ac f2       	brlt	.-86     	; 0x32e <Timer1+0x48>
            break;
        }
    }
    
    // Set up Timer1 for ctc mode with prescaler, and enable compare interrupt
	TCNT1 = 0;								// Clear the counter
     384:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     388:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	OCR1A = (us * F_CPU) / prescaler;		// Set the max compare value
     38c:	20 e0       	ldi	r18, 0x00	; 0
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	40 e8       	ldi	r20, 0x80	; 128
     392:	51 e4       	ldi	r21, 0x41	; 65
     394:	c5 01       	movw	r24, r10
     396:	b4 01       	movw	r22, r8
     398:	0e 94 d5 06 	call	0xdaa	; 0xdaa <__mulsf3>
     39c:	4b 01       	movw	r8, r22
     39e:	5c 01       	movw	r10, r24
     3a0:	b7 01       	movw	r22, r14
     3a2:	0f 2c       	mov	r0, r15
     3a4:	00 0c       	add	r0, r0
     3a6:	88 0b       	sbc	r24, r24
     3a8:	99 0b       	sbc	r25, r25
     3aa:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__floatsisf>
     3ae:	9b 01       	movw	r18, r22
     3b0:	ac 01       	movw	r20, r24
     3b2:	c5 01       	movw	r24, r10
     3b4:	b4 01       	movw	r22, r8
     3b6:	0e 94 2b 05 	call	0xa56	; 0xa56 <__divsf3>
     3ba:	0e 94 a4 05 	call	0xb48	; 0xb48 <__fixunssfsi>
     3be:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     3c2:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 = (1 << OCIE1A);					// Enable Timer1 compare interrupt
     3c6:	12 e0       	ldi	r17, 0x02	; 2
     3c8:	10 93 6f 00 	sts	0x006F, r17	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>

	// set prescaler value
	TCCR1B = setPrescalerBits(prescaler);
     3cc:	c7 01       	movw	r24, r14
     3ce:	0e 94 55 01 	call	0x2aa	; 0x2aa <setPrescalerBits>
     3d2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    TIMSK1 = (1 << OCIE1A); 				// Enable Timer1 compare interrupt
    TCCR1B |= (i + 1); 						// set the prescaler value
	*/

    // Set up ECHO_PIN interrupt
    PCICR = (1 << PCIE1); 		// Enable pin change interrupt 1
     3d6:	10 93 68 00 	sts	0x0068, r17	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
    PCMSK1 = (1 << PCINT10); 	// Enable pin change interrupt for ECHO_PIN
     3da:	84 e0       	ldi	r24, 0x04	; 4
     3dc:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7f806c>

    sei(); 						// enable global interrupts
     3e0:	78 94       	sei
}
     3e2:	2a 96       	adiw	r28, 0x0a	; 10
     3e4:	0f b6       	in	r0, 0x3f	; 63
     3e6:	f8 94       	cli
     3e8:	de bf       	out	0x3e, r29	; 62
     3ea:	0f be       	out	0x3f, r0	; 63
     3ec:	cd bf       	out	0x3d, r28	; 61
     3ee:	df 91       	pop	r29
     3f0:	cf 91       	pop	r28
     3f2:	1f 91       	pop	r17
     3f4:	0f 91       	pop	r16
     3f6:	ff 90       	pop	r15
     3f8:	ef 90       	pop	r14
     3fa:	bf 90       	pop	r11
     3fc:	af 90       	pop	r10
     3fe:	9f 90       	pop	r9
     400:	8f 90       	pop	r8
     402:	7f 90       	pop	r7
     404:	6f 90       	pop	r6
     406:	5f 90       	pop	r5
     408:	4f 90       	pop	r4
     40a:	08 95       	ret

0000040c <UART_Puts>:
    //TCNT1 = 0;
    TIFR1 |= (1 << OCF1A);
}

void UART_Puts(const char *str)				// Display a string in the PC Terminal Program
{
     40c:	cf 93       	push	r28
     40e:	df 93       	push	r29
     410:	ec 01       	movw	r28, r24
	while (*str)
     412:	05 c0       	rjmp	.+10     	; 0x41e <UART_Puts+0x12>
	{
		ASCII = *str++;
     414:	21 96       	adiw	r28, 0x01	; 1
     416:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <ASCII>
		UART_Put();
     41a:	0e 94 1b 01 	call	0x236	; 0x236 <UART_Put>
    TIFR1 |= (1 << OCF1A);
}

void UART_Puts(const char *str)				// Display a string in the PC Terminal Program
{
	while (*str)
     41e:	88 81       	ld	r24, Y
     420:	81 11       	cpse	r24, r1
     422:	f8 cf       	rjmp	.-16     	; 0x414 <UART_Puts+0x8>
	{
		ASCII = *str++;
		UART_Put();
	}
}
     424:	df 91       	pop	r29
     426:	cf 91       	pop	r28
     428:	08 95       	ret

0000042a <__vector_4>:

    sei(); 						// enable global interrupts
}

// Timer1 interrupt for ECHO pin
ISR(PCINT1_vect){
     42a:	1f 92       	push	r1
     42c:	0f 92       	push	r0
     42e:	0f b6       	in	r0, 0x3f	; 63
     430:	0f 92       	push	r0
     432:	11 24       	eor	r1, r1
     434:	0f 93       	push	r16
     436:	1f 93       	push	r17
     438:	2f 93       	push	r18
     43a:	3f 93       	push	r19
     43c:	4f 93       	push	r20
     43e:	5f 93       	push	r21
     440:	6f 93       	push	r22
     442:	7f 93       	push	r23
     444:	8f 93       	push	r24
     446:	9f 93       	push	r25
     448:	af 93       	push	r26
     44a:	bf 93       	push	r27
     44c:	ef 93       	push	r30
     44e:	ff 93       	push	r31
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	cd b7       	in	r28, 0x3d	; 61
     456:	de b7       	in	r29, 0x3e	; 62
     458:	c0 58       	subi	r28, 0x80	; 128
     45a:	d1 09       	sbc	r29, r1
     45c:	de bf       	out	0x3e, r29	; 62
     45e:	cd bf       	out	0x3d, r28	; 61
    if (!(PINC & (1 << ECHO_PIN))){	// if ECHO pin is low
     460:	32 99       	sbic	0x06, 2	; 6
     462:	2f c0       	rjmp	.+94     	; 0x4c2 <__vector_4+0x98>
        TCCR1B = 0; // stop the timer
     464:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
        
        // send time elapsed
        char msg[128];
        sprintf(msg, "time elapsed: %d\n", TCNT1 * getPrescaler() / F_CPU);
     468:	00 91 84 00 	lds	r16, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     46c:	10 91 85 00 	lds	r17, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     470:	0e 94 34 01 	call	0x268	; 0x268 <getPrescaler>
     474:	9c 01       	movw	r18, r24
     476:	20 9f       	mul	r18, r16
     478:	c0 01       	movw	r24, r0
     47a:	21 9f       	mul	r18, r17
     47c:	90 0d       	add	r25, r0
     47e:	30 9f       	mul	r19, r16
     480:	90 0d       	add	r25, r0
     482:	11 24       	eor	r1, r1
     484:	92 95       	swap	r25
     486:	82 95       	swap	r24
     488:	8f 70       	andi	r24, 0x0F	; 15
     48a:	89 27       	eor	r24, r25
     48c:	9f 70       	andi	r25, 0x0F	; 15
     48e:	89 27       	eor	r24, r25
     490:	9f 93       	push	r25
     492:	8f 93       	push	r24
     494:	83 e9       	ldi	r24, 0x93	; 147
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	9f 93       	push	r25
     49a:	8f 93       	push	r24
     49c:	8e 01       	movw	r16, r28
     49e:	0f 5f       	subi	r16, 0xFF	; 255
     4a0:	1f 4f       	sbci	r17, 0xFF	; 255
     4a2:	1f 93       	push	r17
     4a4:	0f 93       	push	r16
     4a6:	0e 94 77 07 	call	0xeee	; 0xeee <sprintf>
        UART_Puts(msg);
     4aa:	c8 01       	movw	r24, r16
     4ac:	0e 94 06 02 	call	0x40c	; 0x40c <UART_Puts>
        
        // reset timer and clear flag
        //TCNT1 = 0;
        TIFR1 |= (1 << OCF1A);
     4b0:	86 b3       	in	r24, 0x16	; 22
     4b2:	82 60       	ori	r24, 0x02	; 2
     4b4:	86 bb       	out	0x16, r24	; 22
     4b6:	0f 90       	pop	r0
     4b8:	0f 90       	pop	r0
     4ba:	0f 90       	pop	r0
     4bc:	0f 90       	pop	r0
     4be:	0f 90       	pop	r0
     4c0:	0f 90       	pop	r0
    }
}
     4c2:	c0 58       	subi	r28, 0x80	; 128
     4c4:	df 4f       	sbci	r29, 0xFF	; 255
     4c6:	0f b6       	in	r0, 0x3f	; 63
     4c8:	f8 94       	cli
     4ca:	de bf       	out	0x3e, r29	; 62
     4cc:	0f be       	out	0x3f, r0	; 63
     4ce:	cd bf       	out	0x3d, r28	; 61
     4d0:	df 91       	pop	r29
     4d2:	cf 91       	pop	r28
     4d4:	ff 91       	pop	r31
     4d6:	ef 91       	pop	r30
     4d8:	bf 91       	pop	r27
     4da:	af 91       	pop	r26
     4dc:	9f 91       	pop	r25
     4de:	8f 91       	pop	r24
     4e0:	7f 91       	pop	r23
     4e2:	6f 91       	pop	r22
     4e4:	5f 91       	pop	r21
     4e6:	4f 91       	pop	r20
     4e8:	3f 91       	pop	r19
     4ea:	2f 91       	pop	r18
     4ec:	1f 91       	pop	r17
     4ee:	0f 91       	pop	r16
     4f0:	0f 90       	pop	r0
     4f2:	0f be       	out	0x3f, r0	; 63
     4f4:	0f 90       	pop	r0
     4f6:	1f 90       	pop	r1
     4f8:	18 95       	reti

000004fa <__vector_11>:

// Timer1 interrupt for timeout
ISR(TIMER1_COMPA_vect){
     4fa:	1f 92       	push	r1
     4fc:	0f 92       	push	r0
     4fe:	0f b6       	in	r0, 0x3f	; 63
     500:	0f 92       	push	r0
     502:	11 24       	eor	r1, r1
     504:	0f 93       	push	r16
     506:	1f 93       	push	r17
     508:	2f 93       	push	r18
     50a:	3f 93       	push	r19
     50c:	4f 93       	push	r20
     50e:	5f 93       	push	r21
     510:	6f 93       	push	r22
     512:	7f 93       	push	r23
     514:	8f 93       	push	r24
     516:	9f 93       	push	r25
     518:	af 93       	push	r26
     51a:	bf 93       	push	r27
     51c:	ef 93       	push	r30
     51e:	ff 93       	push	r31
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
     524:	cd b7       	in	r28, 0x3d	; 61
     526:	de b7       	in	r29, 0x3e	; 62
     528:	c0 58       	subi	r28, 0x80	; 128
     52a:	d1 09       	sbc	r29, r1
     52c:	de bf       	out	0x3e, r29	; 62
     52e:	cd bf       	out	0x3d, r28	; 61
	TCCR1B &= ~(1 << CS10); // stop the timer
     530:	e1 e8       	ldi	r30, 0x81	; 129
     532:	f0 e0       	ldi	r31, 0x00	; 0
     534:	80 81       	ld	r24, Z
     536:	8e 7f       	andi	r24, 0xFE	; 254
     538:	80 83       	st	Z, r24
	// reset timer and clear flag
	TCNT1 = 0;
     53a:	e4 e8       	ldi	r30, 0x84	; 132
     53c:	f0 e0       	ldi	r31, 0x00	; 0
     53e:	11 82       	std	Z+1, r1	; 0x01
     540:	10 82       	st	Z, r1
	TIFR1 |= (1 << OCF1A);
     542:	86 b3       	in	r24, 0x16	; 22
     544:	82 60       	ori	r24, 0x02	; 2
     546:	86 bb       	out	0x16, r24	; 22

	// send timeout message
	char msg[128];
	sprintf(msg, "timeout, time elapsed: %d\n", TCNT1 * getPrescaler() / F_CPU);
     548:	00 81       	ld	r16, Z
     54a:	11 81       	ldd	r17, Z+1	; 0x01
     54c:	0e 94 34 01 	call	0x268	; 0x268 <getPrescaler>
     550:	9c 01       	movw	r18, r24
     552:	20 9f       	mul	r18, r16
     554:	c0 01       	movw	r24, r0
     556:	21 9f       	mul	r18, r17
     558:	90 0d       	add	r25, r0
     55a:	30 9f       	mul	r19, r16
     55c:	90 0d       	add	r25, r0
     55e:	11 24       	eor	r1, r1
     560:	92 95       	swap	r25
     562:	82 95       	swap	r24
     564:	8f 70       	andi	r24, 0x0F	; 15
     566:	89 27       	eor	r24, r25
     568:	9f 70       	andi	r25, 0x0F	; 15
     56a:	89 27       	eor	r24, r25
     56c:	9f 93       	push	r25
     56e:	8f 93       	push	r24
     570:	8a e8       	ldi	r24, 0x8A	; 138
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	9f 93       	push	r25
     576:	8f 93       	push	r24
     578:	8e 01       	movw	r16, r28
     57a:	0f 5f       	subi	r16, 0xFF	; 255
     57c:	1f 4f       	sbci	r17, 0xFF	; 255
     57e:	1f 93       	push	r17
     580:	0f 93       	push	r16
     582:	0e 94 77 07 	call	0xeee	; 0xeee <sprintf>
	UART_Puts(msg);
     586:	c8 01       	movw	r24, r16
     588:	0e 94 06 02 	call	0x40c	; 0x40c <UART_Puts>
}
     58c:	0f 90       	pop	r0
     58e:	0f 90       	pop	r0
     590:	0f 90       	pop	r0
     592:	0f 90       	pop	r0
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	c0 58       	subi	r28, 0x80	; 128
     59a:	df 4f       	sbci	r29, 0xFF	; 255
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	f8 94       	cli
     5a0:	de bf       	out	0x3e, r29	; 62
     5a2:	0f be       	out	0x3f, r0	; 63
     5a4:	cd bf       	out	0x3d, r28	; 61
     5a6:	df 91       	pop	r29
     5a8:	cf 91       	pop	r28
     5aa:	ff 91       	pop	r31
     5ac:	ef 91       	pop	r30
     5ae:	bf 91       	pop	r27
     5b0:	af 91       	pop	r26
     5b2:	9f 91       	pop	r25
     5b4:	8f 91       	pop	r24
     5b6:	7f 91       	pop	r23
     5b8:	6f 91       	pop	r22
     5ba:	5f 91       	pop	r21
     5bc:	4f 91       	pop	r20
     5be:	3f 91       	pop	r19
     5c0:	2f 91       	pop	r18
     5c2:	1f 91       	pop	r17
     5c4:	0f 91       	pop	r16
     5c6:	0f 90       	pop	r0
     5c8:	0f be       	out	0x3f, r0	; 63
     5ca:	0f 90       	pop	r0
     5cc:	1f 90       	pop	r1
     5ce:	18 95       	reti

000005d0 <__vector_13>:

// Timer1 overflow interrupt
ISR(TIMER1_OVF_vect) 
{	
     5d0:	1f 92       	push	r1
     5d2:	0f 92       	push	r0
     5d4:	0f b6       	in	r0, 0x3f	; 63
     5d6:	0f 92       	push	r0
     5d8:	11 24       	eor	r1, r1
     5da:	2f 93       	push	r18
     5dc:	3f 93       	push	r19
     5de:	4f 93       	push	r20
     5e0:	5f 93       	push	r21
     5e2:	6f 93       	push	r22
     5e4:	7f 93       	push	r23
     5e6:	8f 93       	push	r24
     5e8:	9f 93       	push	r25
     5ea:	af 93       	push	r26
     5ec:	bf 93       	push	r27
     5ee:	ef 93       	push	r30
     5f0:	ff 93       	push	r31
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	cd b7       	in	r28, 0x3d	; 61
     5f8:	de b7       	in	r29, 0x3e	; 62
     5fa:	c0 58       	subi	r28, 0x80	; 128
     5fc:	d1 09       	sbc	r29, r1
     5fe:	de bf       	out	0x3e, r29	; 62
     600:	cd bf       	out	0x3d, r28	; 61
    TCCR1B = 0; // stop the timer
     602:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    
    // send overflow message 
    char msg[128] = "Timer1 overflowed\n";
     606:	83 e1       	ldi	r24, 0x13	; 19
     608:	ea e0       	ldi	r30, 0x0A	; 10
     60a:	f1 e0       	ldi	r31, 0x01	; 1
     60c:	de 01       	movw	r26, r28
     60e:	11 96       	adiw	r26, 0x01	; 1
     610:	01 90       	ld	r0, Z+
     612:	0d 92       	st	X+, r0
     614:	8a 95       	dec	r24
     616:	e1 f7       	brne	.-8      	; 0x610 <__vector_13+0x40>
     618:	fe 01       	movw	r30, r28
     61a:	74 96       	adiw	r30, 0x14	; 20
     61c:	8d e6       	ldi	r24, 0x6D	; 109
     61e:	df 01       	movw	r26, r30
     620:	1d 92       	st	X+, r1
     622:	8a 95       	dec	r24
     624:	e9 f7       	brne	.-6      	; 0x620 <__vector_13+0x50>
    UART_Puts(msg);
     626:	ce 01       	movw	r24, r28
     628:	01 96       	adiw	r24, 0x01	; 1
     62a:	0e 94 06 02 	call	0x40c	; 0x40c <UART_Puts>
    
    // reset timer and clear flag
    //TCNT1 = 0;
    TIFR1 |= (1 << OCF1A);
     62e:	86 b3       	in	r24, 0x16	; 22
     630:	82 60       	ori	r24, 0x02	; 2
     632:	86 bb       	out	0x16, r24	; 22
}
     634:	c0 58       	subi	r28, 0x80	; 128
     636:	df 4f       	sbci	r29, 0xFF	; 255
     638:	0f b6       	in	r0, 0x3f	; 63
     63a:	f8 94       	cli
     63c:	de bf       	out	0x3e, r29	; 62
     63e:	0f be       	out	0x3f, r0	; 63
     640:	cd bf       	out	0x3d, r28	; 61
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	ff 91       	pop	r31
     648:	ef 91       	pop	r30
     64a:	bf 91       	pop	r27
     64c:	af 91       	pop	r26
     64e:	9f 91       	pop	r25
     650:	8f 91       	pop	r24
     652:	7f 91       	pop	r23
     654:	6f 91       	pop	r22
     656:	5f 91       	pop	r21
     658:	4f 91       	pop	r20
     65a:	3f 91       	pop	r19
     65c:	2f 91       	pop	r18
     65e:	0f 90       	pop	r0
     660:	0f be       	out	0x3f, r0	; 63
     662:	0f 90       	pop	r0
     664:	1f 90       	pop	r1
     666:	18 95       	reti

00000668 <LCD_Puts>:
		UART_Put();
	}
}

void LCD_Puts(const char *str)				// Display a string on the LCD Module
{
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
     66c:	ec 01       	movw	r28, r24
	while (*str)
     66e:	05 c0       	rjmp	.+10     	; 0x67a <LCD_Puts+0x12>
	{
		DATA = *str++;
     670:	21 96       	adiw	r28, 0x01	; 1
     672:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <__data_end>
		LCD_Write_Data();
     676:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCD_Write_Data>
	}
}

void LCD_Puts(const char *str)				// Display a string on the LCD Module
{
	while (*str)
     67a:	88 81       	ld	r24, Y
     67c:	81 11       	cpse	r24, r1
     67e:	f8 cf       	rjmp	.-16     	; 0x670 <LCD_Puts+0x8>
	{
		DATA = *str++;
		LCD_Write_Data();
	}
}
     680:	df 91       	pop	r29
     682:	cf 91       	pop	r28
     684:	08 95       	ret

00000686 <LCD>:

void LCD(void)								// LCD Display
{
     686:	cf 93       	push	r28
     688:	df 93       	push	r29
	int x = 1;
	DATA = 0x34;					
     68a:	84 e3       	ldi	r24, 0x34	; 52
     68c:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <__data_end>
	LCD_Write_Command();
     690:	0e 94 ca 00 	call	0x194	; 0x194 <LCD_Write_Command>
	DATA = 0x08;					
     694:	88 e0       	ldi	r24, 0x08	; 8
     696:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <__data_end>
	LCD_Write_Command();
     69a:	0e 94 ca 00 	call	0x194	; 0x194 <LCD_Write_Command>
	DATA = 0x02;						
     69e:	82 e0       	ldi	r24, 0x02	; 2
     6a0:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <__data_end>
	LCD_Write_Command();
     6a4:	0e 94 ca 00 	call	0x194	; 0x194 <LCD_Write_Command>
	DATA = 0x06;						
     6a8:	86 e0       	ldi	r24, 0x06	; 6
     6aa:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <__data_end>
	LCD_Write_Command();
     6ae:	0e 94 ca 00 	call	0x194	; 0x194 <LCD_Write_Command>
	DATA = 0x0f;						
     6b2:	8f e0       	ldi	r24, 0x0F	; 15
     6b4:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <__data_end>
	LCD_Write_Command();
     6b8:	0e 94 ca 00 	call	0x194	; 0x194 <LCD_Write_Command>
	}
}

void LCD(void)								// LCD Display
{
	int x = 1;
     6bc:	c1 e0       	ldi	r28, 0x01	; 1
     6be:	d0 e0       	ldi	r29, 0x00	; 0
	DATA = 0x06;						
	LCD_Write_Command();
	DATA = 0x0f;						
	LCD_Write_Command();

	while (x != 0){
     6c0:	0b c0       	rjmp	.+22     	; 0x6d8 <LCD+0x52>
		
		DATA = 0x18;						//shift complete to the left
     6c2:	88 e1       	ldi	r24, 0x18	; 24
     6c4:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <__data_end>
		LCD_Write_Command();
     6c8:	0e 94 ca 00 	call	0x194	; 0x194 <LCD_Write_Command>
		LCD_Puts("Hello");
     6cc:	85 ea       	ldi	r24, 0xA5	; 165
     6ce:	91 e0       	ldi	r25, 0x01	; 1
     6d0:	0e 94 34 03 	call	0x668	; 0x668 <LCD_Puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6d4:	00 00       	nop
		_delay_us(1000);
		x--;
     6d6:	21 97       	sbiw	r28, 0x01	; 1
	DATA = 0x06;						
	LCD_Write_Command();
	DATA = 0x0f;						
	LCD_Write_Command();

	while (x != 0){
     6d8:	20 97       	sbiw	r28, 0x00	; 0
     6da:	99 f7       	brne	.-26     	; 0x6c2 <LCD+0x3c>
		LCD_Write_Command();
		LCD_Puts("Hello");
		_delay_us(1000);
		x--;
	}
}
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	08 95       	ret

000006e2 <calculateTemperature>:

float calculateTemperature(int adcValue)	// helper function to calculate temperature from adc
{
     6e2:	8f 92       	push	r8
     6e4:	9f 92       	push	r9
     6e6:	af 92       	push	r10
     6e8:	bf 92       	push	r11
     6ea:	cf 92       	push	r12
     6ec:	df 92       	push	r13
     6ee:	ef 92       	push	r14
     6f0:	ff 92       	push	r15
	// ADC reference voltage and resolution
	float Vref = 3.3;     // ADC reference voltage
	int resolution = 1024;  // ADC resolution (10 bits)

	// Convert ADC value to voltage
	float voltage = (adcValue * Vref) / (float)resolution;
     6f2:	bc 01       	movw	r22, r24
     6f4:	99 0f       	add	r25, r25
     6f6:	88 0b       	sbc	r24, r24
     6f8:	99 0b       	sbc	r25, r25
     6fa:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__floatsisf>
     6fe:	23 e3       	ldi	r18, 0x33	; 51
     700:	33 e3       	ldi	r19, 0x33	; 51
     702:	43 e5       	ldi	r20, 0x53	; 83
     704:	50 e4       	ldi	r21, 0x40	; 64
     706:	0e 94 d5 06 	call	0xdaa	; 0xdaa <__mulsf3>
     70a:	20 e0       	ldi	r18, 0x00	; 0
     70c:	30 e0       	ldi	r19, 0x00	; 0
     70e:	40 e8       	ldi	r20, 0x80	; 128
     710:	5a e3       	ldi	r21, 0x3A	; 58
     712:	0e 94 d5 06 	call	0xdaa	; 0xdaa <__mulsf3>
     716:	6b 01       	movw	r12, r22
     718:	7c 01       	movw	r14, r24

	// Calculate thermistor resistance
	float resistance = R0 * voltage / (Vref - voltage);
     71a:	20 e0       	ldi	r18, 0x00	; 0
     71c:	30 e4       	ldi	r19, 0x40	; 64
     71e:	4c e1       	ldi	r20, 0x1C	; 28
     720:	56 e4       	ldi	r21, 0x46	; 70
     722:	0e 94 d5 06 	call	0xdaa	; 0xdaa <__mulsf3>
     726:	4b 01       	movw	r8, r22
     728:	5c 01       	movw	r10, r24
     72a:	a7 01       	movw	r20, r14
     72c:	96 01       	movw	r18, r12
     72e:	63 e3       	ldi	r22, 0x33	; 51
     730:	73 e3       	ldi	r23, 0x33	; 51
     732:	83 e5       	ldi	r24, 0x53	; 83
     734:	90 e4       	ldi	r25, 0x40	; 64
     736:	0e 94 b9 04 	call	0x972	; 0x972 <__subsf3>
     73a:	9b 01       	movw	r18, r22
     73c:	ac 01       	movw	r20, r24
     73e:	c5 01       	movw	r24, r10
     740:	b4 01       	movw	r22, r8
     742:	0e 94 2b 05 	call	0xa56	; 0xa56 <__divsf3>
	
	// Calculate temperature in Kelvin using the Steinhart-Hart equation
	float tempKelvin = 1.0 / ((log(resistance / R0) / B) + (1.0 / (T0 + 273.15)));
     746:	20 e0       	ldi	r18, 0x00	; 0
     748:	30 e4       	ldi	r19, 0x40	; 64
     74a:	4c e1       	ldi	r20, 0x1C	; 28
     74c:	56 e4       	ldi	r21, 0x46	; 70
     74e:	0e 94 2b 05 	call	0xa56	; 0xa56 <__divsf3>
     752:	0e 94 8d 06 	call	0xd1a	; 0xd1a <log>
     756:	20 e0       	ldi	r18, 0x00	; 0
     758:	30 ee       	ldi	r19, 0xE0	; 224
     75a:	46 e7       	ldi	r20, 0x76	; 118
     75c:	55 e4       	ldi	r21, 0x45	; 69
     75e:	0e 94 2b 05 	call	0xa56	; 0xa56 <__divsf3>
     762:	2f e0       	ldi	r18, 0x0F	; 15
     764:	3f ec       	ldi	r19, 0xCF	; 207
     766:	4b e5       	ldi	r20, 0x5B	; 91
     768:	5b e3       	ldi	r21, 0x3B	; 59
     76a:	0e 94 ba 04 	call	0x974	; 0x974 <__addsf3>
     76e:	9b 01       	movw	r18, r22
     770:	ac 01       	movw	r20, r24
     772:	60 e0       	ldi	r22, 0x00	; 0
     774:	70 e0       	ldi	r23, 0x00	; 0
     776:	80 e8       	ldi	r24, 0x80	; 128
     778:	9f e3       	ldi	r25, 0x3F	; 63
     77a:	0e 94 2b 05 	call	0xa56	; 0xa56 <__divsf3>
	float temperature = tempKelvin - 273.15;
     77e:	23 e3       	ldi	r18, 0x33	; 51
     780:	33 e9       	ldi	r19, 0x93	; 147
     782:	48 e8       	ldi	r20, 0x88	; 136
     784:	53 e4       	ldi	r21, 0x43	; 67
     786:	0e 94 b9 04 	call	0x972	; 0x972 <__subsf3>
	
	return temperature;
}
     78a:	ff 90       	pop	r15
     78c:	ef 90       	pop	r14
     78e:	df 90       	pop	r13
     790:	cf 90       	pop	r12
     792:	bf 90       	pop	r11
     794:	af 90       	pop	r10
     796:	9f 90       	pop	r9
     798:	8f 90       	pop	r8
     79a:	08 95       	ret

0000079c <ADConverter>:

void ADConverter(void)								// take in adc value and convert to temp
{	
     79c:	8f 92       	push	r8
     79e:	9f 92       	push	r9
     7a0:	af 92       	push	r10
     7a2:	bf 92       	push	r11
     7a4:	cf 92       	push	r12
     7a6:	df 92       	push	r13
     7a8:	ef 92       	push	r14
     7aa:	ff 92       	push	r15
	int adcValue = (HADC << 8) | LADC;
     7ac:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <HADC>
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	98 2f       	mov	r25, r24
     7b4:	88 27       	eor	r24, r24
     7b6:	20 91 60 02 	lds	r18, 0x0260	; 0x800260 <LADC>
	
	float temperature_Celsius = calculateTemperature(adcValue);
     7ba:	82 2b       	or	r24, r18
     7bc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <calculateTemperature>
     7c0:	4b 01       	movw	r8, r22
     7c2:	5c 01       	movw	r10, r24
	unsigned int temp_integer = (int)temperature_Celsius;
     7c4:	0e 94 9d 05 	call	0xb3a	; 0xb3a <__fixsfsi>
     7c8:	6b 01       	movw	r12, r22
     7ca:	7c 01       	movw	r14, r24
	int temp_fractional = (int)((temperature_Celsius - temp_integer)*100);
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	0e 94 d3 05 	call	0xba6	; 0xba6 <__floatunsisf>
     7d4:	9b 01       	movw	r18, r22
     7d6:	ac 01       	movw	r20, r24
     7d8:	c5 01       	movw	r24, r10
     7da:	b4 01       	movw	r22, r8
     7dc:	0e 94 b9 04 	call	0x972	; 0x972 <__subsf3>
     7e0:	20 e0       	ldi	r18, 0x00	; 0
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	48 ec       	ldi	r20, 0xC8	; 200
     7e6:	52 e4       	ldi	r21, 0x42	; 66
     7e8:	0e 94 d5 06 	call	0xdaa	; 0xdaa <__mulsf3>
     7ec:	0e 94 9d 05 	call	0xb3a	; 0xb3a <__fixsfsi>
	
	sprintf(volts, "%d.%d degrees Celsius\n", temp_integer, temp_fractional);
     7f0:	7f 93       	push	r23
     7f2:	6f 93       	push	r22
     7f4:	df 92       	push	r13
     7f6:	cf 92       	push	r12
     7f8:	8b ea       	ldi	r24, 0xAB	; 171
     7fa:	91 e0       	ldi	r25, 0x01	; 1
     7fc:	9f 93       	push	r25
     7fe:	8f 93       	push	r24
     800:	8b e5       	ldi	r24, 0x5B	; 91
     802:	92 e0       	ldi	r25, 0x02	; 2
     804:	9f 93       	push	r25
     806:	8f 93       	push	r24
     808:	0e 94 77 07 	call	0xeee	; 0xeee <sprintf>
	UART_Puts(volts);
     80c:	8b e5       	ldi	r24, 0x5B	; 91
     80e:	92 e0       	ldi	r25, 0x02	; 2
     810:	0e 94 06 02 	call	0x40c	; 0x40c <UART_Puts>
}
     814:	8d b7       	in	r24, 0x3d	; 61
     816:	9e b7       	in	r25, 0x3e	; 62
     818:	08 96       	adiw	r24, 0x08	; 8
     81a:	0f b6       	in	r0, 0x3f	; 63
     81c:	f8 94       	cli
     81e:	9e bf       	out	0x3e, r25	; 62
     820:	0f be       	out	0x3f, r0	; 63
     822:	8d bf       	out	0x3d, r24	; 61
     824:	ff 90       	pop	r15
     826:	ef 90       	pop	r14
     828:	df 90       	pop	r13
     82a:	cf 90       	pop	r12
     82c:	bf 90       	pop	r11
     82e:	af 90       	pop	r10
     830:	9f 90       	pop	r9
     832:	8f 90       	pop	r8
     834:	08 95       	ret

00000836 <pingDistance>:
	DDRC &= ~(1 << ECHO_PIN);	// Set PC2 as input
}
*/

int pingDistance(void)						// helper function to time trigger ping and return distance
{
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
	UART_Puts("starting trigger ping\n");
     83a:	82 ec       	ldi	r24, 0xC2	; 194
     83c:	91 e0       	ldi	r25, 0x01	; 1
     83e:	0e 94 06 02 	call	0x40c	; 0x40c <UART_Puts>
	// Send a 10us pulse on the Trig pin
	PORTC |= (1 << TRIGGER_PIN);
     842:	88 b1       	in	r24, 0x08	; 8
     844:	82 60       	ori	r24, 0x02	; 2
     846:	88 b9       	out	0x08, r24	; 8
     848:	00 00       	nop
	_delay_us(10);
	PORTC &= ~(1 << TRIGGER_PIN);
     84a:	88 b1       	in	r24, 0x08	; 8
     84c:	8d 7f       	andi	r24, 0xFD	; 253
     84e:	88 b9       	out	0x08, r24	; 8

	// Measure the time the Echo pin stays high
	Timer1(1000000); // timeout value
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	74 e2       	ldi	r23, 0x24	; 36
     854:	84 e7       	ldi	r24, 0x74	; 116
     856:	99 e4       	ldi	r25, 0x49	; 73
     858:	0e 94 73 01 	call	0x2e6	; 0x2e6 <Timer1>
	

	// Calculate the distance using the speed of sound (34300 cm/s), time measured and accounting for 2 trips
	float time = (TCNT1 * getPrescaler()) / F_CPU; // distance in cm
     85c:	c0 91 84 00 	lds	r28, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     860:	d0 91 85 00 	lds	r29, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     864:	0e 94 34 01 	call	0x268	; 0x268 <getPrescaler>
     868:	9c 01       	movw	r18, r24
     86a:	2c 9f       	mul	r18, r28
     86c:	c0 01       	movw	r24, r0
     86e:	2d 9f       	mul	r18, r29
     870:	90 0d       	add	r25, r0
     872:	3c 9f       	mul	r19, r28
     874:	90 0d       	add	r25, r0
     876:	11 24       	eor	r1, r1
     878:	bc 01       	movw	r22, r24
     87a:	72 95       	swap	r23
     87c:	62 95       	swap	r22
     87e:	6f 70       	andi	r22, 0x0F	; 15
     880:	67 27       	eor	r22, r23
     882:	7f 70       	andi	r23, 0x0F	; 15
     884:	67 27       	eor	r22, r23
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	0e 94 d3 05 	call	0xba6	; 0xba6 <__floatunsisf>
	float distance = (time * 34300) / 2;
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	3c ef       	ldi	r19, 0xFC	; 252
     892:	45 e0       	ldi	r20, 0x05	; 5
     894:	57 e4       	ldi	r21, 0x47	; 71
     896:	0e 94 d5 06 	call	0xdaa	; 0xdaa <__mulsf3>
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	40 e0       	ldi	r20, 0x00	; 0
     8a0:	5f e3       	ldi	r21, 0x3F	; 63
     8a2:	0e 94 d5 06 	call	0xdaa	; 0xdaa <__mulsf3>
	
	return distance;
     8a6:	0e 94 9d 05 	call	0xb3a	; 0xb3a <__fixsfsi>
}
     8aa:	cb 01       	movw	r24, r22
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	08 95       	ret

000008b2 <USS>:

void USS(void){
     8b2:	0f 93       	push	r16
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	cd b7       	in	r28, 0x3d	; 61
     8bc:	de b7       	in	r29, 0x3e	; 62
     8be:	2a 97       	sbiw	r28, 0x0a	; 10
     8c0:	0f b6       	in	r0, 0x3f	; 63
     8c2:	f8 94       	cli
     8c4:	de bf       	out	0x3e, r29	; 62
     8c6:	0f be       	out	0x3f, r0	; 63
     8c8:	cd bf       	out	0x3d, r28	; 61
	int dist = pingDistance();
     8ca:	0e 94 1b 04 	call	0x836	; 0x836 <pingDistance>
	char distAsStr[10]; // buffer to store distance as string

	sprintf(distAsStr, "distance = %d cm\n", dist); // actually convert to string
     8ce:	9f 93       	push	r25
     8d0:	8f 93       	push	r24
     8d2:	89 ed       	ldi	r24, 0xD9	; 217
     8d4:	91 e0       	ldi	r25, 0x01	; 1
     8d6:	9f 93       	push	r25
     8d8:	8f 93       	push	r24
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5f       	subi	r16, 0xFF	; 255
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	1f 93       	push	r17
     8e2:	0f 93       	push	r16
     8e4:	0e 94 77 07 	call	0xeee	; 0xeee <sprintf>
	
	//display to both UART and LCD
	UART_Puts(distAsStr);
     8e8:	c8 01       	movw	r24, r16
     8ea:	0e 94 06 02 	call	0x40c	; 0x40c <UART_Puts>
	LCD_Puts(distAsStr);
     8ee:	c8 01       	movw	r24, r16
     8f0:	0e 94 34 03 	call	0x668	; 0x668 <LCD_Puts>
	
	return;
     8f4:	0f 90       	pop	r0
     8f6:	0f 90       	pop	r0
     8f8:	0f 90       	pop	r0
     8fa:	0f 90       	pop	r0
     8fc:	0f 90       	pop	r0
     8fe:	0f 90       	pop	r0
}
     900:	2a 96       	adiw	r28, 0x0a	; 10
     902:	0f b6       	in	r0, 0x3f	; 63
     904:	f8 94       	cli
     906:	de bf       	out	0x3e, r29	; 62
     908:	0f be       	out	0x3f, r0	; 63
     90a:	cd bf       	out	0x3d, r28	; 61
     90c:	df 91       	pop	r29
     90e:	cf 91       	pop	r28
     910:	1f 91       	pop	r17
     912:	0f 91       	pop	r16
     914:	08 95       	ret

00000916 <Banner>:

void Banner(void)							// Display the Banner
{
	LCD_Puts(BannerMSG);
     916:	8b ee       	ldi	r24, 0xEB	; 235
     918:	91 e0       	ldi	r25, 0x01	; 1
     91a:	0e 94 34 03 	call	0x668	; 0x668 <LCD_Puts>
     91e:	08 95       	ret

00000920 <Command>:
	return;
}

void Command(void)							// command interpreter
{
	UART_Puts(MenuMSG);
     920:	85 e3       	ldi	r24, 0x35	; 53
     922:	92 e0       	ldi	r25, 0x02	; 2
     924:	0e 94 06 02 	call	0x40c	; 0x40c <UART_Puts>
	ASCII = '\0';
     928:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <ASCII>
	while (ASCII == '\0')
     92c:	02 c0       	rjmp	.+4      	; 0x932 <Command+0x12>
	{
		UART_Get();
     92e:	0e 94 12 01 	call	0x224	; 0x224 <UART_Get>

void Command(void)							// command interpreter
{
	UART_Puts(MenuMSG);
	ASCII = '\0';
	while (ASCII == '\0')
     932:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <ASCII>
     936:	88 23       	and	r24, r24
     938:	d1 f3       	breq	.-12     	; 0x92e <Command+0xe>
	{
		UART_Get();
	}
	switch (ASCII)
     93a:	8c 36       	cpi	r24, 0x6C	; 108
     93c:	29 f0       	breq	.+10     	; 0x948 <Command+0x28>
     93e:	80 37       	cpi	r24, 0x70	; 112
     940:	49 f0       	breq	.+18     	; 0x954 <Command+0x34>
     942:	81 36       	cpi	r24, 0x61	; 97
     944:	51 f4       	brne	.+20     	; 0x95a <Command+0x3a>
     946:	03 c0       	rjmp	.+6      	; 0x94e <Command+0x2e>
	{
		case 'L' | 'l': LCD();
     948:	0e 94 43 03 	call	0x686	; 0x686 <LCD>
		break;
     94c:	08 95       	ret
		case 'A' | 'a': ADConverter();
     94e:	0e 94 ce 03 	call	0x79c	; 0x79c <ADConverter>
		break;
     952:	08 95       	ret
		case 'P' | 'p': USS();
     954:	0e 94 59 04 	call	0x8b2	; 0x8b2 <USS>
		break;
     958:	08 95       	ret
		default: UART_Puts(InvalidCommandMSG);
     95a:	86 e1       	ldi	r24, 0x16	; 22
     95c:	92 e0       	ldi	r25, 0x02	; 2
     95e:	0e 94 06 02 	call	0x40c	; 0x40c <UART_Puts>
     962:	08 95       	ret

00000964 <main>:
}


int main(void)
{
	Mega328P_Init();
     964:	0e 94 a6 00 	call	0x14c	; 0x14c <Mega328P_Init>
	Banner();
     968:	0e 94 8b 04 	call	0x916	; 0x916 <Banner>
	
	while (1){
		Command();
     96c:	0e 94 90 04 	call	0x920	; 0x920 <Command>
     970:	fd cf       	rjmp	.-6      	; 0x96c <main+0x8>

00000972 <__subsf3>:
     972:	50 58       	subi	r21, 0x80	; 128

00000974 <__addsf3>:
     974:	bb 27       	eor	r27, r27
     976:	aa 27       	eor	r26, r26
     978:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__addsf3x>
     97c:	0c 94 4b 06 	jmp	0xc96	; 0xc96 <__fp_round>
     980:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__fp_pscA>
     984:	38 f0       	brcs	.+14     	; 0x994 <__addsf3+0x20>
     986:	0e 94 44 06 	call	0xc88	; 0xc88 <__fp_pscB>
     98a:	20 f0       	brcs	.+8      	; 0x994 <__addsf3+0x20>
     98c:	39 f4       	brne	.+14     	; 0x99c <__addsf3+0x28>
     98e:	9f 3f       	cpi	r25, 0xFF	; 255
     990:	19 f4       	brne	.+6      	; 0x998 <__addsf3+0x24>
     992:	26 f4       	brtc	.+8      	; 0x99c <__addsf3+0x28>
     994:	0c 94 3a 06 	jmp	0xc74	; 0xc74 <__fp_nan>
     998:	0e f4       	brtc	.+2      	; 0x99c <__addsf3+0x28>
     99a:	e0 95       	com	r30
     99c:	e7 fb       	bst	r30, 7
     99e:	0c 94 34 06 	jmp	0xc68	; 0xc68 <__fp_inf>

000009a2 <__addsf3x>:
     9a2:	e9 2f       	mov	r30, r25
     9a4:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__fp_split3>
     9a8:	58 f3       	brcs	.-42     	; 0x980 <__addsf3+0xc>
     9aa:	ba 17       	cp	r27, r26
     9ac:	62 07       	cpc	r22, r18
     9ae:	73 07       	cpc	r23, r19
     9b0:	84 07       	cpc	r24, r20
     9b2:	95 07       	cpc	r25, r21
     9b4:	20 f0       	brcs	.+8      	; 0x9be <__addsf3x+0x1c>
     9b6:	79 f4       	brne	.+30     	; 0x9d6 <__addsf3x+0x34>
     9b8:	a6 f5       	brtc	.+104    	; 0xa22 <__addsf3x+0x80>
     9ba:	0c 94 7e 06 	jmp	0xcfc	; 0xcfc <__fp_zero>
     9be:	0e f4       	brtc	.+2      	; 0x9c2 <__addsf3x+0x20>
     9c0:	e0 95       	com	r30
     9c2:	0b 2e       	mov	r0, r27
     9c4:	ba 2f       	mov	r27, r26
     9c6:	a0 2d       	mov	r26, r0
     9c8:	0b 01       	movw	r0, r22
     9ca:	b9 01       	movw	r22, r18
     9cc:	90 01       	movw	r18, r0
     9ce:	0c 01       	movw	r0, r24
     9d0:	ca 01       	movw	r24, r20
     9d2:	a0 01       	movw	r20, r0
     9d4:	11 24       	eor	r1, r1
     9d6:	ff 27       	eor	r31, r31
     9d8:	59 1b       	sub	r21, r25
     9da:	99 f0       	breq	.+38     	; 0xa02 <__addsf3x+0x60>
     9dc:	59 3f       	cpi	r21, 0xF9	; 249
     9de:	50 f4       	brcc	.+20     	; 0x9f4 <__addsf3x+0x52>
     9e0:	50 3e       	cpi	r21, 0xE0	; 224
     9e2:	68 f1       	brcs	.+90     	; 0xa3e <__addsf3x+0x9c>
     9e4:	1a 16       	cp	r1, r26
     9e6:	f0 40       	sbci	r31, 0x00	; 0
     9e8:	a2 2f       	mov	r26, r18
     9ea:	23 2f       	mov	r18, r19
     9ec:	34 2f       	mov	r19, r20
     9ee:	44 27       	eor	r20, r20
     9f0:	58 5f       	subi	r21, 0xF8	; 248
     9f2:	f3 cf       	rjmp	.-26     	; 0x9da <__addsf3x+0x38>
     9f4:	46 95       	lsr	r20
     9f6:	37 95       	ror	r19
     9f8:	27 95       	ror	r18
     9fa:	a7 95       	ror	r26
     9fc:	f0 40       	sbci	r31, 0x00	; 0
     9fe:	53 95       	inc	r21
     a00:	c9 f7       	brne	.-14     	; 0x9f4 <__addsf3x+0x52>
     a02:	7e f4       	brtc	.+30     	; 0xa22 <__addsf3x+0x80>
     a04:	1f 16       	cp	r1, r31
     a06:	ba 0b       	sbc	r27, r26
     a08:	62 0b       	sbc	r22, r18
     a0a:	73 0b       	sbc	r23, r19
     a0c:	84 0b       	sbc	r24, r20
     a0e:	ba f0       	brmi	.+46     	; 0xa3e <__addsf3x+0x9c>
     a10:	91 50       	subi	r25, 0x01	; 1
     a12:	a1 f0       	breq	.+40     	; 0xa3c <__addsf3x+0x9a>
     a14:	ff 0f       	add	r31, r31
     a16:	bb 1f       	adc	r27, r27
     a18:	66 1f       	adc	r22, r22
     a1a:	77 1f       	adc	r23, r23
     a1c:	88 1f       	adc	r24, r24
     a1e:	c2 f7       	brpl	.-16     	; 0xa10 <__addsf3x+0x6e>
     a20:	0e c0       	rjmp	.+28     	; 0xa3e <__addsf3x+0x9c>
     a22:	ba 0f       	add	r27, r26
     a24:	62 1f       	adc	r22, r18
     a26:	73 1f       	adc	r23, r19
     a28:	84 1f       	adc	r24, r20
     a2a:	48 f4       	brcc	.+18     	; 0xa3e <__addsf3x+0x9c>
     a2c:	87 95       	ror	r24
     a2e:	77 95       	ror	r23
     a30:	67 95       	ror	r22
     a32:	b7 95       	ror	r27
     a34:	f7 95       	ror	r31
     a36:	9e 3f       	cpi	r25, 0xFE	; 254
     a38:	08 f0       	brcs	.+2      	; 0xa3c <__addsf3x+0x9a>
     a3a:	b0 cf       	rjmp	.-160    	; 0x99c <__addsf3+0x28>
     a3c:	93 95       	inc	r25
     a3e:	88 0f       	add	r24, r24
     a40:	08 f0       	brcs	.+2      	; 0xa44 <__addsf3x+0xa2>
     a42:	99 27       	eor	r25, r25
     a44:	ee 0f       	add	r30, r30
     a46:	97 95       	ror	r25
     a48:	87 95       	ror	r24
     a4a:	08 95       	ret

00000a4c <__cmpsf2>:
     a4c:	0e 94 10 06 	call	0xc20	; 0xc20 <__fp_cmp>
     a50:	08 f4       	brcc	.+2      	; 0xa54 <__cmpsf2+0x8>
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	08 95       	ret

00000a56 <__divsf3>:
     a56:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__divsf3x>
     a5a:	0c 94 4b 06 	jmp	0xc96	; 0xc96 <__fp_round>
     a5e:	0e 94 44 06 	call	0xc88	; 0xc88 <__fp_pscB>
     a62:	58 f0       	brcs	.+22     	; 0xa7a <__divsf3+0x24>
     a64:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__fp_pscA>
     a68:	40 f0       	brcs	.+16     	; 0xa7a <__divsf3+0x24>
     a6a:	29 f4       	brne	.+10     	; 0xa76 <__divsf3+0x20>
     a6c:	5f 3f       	cpi	r21, 0xFF	; 255
     a6e:	29 f0       	breq	.+10     	; 0xa7a <__divsf3+0x24>
     a70:	0c 94 34 06 	jmp	0xc68	; 0xc68 <__fp_inf>
     a74:	51 11       	cpse	r21, r1
     a76:	0c 94 7f 06 	jmp	0xcfe	; 0xcfe <__fp_szero>
     a7a:	0c 94 3a 06 	jmp	0xc74	; 0xc74 <__fp_nan>

00000a7e <__divsf3x>:
     a7e:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__fp_split3>
     a82:	68 f3       	brcs	.-38     	; 0xa5e <__divsf3+0x8>

00000a84 <__divsf3_pse>:
     a84:	99 23       	and	r25, r25
     a86:	b1 f3       	breq	.-20     	; 0xa74 <__divsf3+0x1e>
     a88:	55 23       	and	r21, r21
     a8a:	91 f3       	breq	.-28     	; 0xa70 <__divsf3+0x1a>
     a8c:	95 1b       	sub	r25, r21
     a8e:	55 0b       	sbc	r21, r21
     a90:	bb 27       	eor	r27, r27
     a92:	aa 27       	eor	r26, r26
     a94:	62 17       	cp	r22, r18
     a96:	73 07       	cpc	r23, r19
     a98:	84 07       	cpc	r24, r20
     a9a:	38 f0       	brcs	.+14     	; 0xaaa <__divsf3_pse+0x26>
     a9c:	9f 5f       	subi	r25, 0xFF	; 255
     a9e:	5f 4f       	sbci	r21, 0xFF	; 255
     aa0:	22 0f       	add	r18, r18
     aa2:	33 1f       	adc	r19, r19
     aa4:	44 1f       	adc	r20, r20
     aa6:	aa 1f       	adc	r26, r26
     aa8:	a9 f3       	breq	.-22     	; 0xa94 <__divsf3_pse+0x10>
     aaa:	35 d0       	rcall	.+106    	; 0xb16 <__divsf3_pse+0x92>
     aac:	0e 2e       	mov	r0, r30
     aae:	3a f0       	brmi	.+14     	; 0xabe <__divsf3_pse+0x3a>
     ab0:	e0 e8       	ldi	r30, 0x80	; 128
     ab2:	32 d0       	rcall	.+100    	; 0xb18 <__divsf3_pse+0x94>
     ab4:	91 50       	subi	r25, 0x01	; 1
     ab6:	50 40       	sbci	r21, 0x00	; 0
     ab8:	e6 95       	lsr	r30
     aba:	00 1c       	adc	r0, r0
     abc:	ca f7       	brpl	.-14     	; 0xab0 <__divsf3_pse+0x2c>
     abe:	2b d0       	rcall	.+86     	; 0xb16 <__divsf3_pse+0x92>
     ac0:	fe 2f       	mov	r31, r30
     ac2:	29 d0       	rcall	.+82     	; 0xb16 <__divsf3_pse+0x92>
     ac4:	66 0f       	add	r22, r22
     ac6:	77 1f       	adc	r23, r23
     ac8:	88 1f       	adc	r24, r24
     aca:	bb 1f       	adc	r27, r27
     acc:	26 17       	cp	r18, r22
     ace:	37 07       	cpc	r19, r23
     ad0:	48 07       	cpc	r20, r24
     ad2:	ab 07       	cpc	r26, r27
     ad4:	b0 e8       	ldi	r27, 0x80	; 128
     ad6:	09 f0       	breq	.+2      	; 0xada <__divsf3_pse+0x56>
     ad8:	bb 0b       	sbc	r27, r27
     ada:	80 2d       	mov	r24, r0
     adc:	bf 01       	movw	r22, r30
     ade:	ff 27       	eor	r31, r31
     ae0:	93 58       	subi	r25, 0x83	; 131
     ae2:	5f 4f       	sbci	r21, 0xFF	; 255
     ae4:	3a f0       	brmi	.+14     	; 0xaf4 <__divsf3_pse+0x70>
     ae6:	9e 3f       	cpi	r25, 0xFE	; 254
     ae8:	51 05       	cpc	r21, r1
     aea:	78 f0       	brcs	.+30     	; 0xb0a <__divsf3_pse+0x86>
     aec:	0c 94 34 06 	jmp	0xc68	; 0xc68 <__fp_inf>
     af0:	0c 94 7f 06 	jmp	0xcfe	; 0xcfe <__fp_szero>
     af4:	5f 3f       	cpi	r21, 0xFF	; 255
     af6:	e4 f3       	brlt	.-8      	; 0xaf0 <__divsf3_pse+0x6c>
     af8:	98 3e       	cpi	r25, 0xE8	; 232
     afa:	d4 f3       	brlt	.-12     	; 0xaf0 <__divsf3_pse+0x6c>
     afc:	86 95       	lsr	r24
     afe:	77 95       	ror	r23
     b00:	67 95       	ror	r22
     b02:	b7 95       	ror	r27
     b04:	f7 95       	ror	r31
     b06:	9f 5f       	subi	r25, 0xFF	; 255
     b08:	c9 f7       	brne	.-14     	; 0xafc <__divsf3_pse+0x78>
     b0a:	88 0f       	add	r24, r24
     b0c:	91 1d       	adc	r25, r1
     b0e:	96 95       	lsr	r25
     b10:	87 95       	ror	r24
     b12:	97 f9       	bld	r25, 7
     b14:	08 95       	ret
     b16:	e1 e0       	ldi	r30, 0x01	; 1
     b18:	66 0f       	add	r22, r22
     b1a:	77 1f       	adc	r23, r23
     b1c:	88 1f       	adc	r24, r24
     b1e:	bb 1f       	adc	r27, r27
     b20:	62 17       	cp	r22, r18
     b22:	73 07       	cpc	r23, r19
     b24:	84 07       	cpc	r24, r20
     b26:	ba 07       	cpc	r27, r26
     b28:	20 f0       	brcs	.+8      	; 0xb32 <__divsf3_pse+0xae>
     b2a:	62 1b       	sub	r22, r18
     b2c:	73 0b       	sbc	r23, r19
     b2e:	84 0b       	sbc	r24, r20
     b30:	ba 0b       	sbc	r27, r26
     b32:	ee 1f       	adc	r30, r30
     b34:	88 f7       	brcc	.-30     	; 0xb18 <__divsf3_pse+0x94>
     b36:	e0 95       	com	r30
     b38:	08 95       	ret

00000b3a <__fixsfsi>:
     b3a:	0e 94 a4 05 	call	0xb48	; 0xb48 <__fixunssfsi>
     b3e:	68 94       	set
     b40:	b1 11       	cpse	r27, r1
     b42:	0c 94 7f 06 	jmp	0xcfe	; 0xcfe <__fp_szero>
     b46:	08 95       	ret

00000b48 <__fixunssfsi>:
     b48:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__fp_splitA>
     b4c:	88 f0       	brcs	.+34     	; 0xb70 <__fixunssfsi+0x28>
     b4e:	9f 57       	subi	r25, 0x7F	; 127
     b50:	98 f0       	brcs	.+38     	; 0xb78 <__fixunssfsi+0x30>
     b52:	b9 2f       	mov	r27, r25
     b54:	99 27       	eor	r25, r25
     b56:	b7 51       	subi	r27, 0x17	; 23
     b58:	b0 f0       	brcs	.+44     	; 0xb86 <__fixunssfsi+0x3e>
     b5a:	e1 f0       	breq	.+56     	; 0xb94 <__fixunssfsi+0x4c>
     b5c:	66 0f       	add	r22, r22
     b5e:	77 1f       	adc	r23, r23
     b60:	88 1f       	adc	r24, r24
     b62:	99 1f       	adc	r25, r25
     b64:	1a f0       	brmi	.+6      	; 0xb6c <__fixunssfsi+0x24>
     b66:	ba 95       	dec	r27
     b68:	c9 f7       	brne	.-14     	; 0xb5c <__fixunssfsi+0x14>
     b6a:	14 c0       	rjmp	.+40     	; 0xb94 <__fixunssfsi+0x4c>
     b6c:	b1 30       	cpi	r27, 0x01	; 1
     b6e:	91 f0       	breq	.+36     	; 0xb94 <__fixunssfsi+0x4c>
     b70:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__fp_zero>
     b74:	b1 e0       	ldi	r27, 0x01	; 1
     b76:	08 95       	ret
     b78:	0c 94 7e 06 	jmp	0xcfc	; 0xcfc <__fp_zero>
     b7c:	67 2f       	mov	r22, r23
     b7e:	78 2f       	mov	r23, r24
     b80:	88 27       	eor	r24, r24
     b82:	b8 5f       	subi	r27, 0xF8	; 248
     b84:	39 f0       	breq	.+14     	; 0xb94 <__fixunssfsi+0x4c>
     b86:	b9 3f       	cpi	r27, 0xF9	; 249
     b88:	cc f3       	brlt	.-14     	; 0xb7c <__fixunssfsi+0x34>
     b8a:	86 95       	lsr	r24
     b8c:	77 95       	ror	r23
     b8e:	67 95       	ror	r22
     b90:	b3 95       	inc	r27
     b92:	d9 f7       	brne	.-10     	; 0xb8a <__fixunssfsi+0x42>
     b94:	3e f4       	brtc	.+14     	; 0xba4 <__fixunssfsi+0x5c>
     b96:	90 95       	com	r25
     b98:	80 95       	com	r24
     b9a:	70 95       	com	r23
     b9c:	61 95       	neg	r22
     b9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ba0:	8f 4f       	sbci	r24, 0xFF	; 255
     ba2:	9f 4f       	sbci	r25, 0xFF	; 255
     ba4:	08 95       	ret

00000ba6 <__floatunsisf>:
     ba6:	e8 94       	clt
     ba8:	09 c0       	rjmp	.+18     	; 0xbbc <__floatsisf+0x12>

00000baa <__floatsisf>:
     baa:	97 fb       	bst	r25, 7
     bac:	3e f4       	brtc	.+14     	; 0xbbc <__floatsisf+0x12>
     bae:	90 95       	com	r25
     bb0:	80 95       	com	r24
     bb2:	70 95       	com	r23
     bb4:	61 95       	neg	r22
     bb6:	7f 4f       	sbci	r23, 0xFF	; 255
     bb8:	8f 4f       	sbci	r24, 0xFF	; 255
     bba:	9f 4f       	sbci	r25, 0xFF	; 255
     bbc:	99 23       	and	r25, r25
     bbe:	a9 f0       	breq	.+42     	; 0xbea <__floatsisf+0x40>
     bc0:	f9 2f       	mov	r31, r25
     bc2:	96 e9       	ldi	r25, 0x96	; 150
     bc4:	bb 27       	eor	r27, r27
     bc6:	93 95       	inc	r25
     bc8:	f6 95       	lsr	r31
     bca:	87 95       	ror	r24
     bcc:	77 95       	ror	r23
     bce:	67 95       	ror	r22
     bd0:	b7 95       	ror	r27
     bd2:	f1 11       	cpse	r31, r1
     bd4:	f8 cf       	rjmp	.-16     	; 0xbc6 <__floatsisf+0x1c>
     bd6:	fa f4       	brpl	.+62     	; 0xc16 <__floatsisf+0x6c>
     bd8:	bb 0f       	add	r27, r27
     bda:	11 f4       	brne	.+4      	; 0xbe0 <__floatsisf+0x36>
     bdc:	60 ff       	sbrs	r22, 0
     bde:	1b c0       	rjmp	.+54     	; 0xc16 <__floatsisf+0x6c>
     be0:	6f 5f       	subi	r22, 0xFF	; 255
     be2:	7f 4f       	sbci	r23, 0xFF	; 255
     be4:	8f 4f       	sbci	r24, 0xFF	; 255
     be6:	9f 4f       	sbci	r25, 0xFF	; 255
     be8:	16 c0       	rjmp	.+44     	; 0xc16 <__floatsisf+0x6c>
     bea:	88 23       	and	r24, r24
     bec:	11 f0       	breq	.+4      	; 0xbf2 <__floatsisf+0x48>
     bee:	96 e9       	ldi	r25, 0x96	; 150
     bf0:	11 c0       	rjmp	.+34     	; 0xc14 <__floatsisf+0x6a>
     bf2:	77 23       	and	r23, r23
     bf4:	21 f0       	breq	.+8      	; 0xbfe <__floatsisf+0x54>
     bf6:	9e e8       	ldi	r25, 0x8E	; 142
     bf8:	87 2f       	mov	r24, r23
     bfa:	76 2f       	mov	r23, r22
     bfc:	05 c0       	rjmp	.+10     	; 0xc08 <__floatsisf+0x5e>
     bfe:	66 23       	and	r22, r22
     c00:	71 f0       	breq	.+28     	; 0xc1e <__floatsisf+0x74>
     c02:	96 e8       	ldi	r25, 0x86	; 134
     c04:	86 2f       	mov	r24, r22
     c06:	70 e0       	ldi	r23, 0x00	; 0
     c08:	60 e0       	ldi	r22, 0x00	; 0
     c0a:	2a f0       	brmi	.+10     	; 0xc16 <__floatsisf+0x6c>
     c0c:	9a 95       	dec	r25
     c0e:	66 0f       	add	r22, r22
     c10:	77 1f       	adc	r23, r23
     c12:	88 1f       	adc	r24, r24
     c14:	da f7       	brpl	.-10     	; 0xc0c <__floatsisf+0x62>
     c16:	88 0f       	add	r24, r24
     c18:	96 95       	lsr	r25
     c1a:	87 95       	ror	r24
     c1c:	97 f9       	bld	r25, 7
     c1e:	08 95       	ret

00000c20 <__fp_cmp>:
     c20:	99 0f       	add	r25, r25
     c22:	00 08       	sbc	r0, r0
     c24:	55 0f       	add	r21, r21
     c26:	aa 0b       	sbc	r26, r26
     c28:	e0 e8       	ldi	r30, 0x80	; 128
     c2a:	fe ef       	ldi	r31, 0xFE	; 254
     c2c:	16 16       	cp	r1, r22
     c2e:	17 06       	cpc	r1, r23
     c30:	e8 07       	cpc	r30, r24
     c32:	f9 07       	cpc	r31, r25
     c34:	c0 f0       	brcs	.+48     	; 0xc66 <__fp_cmp+0x46>
     c36:	12 16       	cp	r1, r18
     c38:	13 06       	cpc	r1, r19
     c3a:	e4 07       	cpc	r30, r20
     c3c:	f5 07       	cpc	r31, r21
     c3e:	98 f0       	brcs	.+38     	; 0xc66 <__fp_cmp+0x46>
     c40:	62 1b       	sub	r22, r18
     c42:	73 0b       	sbc	r23, r19
     c44:	84 0b       	sbc	r24, r20
     c46:	95 0b       	sbc	r25, r21
     c48:	39 f4       	brne	.+14     	; 0xc58 <__fp_cmp+0x38>
     c4a:	0a 26       	eor	r0, r26
     c4c:	61 f0       	breq	.+24     	; 0xc66 <__fp_cmp+0x46>
     c4e:	23 2b       	or	r18, r19
     c50:	24 2b       	or	r18, r20
     c52:	25 2b       	or	r18, r21
     c54:	21 f4       	brne	.+8      	; 0xc5e <__fp_cmp+0x3e>
     c56:	08 95       	ret
     c58:	0a 26       	eor	r0, r26
     c5a:	09 f4       	brne	.+2      	; 0xc5e <__fp_cmp+0x3e>
     c5c:	a1 40       	sbci	r26, 0x01	; 1
     c5e:	a6 95       	lsr	r26
     c60:	8f ef       	ldi	r24, 0xFF	; 255
     c62:	81 1d       	adc	r24, r1
     c64:	81 1d       	adc	r24, r1
     c66:	08 95       	ret

00000c68 <__fp_inf>:
     c68:	97 f9       	bld	r25, 7
     c6a:	9f 67       	ori	r25, 0x7F	; 127
     c6c:	80 e8       	ldi	r24, 0x80	; 128
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	60 e0       	ldi	r22, 0x00	; 0
     c72:	08 95       	ret

00000c74 <__fp_nan>:
     c74:	9f ef       	ldi	r25, 0xFF	; 255
     c76:	80 ec       	ldi	r24, 0xC0	; 192
     c78:	08 95       	ret

00000c7a <__fp_pscA>:
     c7a:	00 24       	eor	r0, r0
     c7c:	0a 94       	dec	r0
     c7e:	16 16       	cp	r1, r22
     c80:	17 06       	cpc	r1, r23
     c82:	18 06       	cpc	r1, r24
     c84:	09 06       	cpc	r0, r25
     c86:	08 95       	ret

00000c88 <__fp_pscB>:
     c88:	00 24       	eor	r0, r0
     c8a:	0a 94       	dec	r0
     c8c:	12 16       	cp	r1, r18
     c8e:	13 06       	cpc	r1, r19
     c90:	14 06       	cpc	r1, r20
     c92:	05 06       	cpc	r0, r21
     c94:	08 95       	ret

00000c96 <__fp_round>:
     c96:	09 2e       	mov	r0, r25
     c98:	03 94       	inc	r0
     c9a:	00 0c       	add	r0, r0
     c9c:	11 f4       	brne	.+4      	; 0xca2 <__fp_round+0xc>
     c9e:	88 23       	and	r24, r24
     ca0:	52 f0       	brmi	.+20     	; 0xcb6 <__fp_round+0x20>
     ca2:	bb 0f       	add	r27, r27
     ca4:	40 f4       	brcc	.+16     	; 0xcb6 <__fp_round+0x20>
     ca6:	bf 2b       	or	r27, r31
     ca8:	11 f4       	brne	.+4      	; 0xcae <__fp_round+0x18>
     caa:	60 ff       	sbrs	r22, 0
     cac:	04 c0       	rjmp	.+8      	; 0xcb6 <__fp_round+0x20>
     cae:	6f 5f       	subi	r22, 0xFF	; 255
     cb0:	7f 4f       	sbci	r23, 0xFF	; 255
     cb2:	8f 4f       	sbci	r24, 0xFF	; 255
     cb4:	9f 4f       	sbci	r25, 0xFF	; 255
     cb6:	08 95       	ret

00000cb8 <__fp_split3>:
     cb8:	57 fd       	sbrc	r21, 7
     cba:	90 58       	subi	r25, 0x80	; 128
     cbc:	44 0f       	add	r20, r20
     cbe:	55 1f       	adc	r21, r21
     cc0:	59 f0       	breq	.+22     	; 0xcd8 <__fp_splitA+0x10>
     cc2:	5f 3f       	cpi	r21, 0xFF	; 255
     cc4:	71 f0       	breq	.+28     	; 0xce2 <__fp_splitA+0x1a>
     cc6:	47 95       	ror	r20

00000cc8 <__fp_splitA>:
     cc8:	88 0f       	add	r24, r24
     cca:	97 fb       	bst	r25, 7
     ccc:	99 1f       	adc	r25, r25
     cce:	61 f0       	breq	.+24     	; 0xce8 <__fp_splitA+0x20>
     cd0:	9f 3f       	cpi	r25, 0xFF	; 255
     cd2:	79 f0       	breq	.+30     	; 0xcf2 <__fp_splitA+0x2a>
     cd4:	87 95       	ror	r24
     cd6:	08 95       	ret
     cd8:	12 16       	cp	r1, r18
     cda:	13 06       	cpc	r1, r19
     cdc:	14 06       	cpc	r1, r20
     cde:	55 1f       	adc	r21, r21
     ce0:	f2 cf       	rjmp	.-28     	; 0xcc6 <__fp_split3+0xe>
     ce2:	46 95       	lsr	r20
     ce4:	f1 df       	rcall	.-30     	; 0xcc8 <__fp_splitA>
     ce6:	08 c0       	rjmp	.+16     	; 0xcf8 <__fp_splitA+0x30>
     ce8:	16 16       	cp	r1, r22
     cea:	17 06       	cpc	r1, r23
     cec:	18 06       	cpc	r1, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	f1 cf       	rjmp	.-30     	; 0xcd4 <__fp_splitA+0xc>
     cf2:	86 95       	lsr	r24
     cf4:	71 05       	cpc	r23, r1
     cf6:	61 05       	cpc	r22, r1
     cf8:	08 94       	sec
     cfa:	08 95       	ret

00000cfc <__fp_zero>:
     cfc:	e8 94       	clt

00000cfe <__fp_szero>:
     cfe:	bb 27       	eor	r27, r27
     d00:	66 27       	eor	r22, r22
     d02:	77 27       	eor	r23, r23
     d04:	cb 01       	movw	r24, r22
     d06:	97 f9       	bld	r25, 7
     d08:	08 95       	ret
     d0a:	16 f0       	brts	.+4      	; 0xd10 <__fp_szero+0x12>
     d0c:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__fp_mpack>
     d10:	0c 94 3a 06 	jmp	0xc74	; 0xc74 <__fp_nan>
     d14:	68 94       	set
     d16:	0c 94 34 06 	jmp	0xc68	; 0xc68 <__fp_inf>

00000d1a <log>:
     d1a:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__fp_splitA>
     d1e:	a8 f3       	brcs	.-22     	; 0xd0a <__fp_szero+0xc>
     d20:	99 23       	and	r25, r25
     d22:	c1 f3       	breq	.-16     	; 0xd14 <__fp_szero+0x16>
     d24:	ae f3       	brts	.-22     	; 0xd10 <__fp_szero+0x12>
     d26:	df 93       	push	r29
     d28:	cf 93       	push	r28
     d2a:	1f 93       	push	r17
     d2c:	0f 93       	push	r16
     d2e:	ff 92       	push	r15
     d30:	c9 2f       	mov	r28, r25
     d32:	dd 27       	eor	r29, r29
     d34:	88 23       	and	r24, r24
     d36:	2a f0       	brmi	.+10     	; 0xd42 <log+0x28>
     d38:	21 97       	sbiw	r28, 0x01	; 1
     d3a:	66 0f       	add	r22, r22
     d3c:	77 1f       	adc	r23, r23
     d3e:	88 1f       	adc	r24, r24
     d40:	da f7       	brpl	.-10     	; 0xd38 <log+0x1e>
     d42:	20 e0       	ldi	r18, 0x00	; 0
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	40 e8       	ldi	r20, 0x80	; 128
     d48:	5f eb       	ldi	r21, 0xBF	; 191
     d4a:	9f e3       	ldi	r25, 0x3F	; 63
     d4c:	88 39       	cpi	r24, 0x98	; 152
     d4e:	20 f0       	brcs	.+8      	; 0xd58 <log+0x3e>
     d50:	80 3e       	cpi	r24, 0xE0	; 224
     d52:	38 f0       	brcs	.+14     	; 0xd62 <log+0x48>
     d54:	21 96       	adiw	r28, 0x01	; 1
     d56:	8f 77       	andi	r24, 0x7F	; 127
     d58:	0e 94 ba 04 	call	0x974	; 0x974 <__addsf3>
     d5c:	e4 eb       	ldi	r30, 0xB4	; 180
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	04 c0       	rjmp	.+8      	; 0xd6a <log+0x50>
     d62:	0e 94 ba 04 	call	0x974	; 0x974 <__addsf3>
     d66:	e1 ee       	ldi	r30, 0xE1	; 225
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	0e 94 50 07 	call	0xea0	; 0xea0 <__fp_powser>
     d6e:	8b 01       	movw	r16, r22
     d70:	be 01       	movw	r22, r28
     d72:	ec 01       	movw	r28, r24
     d74:	fb 2e       	mov	r15, r27
     d76:	6f 57       	subi	r22, 0x7F	; 127
     d78:	71 09       	sbc	r23, r1
     d7a:	75 95       	asr	r23
     d7c:	77 1f       	adc	r23, r23
     d7e:	88 0b       	sbc	r24, r24
     d80:	99 0b       	sbc	r25, r25
     d82:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__floatsisf>
     d86:	28 e1       	ldi	r18, 0x18	; 24
     d88:	32 e7       	ldi	r19, 0x72	; 114
     d8a:	41 e3       	ldi	r20, 0x31	; 49
     d8c:	5f e3       	ldi	r21, 0x3F	; 63
     d8e:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <__mulsf3x>
     d92:	af 2d       	mov	r26, r15
     d94:	98 01       	movw	r18, r16
     d96:	ae 01       	movw	r20, r28
     d98:	ff 90       	pop	r15
     d9a:	0f 91       	pop	r16
     d9c:	1f 91       	pop	r17
     d9e:	cf 91       	pop	r28
     da0:	df 91       	pop	r29
     da2:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__addsf3x>
     da6:	0c 94 4b 06 	jmp	0xc96	; 0xc96 <__fp_round>

00000daa <__mulsf3>:
     daa:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <__mulsf3x>
     dae:	0c 94 4b 06 	jmp	0xc96	; 0xc96 <__fp_round>
     db2:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__fp_pscA>
     db6:	38 f0       	brcs	.+14     	; 0xdc6 <__mulsf3+0x1c>
     db8:	0e 94 44 06 	call	0xc88	; 0xc88 <__fp_pscB>
     dbc:	20 f0       	brcs	.+8      	; 0xdc6 <__mulsf3+0x1c>
     dbe:	95 23       	and	r25, r21
     dc0:	11 f0       	breq	.+4      	; 0xdc6 <__mulsf3+0x1c>
     dc2:	0c 94 34 06 	jmp	0xc68	; 0xc68 <__fp_inf>
     dc6:	0c 94 3a 06 	jmp	0xc74	; 0xc74 <__fp_nan>
     dca:	11 24       	eor	r1, r1
     dcc:	0c 94 7f 06 	jmp	0xcfe	; 0xcfe <__fp_szero>

00000dd0 <__mulsf3x>:
     dd0:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__fp_split3>
     dd4:	70 f3       	brcs	.-36     	; 0xdb2 <__mulsf3+0x8>

00000dd6 <__mulsf3_pse>:
     dd6:	95 9f       	mul	r25, r21
     dd8:	c1 f3       	breq	.-16     	; 0xdca <__mulsf3+0x20>
     dda:	95 0f       	add	r25, r21
     ddc:	50 e0       	ldi	r21, 0x00	; 0
     dde:	55 1f       	adc	r21, r21
     de0:	62 9f       	mul	r22, r18
     de2:	f0 01       	movw	r30, r0
     de4:	72 9f       	mul	r23, r18
     de6:	bb 27       	eor	r27, r27
     de8:	f0 0d       	add	r31, r0
     dea:	b1 1d       	adc	r27, r1
     dec:	63 9f       	mul	r22, r19
     dee:	aa 27       	eor	r26, r26
     df0:	f0 0d       	add	r31, r0
     df2:	b1 1d       	adc	r27, r1
     df4:	aa 1f       	adc	r26, r26
     df6:	64 9f       	mul	r22, r20
     df8:	66 27       	eor	r22, r22
     dfa:	b0 0d       	add	r27, r0
     dfc:	a1 1d       	adc	r26, r1
     dfe:	66 1f       	adc	r22, r22
     e00:	82 9f       	mul	r24, r18
     e02:	22 27       	eor	r18, r18
     e04:	b0 0d       	add	r27, r0
     e06:	a1 1d       	adc	r26, r1
     e08:	62 1f       	adc	r22, r18
     e0a:	73 9f       	mul	r23, r19
     e0c:	b0 0d       	add	r27, r0
     e0e:	a1 1d       	adc	r26, r1
     e10:	62 1f       	adc	r22, r18
     e12:	83 9f       	mul	r24, r19
     e14:	a0 0d       	add	r26, r0
     e16:	61 1d       	adc	r22, r1
     e18:	22 1f       	adc	r18, r18
     e1a:	74 9f       	mul	r23, r20
     e1c:	33 27       	eor	r19, r19
     e1e:	a0 0d       	add	r26, r0
     e20:	61 1d       	adc	r22, r1
     e22:	23 1f       	adc	r18, r19
     e24:	84 9f       	mul	r24, r20
     e26:	60 0d       	add	r22, r0
     e28:	21 1d       	adc	r18, r1
     e2a:	82 2f       	mov	r24, r18
     e2c:	76 2f       	mov	r23, r22
     e2e:	6a 2f       	mov	r22, r26
     e30:	11 24       	eor	r1, r1
     e32:	9f 57       	subi	r25, 0x7F	; 127
     e34:	50 40       	sbci	r21, 0x00	; 0
     e36:	9a f0       	brmi	.+38     	; 0xe5e <__mulsf3_pse+0x88>
     e38:	f1 f0       	breq	.+60     	; 0xe76 <__mulsf3_pse+0xa0>
     e3a:	88 23       	and	r24, r24
     e3c:	4a f0       	brmi	.+18     	; 0xe50 <__mulsf3_pse+0x7a>
     e3e:	ee 0f       	add	r30, r30
     e40:	ff 1f       	adc	r31, r31
     e42:	bb 1f       	adc	r27, r27
     e44:	66 1f       	adc	r22, r22
     e46:	77 1f       	adc	r23, r23
     e48:	88 1f       	adc	r24, r24
     e4a:	91 50       	subi	r25, 0x01	; 1
     e4c:	50 40       	sbci	r21, 0x00	; 0
     e4e:	a9 f7       	brne	.-22     	; 0xe3a <__mulsf3_pse+0x64>
     e50:	9e 3f       	cpi	r25, 0xFE	; 254
     e52:	51 05       	cpc	r21, r1
     e54:	80 f0       	brcs	.+32     	; 0xe76 <__mulsf3_pse+0xa0>
     e56:	0c 94 34 06 	jmp	0xc68	; 0xc68 <__fp_inf>
     e5a:	0c 94 7f 06 	jmp	0xcfe	; 0xcfe <__fp_szero>
     e5e:	5f 3f       	cpi	r21, 0xFF	; 255
     e60:	e4 f3       	brlt	.-8      	; 0xe5a <__mulsf3_pse+0x84>
     e62:	98 3e       	cpi	r25, 0xE8	; 232
     e64:	d4 f3       	brlt	.-12     	; 0xe5a <__mulsf3_pse+0x84>
     e66:	86 95       	lsr	r24
     e68:	77 95       	ror	r23
     e6a:	67 95       	ror	r22
     e6c:	b7 95       	ror	r27
     e6e:	f7 95       	ror	r31
     e70:	e7 95       	ror	r30
     e72:	9f 5f       	subi	r25, 0xFF	; 255
     e74:	c1 f7       	brne	.-16     	; 0xe66 <__mulsf3_pse+0x90>
     e76:	fe 2b       	or	r31, r30
     e78:	88 0f       	add	r24, r24
     e7a:	91 1d       	adc	r25, r1
     e7c:	96 95       	lsr	r25
     e7e:	87 95       	ror	r24
     e80:	97 f9       	bld	r25, 7
     e82:	08 95       	ret

00000e84 <__fp_mpack>:
     e84:	9f 3f       	cpi	r25, 0xFF	; 255
     e86:	31 f0       	breq	.+12     	; 0xe94 <__fp_mpack_finite+0xc>

00000e88 <__fp_mpack_finite>:
     e88:	91 50       	subi	r25, 0x01	; 1
     e8a:	20 f4       	brcc	.+8      	; 0xe94 <__fp_mpack_finite+0xc>
     e8c:	87 95       	ror	r24
     e8e:	77 95       	ror	r23
     e90:	67 95       	ror	r22
     e92:	b7 95       	ror	r27
     e94:	88 0f       	add	r24, r24
     e96:	91 1d       	adc	r25, r1
     e98:	96 95       	lsr	r25
     e9a:	87 95       	ror	r24
     e9c:	97 f9       	bld	r25, 7
     e9e:	08 95       	ret

00000ea0 <__fp_powser>:
     ea0:	df 93       	push	r29
     ea2:	cf 93       	push	r28
     ea4:	1f 93       	push	r17
     ea6:	0f 93       	push	r16
     ea8:	ff 92       	push	r15
     eaa:	ef 92       	push	r14
     eac:	df 92       	push	r13
     eae:	7b 01       	movw	r14, r22
     eb0:	8c 01       	movw	r16, r24
     eb2:	68 94       	set
     eb4:	06 c0       	rjmp	.+12     	; 0xec2 <__fp_powser+0x22>
     eb6:	da 2e       	mov	r13, r26
     eb8:	ef 01       	movw	r28, r30
     eba:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <__mulsf3x>
     ebe:	fe 01       	movw	r30, r28
     ec0:	e8 94       	clt
     ec2:	a5 91       	lpm	r26, Z+
     ec4:	25 91       	lpm	r18, Z+
     ec6:	35 91       	lpm	r19, Z+
     ec8:	45 91       	lpm	r20, Z+
     eca:	55 91       	lpm	r21, Z+
     ecc:	a6 f3       	brts	.-24     	; 0xeb6 <__fp_powser+0x16>
     ece:	ef 01       	movw	r28, r30
     ed0:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__addsf3x>
     ed4:	fe 01       	movw	r30, r28
     ed6:	97 01       	movw	r18, r14
     ed8:	a8 01       	movw	r20, r16
     eda:	da 94       	dec	r13
     edc:	69 f7       	brne	.-38     	; 0xeb8 <__fp_powser+0x18>
     ede:	df 90       	pop	r13
     ee0:	ef 90       	pop	r14
     ee2:	ff 90       	pop	r15
     ee4:	0f 91       	pop	r16
     ee6:	1f 91       	pop	r17
     ee8:	cf 91       	pop	r28
     eea:	df 91       	pop	r29
     eec:	08 95       	ret

00000eee <sprintf>:
     eee:	ae e0       	ldi	r26, 0x0E	; 14
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	ed e7       	ldi	r30, 0x7D	; 125
     ef4:	f7 e0       	ldi	r31, 0x07	; 7
     ef6:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__prologue_saves__+0x1c>
     efa:	0d 89       	ldd	r16, Y+21	; 0x15
     efc:	1e 89       	ldd	r17, Y+22	; 0x16
     efe:	86 e0       	ldi	r24, 0x06	; 6
     f00:	8c 83       	std	Y+4, r24	; 0x04
     f02:	1a 83       	std	Y+2, r17	; 0x02
     f04:	09 83       	std	Y+1, r16	; 0x01
     f06:	8f ef       	ldi	r24, 0xFF	; 255
     f08:	9f e7       	ldi	r25, 0x7F	; 127
     f0a:	9e 83       	std	Y+6, r25	; 0x06
     f0c:	8d 83       	std	Y+5, r24	; 0x05
     f0e:	ae 01       	movw	r20, r28
     f10:	47 5e       	subi	r20, 0xE7	; 231
     f12:	5f 4f       	sbci	r21, 0xFF	; 255
     f14:	6f 89       	ldd	r22, Y+23	; 0x17
     f16:	78 8d       	ldd	r23, Y+24	; 0x18
     f18:	ce 01       	movw	r24, r28
     f1a:	01 96       	adiw	r24, 0x01	; 1
     f1c:	0e 94 99 07 	call	0xf32	; 0xf32 <vfprintf>
     f20:	ef 81       	ldd	r30, Y+7	; 0x07
     f22:	f8 85       	ldd	r31, Y+8	; 0x08
     f24:	e0 0f       	add	r30, r16
     f26:	f1 1f       	adc	r31, r17
     f28:	10 82       	st	Z, r1
     f2a:	2e 96       	adiw	r28, 0x0e	; 14
     f2c:	e4 e0       	ldi	r30, 0x04	; 4
     f2e:	0c 94 54 0a 	jmp	0x14a8	; 0x14a8 <__epilogue_restores__+0x1c>

00000f32 <vfprintf>:
     f32:	ab e0       	ldi	r26, 0x0B	; 11
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	ef e9       	ldi	r30, 0x9F	; 159
     f38:	f7 e0       	ldi	r31, 0x07	; 7
     f3a:	0c 94 2a 0a 	jmp	0x1454	; 0x1454 <__prologue_saves__>
     f3e:	6c 01       	movw	r12, r24
     f40:	7b 01       	movw	r14, r22
     f42:	8a 01       	movw	r16, r20
     f44:	fc 01       	movw	r30, r24
     f46:	17 82       	std	Z+7, r1	; 0x07
     f48:	16 82       	std	Z+6, r1	; 0x06
     f4a:	83 81       	ldd	r24, Z+3	; 0x03
     f4c:	81 ff       	sbrs	r24, 1
     f4e:	cc c1       	rjmp	.+920    	; 0x12e8 <vfprintf+0x3b6>
     f50:	ce 01       	movw	r24, r28
     f52:	01 96       	adiw	r24, 0x01	; 1
     f54:	3c 01       	movw	r6, r24
     f56:	f6 01       	movw	r30, r12
     f58:	93 81       	ldd	r25, Z+3	; 0x03
     f5a:	f7 01       	movw	r30, r14
     f5c:	93 fd       	sbrc	r25, 3
     f5e:	85 91       	lpm	r24, Z+
     f60:	93 ff       	sbrs	r25, 3
     f62:	81 91       	ld	r24, Z+
     f64:	7f 01       	movw	r14, r30
     f66:	88 23       	and	r24, r24
     f68:	09 f4       	brne	.+2      	; 0xf6c <vfprintf+0x3a>
     f6a:	ba c1       	rjmp	.+884    	; 0x12e0 <vfprintf+0x3ae>
     f6c:	85 32       	cpi	r24, 0x25	; 37
     f6e:	39 f4       	brne	.+14     	; 0xf7e <vfprintf+0x4c>
     f70:	93 fd       	sbrc	r25, 3
     f72:	85 91       	lpm	r24, Z+
     f74:	93 ff       	sbrs	r25, 3
     f76:	81 91       	ld	r24, Z+
     f78:	7f 01       	movw	r14, r30
     f7a:	85 32       	cpi	r24, 0x25	; 37
     f7c:	29 f4       	brne	.+10     	; 0xf88 <vfprintf+0x56>
     f7e:	b6 01       	movw	r22, r12
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	0e 94 90 09 	call	0x1320	; 0x1320 <fputc>
     f86:	e7 cf       	rjmp	.-50     	; 0xf56 <vfprintf+0x24>
     f88:	91 2c       	mov	r9, r1
     f8a:	21 2c       	mov	r2, r1
     f8c:	31 2c       	mov	r3, r1
     f8e:	ff e1       	ldi	r31, 0x1F	; 31
     f90:	f3 15       	cp	r31, r3
     f92:	d8 f0       	brcs	.+54     	; 0xfca <vfprintf+0x98>
     f94:	8b 32       	cpi	r24, 0x2B	; 43
     f96:	79 f0       	breq	.+30     	; 0xfb6 <vfprintf+0x84>
     f98:	38 f4       	brcc	.+14     	; 0xfa8 <vfprintf+0x76>
     f9a:	80 32       	cpi	r24, 0x20	; 32
     f9c:	79 f0       	breq	.+30     	; 0xfbc <vfprintf+0x8a>
     f9e:	83 32       	cpi	r24, 0x23	; 35
     fa0:	a1 f4       	brne	.+40     	; 0xfca <vfprintf+0x98>
     fa2:	23 2d       	mov	r18, r3
     fa4:	20 61       	ori	r18, 0x10	; 16
     fa6:	1d c0       	rjmp	.+58     	; 0xfe2 <vfprintf+0xb0>
     fa8:	8d 32       	cpi	r24, 0x2D	; 45
     faa:	61 f0       	breq	.+24     	; 0xfc4 <vfprintf+0x92>
     fac:	80 33       	cpi	r24, 0x30	; 48
     fae:	69 f4       	brne	.+26     	; 0xfca <vfprintf+0x98>
     fb0:	23 2d       	mov	r18, r3
     fb2:	21 60       	ori	r18, 0x01	; 1
     fb4:	16 c0       	rjmp	.+44     	; 0xfe2 <vfprintf+0xb0>
     fb6:	83 2d       	mov	r24, r3
     fb8:	82 60       	ori	r24, 0x02	; 2
     fba:	38 2e       	mov	r3, r24
     fbc:	e3 2d       	mov	r30, r3
     fbe:	e4 60       	ori	r30, 0x04	; 4
     fc0:	3e 2e       	mov	r3, r30
     fc2:	2a c0       	rjmp	.+84     	; 0x1018 <vfprintf+0xe6>
     fc4:	f3 2d       	mov	r31, r3
     fc6:	f8 60       	ori	r31, 0x08	; 8
     fc8:	1d c0       	rjmp	.+58     	; 0x1004 <vfprintf+0xd2>
     fca:	37 fc       	sbrc	r3, 7
     fcc:	2d c0       	rjmp	.+90     	; 0x1028 <vfprintf+0xf6>
     fce:	20 ed       	ldi	r18, 0xD0	; 208
     fd0:	28 0f       	add	r18, r24
     fd2:	2a 30       	cpi	r18, 0x0A	; 10
     fd4:	40 f0       	brcs	.+16     	; 0xfe6 <vfprintf+0xb4>
     fd6:	8e 32       	cpi	r24, 0x2E	; 46
     fd8:	b9 f4       	brne	.+46     	; 0x1008 <vfprintf+0xd6>
     fda:	36 fc       	sbrc	r3, 6
     fdc:	81 c1       	rjmp	.+770    	; 0x12e0 <vfprintf+0x3ae>
     fde:	23 2d       	mov	r18, r3
     fe0:	20 64       	ori	r18, 0x40	; 64
     fe2:	32 2e       	mov	r3, r18
     fe4:	19 c0       	rjmp	.+50     	; 0x1018 <vfprintf+0xe6>
     fe6:	36 fe       	sbrs	r3, 6
     fe8:	06 c0       	rjmp	.+12     	; 0xff6 <vfprintf+0xc4>
     fea:	8a e0       	ldi	r24, 0x0A	; 10
     fec:	98 9e       	mul	r9, r24
     fee:	20 0d       	add	r18, r0
     ff0:	11 24       	eor	r1, r1
     ff2:	92 2e       	mov	r9, r18
     ff4:	11 c0       	rjmp	.+34     	; 0x1018 <vfprintf+0xe6>
     ff6:	ea e0       	ldi	r30, 0x0A	; 10
     ff8:	2e 9e       	mul	r2, r30
     ffa:	20 0d       	add	r18, r0
     ffc:	11 24       	eor	r1, r1
     ffe:	22 2e       	mov	r2, r18
    1000:	f3 2d       	mov	r31, r3
    1002:	f0 62       	ori	r31, 0x20	; 32
    1004:	3f 2e       	mov	r3, r31
    1006:	08 c0       	rjmp	.+16     	; 0x1018 <vfprintf+0xe6>
    1008:	8c 36       	cpi	r24, 0x6C	; 108
    100a:	21 f4       	brne	.+8      	; 0x1014 <vfprintf+0xe2>
    100c:	83 2d       	mov	r24, r3
    100e:	80 68       	ori	r24, 0x80	; 128
    1010:	38 2e       	mov	r3, r24
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <vfprintf+0xe6>
    1014:	88 36       	cpi	r24, 0x68	; 104
    1016:	41 f4       	brne	.+16     	; 0x1028 <vfprintf+0xf6>
    1018:	f7 01       	movw	r30, r14
    101a:	93 fd       	sbrc	r25, 3
    101c:	85 91       	lpm	r24, Z+
    101e:	93 ff       	sbrs	r25, 3
    1020:	81 91       	ld	r24, Z+
    1022:	7f 01       	movw	r14, r30
    1024:	81 11       	cpse	r24, r1
    1026:	b3 cf       	rjmp	.-154    	; 0xf8e <vfprintf+0x5c>
    1028:	98 2f       	mov	r25, r24
    102a:	9f 7d       	andi	r25, 0xDF	; 223
    102c:	95 54       	subi	r25, 0x45	; 69
    102e:	93 30       	cpi	r25, 0x03	; 3
    1030:	28 f4       	brcc	.+10     	; 0x103c <vfprintf+0x10a>
    1032:	0c 5f       	subi	r16, 0xFC	; 252
    1034:	1f 4f       	sbci	r17, 0xFF	; 255
    1036:	9f e3       	ldi	r25, 0x3F	; 63
    1038:	99 83       	std	Y+1, r25	; 0x01
    103a:	0d c0       	rjmp	.+26     	; 0x1056 <vfprintf+0x124>
    103c:	83 36       	cpi	r24, 0x63	; 99
    103e:	31 f0       	breq	.+12     	; 0x104c <vfprintf+0x11a>
    1040:	83 37       	cpi	r24, 0x73	; 115
    1042:	71 f0       	breq	.+28     	; 0x1060 <vfprintf+0x12e>
    1044:	83 35       	cpi	r24, 0x53	; 83
    1046:	09 f0       	breq	.+2      	; 0x104a <vfprintf+0x118>
    1048:	59 c0       	rjmp	.+178    	; 0x10fc <vfprintf+0x1ca>
    104a:	21 c0       	rjmp	.+66     	; 0x108e <vfprintf+0x15c>
    104c:	f8 01       	movw	r30, r16
    104e:	80 81       	ld	r24, Z
    1050:	89 83       	std	Y+1, r24	; 0x01
    1052:	0e 5f       	subi	r16, 0xFE	; 254
    1054:	1f 4f       	sbci	r17, 0xFF	; 255
    1056:	88 24       	eor	r8, r8
    1058:	83 94       	inc	r8
    105a:	91 2c       	mov	r9, r1
    105c:	53 01       	movw	r10, r6
    105e:	13 c0       	rjmp	.+38     	; 0x1086 <vfprintf+0x154>
    1060:	28 01       	movw	r4, r16
    1062:	f2 e0       	ldi	r31, 0x02	; 2
    1064:	4f 0e       	add	r4, r31
    1066:	51 1c       	adc	r5, r1
    1068:	f8 01       	movw	r30, r16
    106a:	a0 80       	ld	r10, Z
    106c:	b1 80       	ldd	r11, Z+1	; 0x01
    106e:	36 fe       	sbrs	r3, 6
    1070:	03 c0       	rjmp	.+6      	; 0x1078 <vfprintf+0x146>
    1072:	69 2d       	mov	r22, r9
    1074:	70 e0       	ldi	r23, 0x00	; 0
    1076:	02 c0       	rjmp	.+4      	; 0x107c <vfprintf+0x14a>
    1078:	6f ef       	ldi	r22, 0xFF	; 255
    107a:	7f ef       	ldi	r23, 0xFF	; 255
    107c:	c5 01       	movw	r24, r10
    107e:	0e 94 85 09 	call	0x130a	; 0x130a <strnlen>
    1082:	4c 01       	movw	r8, r24
    1084:	82 01       	movw	r16, r4
    1086:	f3 2d       	mov	r31, r3
    1088:	ff 77       	andi	r31, 0x7F	; 127
    108a:	3f 2e       	mov	r3, r31
    108c:	16 c0       	rjmp	.+44     	; 0x10ba <vfprintf+0x188>
    108e:	28 01       	movw	r4, r16
    1090:	22 e0       	ldi	r18, 0x02	; 2
    1092:	42 0e       	add	r4, r18
    1094:	51 1c       	adc	r5, r1
    1096:	f8 01       	movw	r30, r16
    1098:	a0 80       	ld	r10, Z
    109a:	b1 80       	ldd	r11, Z+1	; 0x01
    109c:	36 fe       	sbrs	r3, 6
    109e:	03 c0       	rjmp	.+6      	; 0x10a6 <vfprintf+0x174>
    10a0:	69 2d       	mov	r22, r9
    10a2:	70 e0       	ldi	r23, 0x00	; 0
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <vfprintf+0x178>
    10a6:	6f ef       	ldi	r22, 0xFF	; 255
    10a8:	7f ef       	ldi	r23, 0xFF	; 255
    10aa:	c5 01       	movw	r24, r10
    10ac:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <strnlen_P>
    10b0:	4c 01       	movw	r8, r24
    10b2:	f3 2d       	mov	r31, r3
    10b4:	f0 68       	ori	r31, 0x80	; 128
    10b6:	3f 2e       	mov	r3, r31
    10b8:	82 01       	movw	r16, r4
    10ba:	33 fc       	sbrc	r3, 3
    10bc:	1b c0       	rjmp	.+54     	; 0x10f4 <vfprintf+0x1c2>
    10be:	82 2d       	mov	r24, r2
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	88 16       	cp	r8, r24
    10c4:	99 06       	cpc	r9, r25
    10c6:	b0 f4       	brcc	.+44     	; 0x10f4 <vfprintf+0x1c2>
    10c8:	b6 01       	movw	r22, r12
    10ca:	80 e2       	ldi	r24, 0x20	; 32
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	0e 94 90 09 	call	0x1320	; 0x1320 <fputc>
    10d2:	2a 94       	dec	r2
    10d4:	f4 cf       	rjmp	.-24     	; 0x10be <vfprintf+0x18c>
    10d6:	f5 01       	movw	r30, r10
    10d8:	37 fc       	sbrc	r3, 7
    10da:	85 91       	lpm	r24, Z+
    10dc:	37 fe       	sbrs	r3, 7
    10de:	81 91       	ld	r24, Z+
    10e0:	5f 01       	movw	r10, r30
    10e2:	b6 01       	movw	r22, r12
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	0e 94 90 09 	call	0x1320	; 0x1320 <fputc>
    10ea:	21 10       	cpse	r2, r1
    10ec:	2a 94       	dec	r2
    10ee:	21 e0       	ldi	r18, 0x01	; 1
    10f0:	82 1a       	sub	r8, r18
    10f2:	91 08       	sbc	r9, r1
    10f4:	81 14       	cp	r8, r1
    10f6:	91 04       	cpc	r9, r1
    10f8:	71 f7       	brne	.-36     	; 0x10d6 <vfprintf+0x1a4>
    10fa:	e8 c0       	rjmp	.+464    	; 0x12cc <vfprintf+0x39a>
    10fc:	84 36       	cpi	r24, 0x64	; 100
    10fe:	11 f0       	breq	.+4      	; 0x1104 <vfprintf+0x1d2>
    1100:	89 36       	cpi	r24, 0x69	; 105
    1102:	41 f5       	brne	.+80     	; 0x1154 <vfprintf+0x222>
    1104:	f8 01       	movw	r30, r16
    1106:	37 fe       	sbrs	r3, 7
    1108:	07 c0       	rjmp	.+14     	; 0x1118 <vfprintf+0x1e6>
    110a:	60 81       	ld	r22, Z
    110c:	71 81       	ldd	r23, Z+1	; 0x01
    110e:	82 81       	ldd	r24, Z+2	; 0x02
    1110:	93 81       	ldd	r25, Z+3	; 0x03
    1112:	0c 5f       	subi	r16, 0xFC	; 252
    1114:	1f 4f       	sbci	r17, 0xFF	; 255
    1116:	08 c0       	rjmp	.+16     	; 0x1128 <vfprintf+0x1f6>
    1118:	60 81       	ld	r22, Z
    111a:	71 81       	ldd	r23, Z+1	; 0x01
    111c:	07 2e       	mov	r0, r23
    111e:	00 0c       	add	r0, r0
    1120:	88 0b       	sbc	r24, r24
    1122:	99 0b       	sbc	r25, r25
    1124:	0e 5f       	subi	r16, 0xFE	; 254
    1126:	1f 4f       	sbci	r17, 0xFF	; 255
    1128:	f3 2d       	mov	r31, r3
    112a:	ff 76       	andi	r31, 0x6F	; 111
    112c:	3f 2e       	mov	r3, r31
    112e:	97 ff       	sbrs	r25, 7
    1130:	09 c0       	rjmp	.+18     	; 0x1144 <vfprintf+0x212>
    1132:	90 95       	com	r25
    1134:	80 95       	com	r24
    1136:	70 95       	com	r23
    1138:	61 95       	neg	r22
    113a:	7f 4f       	sbci	r23, 0xFF	; 255
    113c:	8f 4f       	sbci	r24, 0xFF	; 255
    113e:	9f 4f       	sbci	r25, 0xFF	; 255
    1140:	f0 68       	ori	r31, 0x80	; 128
    1142:	3f 2e       	mov	r3, r31
    1144:	2a e0       	ldi	r18, 0x0A	; 10
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	a3 01       	movw	r20, r6
    114a:	0e 94 cc 09 	call	0x1398	; 0x1398 <__ultoa_invert>
    114e:	88 2e       	mov	r8, r24
    1150:	86 18       	sub	r8, r6
    1152:	45 c0       	rjmp	.+138    	; 0x11de <vfprintf+0x2ac>
    1154:	85 37       	cpi	r24, 0x75	; 117
    1156:	31 f4       	brne	.+12     	; 0x1164 <vfprintf+0x232>
    1158:	23 2d       	mov	r18, r3
    115a:	2f 7e       	andi	r18, 0xEF	; 239
    115c:	b2 2e       	mov	r11, r18
    115e:	2a e0       	ldi	r18, 0x0A	; 10
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	25 c0       	rjmp	.+74     	; 0x11ae <vfprintf+0x27c>
    1164:	93 2d       	mov	r25, r3
    1166:	99 7f       	andi	r25, 0xF9	; 249
    1168:	b9 2e       	mov	r11, r25
    116a:	8f 36       	cpi	r24, 0x6F	; 111
    116c:	c1 f0       	breq	.+48     	; 0x119e <vfprintf+0x26c>
    116e:	18 f4       	brcc	.+6      	; 0x1176 <vfprintf+0x244>
    1170:	88 35       	cpi	r24, 0x58	; 88
    1172:	79 f0       	breq	.+30     	; 0x1192 <vfprintf+0x260>
    1174:	b5 c0       	rjmp	.+362    	; 0x12e0 <vfprintf+0x3ae>
    1176:	80 37       	cpi	r24, 0x70	; 112
    1178:	19 f0       	breq	.+6      	; 0x1180 <vfprintf+0x24e>
    117a:	88 37       	cpi	r24, 0x78	; 120
    117c:	21 f0       	breq	.+8      	; 0x1186 <vfprintf+0x254>
    117e:	b0 c0       	rjmp	.+352    	; 0x12e0 <vfprintf+0x3ae>
    1180:	e9 2f       	mov	r30, r25
    1182:	e0 61       	ori	r30, 0x10	; 16
    1184:	be 2e       	mov	r11, r30
    1186:	b4 fe       	sbrs	r11, 4
    1188:	0d c0       	rjmp	.+26     	; 0x11a4 <vfprintf+0x272>
    118a:	fb 2d       	mov	r31, r11
    118c:	f4 60       	ori	r31, 0x04	; 4
    118e:	bf 2e       	mov	r11, r31
    1190:	09 c0       	rjmp	.+18     	; 0x11a4 <vfprintf+0x272>
    1192:	34 fe       	sbrs	r3, 4
    1194:	0a c0       	rjmp	.+20     	; 0x11aa <vfprintf+0x278>
    1196:	29 2f       	mov	r18, r25
    1198:	26 60       	ori	r18, 0x06	; 6
    119a:	b2 2e       	mov	r11, r18
    119c:	06 c0       	rjmp	.+12     	; 0x11aa <vfprintf+0x278>
    119e:	28 e0       	ldi	r18, 0x08	; 8
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	05 c0       	rjmp	.+10     	; 0x11ae <vfprintf+0x27c>
    11a4:	20 e1       	ldi	r18, 0x10	; 16
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <vfprintf+0x27c>
    11aa:	20 e1       	ldi	r18, 0x10	; 16
    11ac:	32 e0       	ldi	r19, 0x02	; 2
    11ae:	f8 01       	movw	r30, r16
    11b0:	b7 fe       	sbrs	r11, 7
    11b2:	07 c0       	rjmp	.+14     	; 0x11c2 <vfprintf+0x290>
    11b4:	60 81       	ld	r22, Z
    11b6:	71 81       	ldd	r23, Z+1	; 0x01
    11b8:	82 81       	ldd	r24, Z+2	; 0x02
    11ba:	93 81       	ldd	r25, Z+3	; 0x03
    11bc:	0c 5f       	subi	r16, 0xFC	; 252
    11be:	1f 4f       	sbci	r17, 0xFF	; 255
    11c0:	06 c0       	rjmp	.+12     	; 0x11ce <vfprintf+0x29c>
    11c2:	60 81       	ld	r22, Z
    11c4:	71 81       	ldd	r23, Z+1	; 0x01
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	0e 5f       	subi	r16, 0xFE	; 254
    11cc:	1f 4f       	sbci	r17, 0xFF	; 255
    11ce:	a3 01       	movw	r20, r6
    11d0:	0e 94 cc 09 	call	0x1398	; 0x1398 <__ultoa_invert>
    11d4:	88 2e       	mov	r8, r24
    11d6:	86 18       	sub	r8, r6
    11d8:	fb 2d       	mov	r31, r11
    11da:	ff 77       	andi	r31, 0x7F	; 127
    11dc:	3f 2e       	mov	r3, r31
    11de:	36 fe       	sbrs	r3, 6
    11e0:	0d c0       	rjmp	.+26     	; 0x11fc <vfprintf+0x2ca>
    11e2:	23 2d       	mov	r18, r3
    11e4:	2e 7f       	andi	r18, 0xFE	; 254
    11e6:	a2 2e       	mov	r10, r18
    11e8:	89 14       	cp	r8, r9
    11ea:	58 f4       	brcc	.+22     	; 0x1202 <vfprintf+0x2d0>
    11ec:	34 fe       	sbrs	r3, 4
    11ee:	0b c0       	rjmp	.+22     	; 0x1206 <vfprintf+0x2d4>
    11f0:	32 fc       	sbrc	r3, 2
    11f2:	09 c0       	rjmp	.+18     	; 0x1206 <vfprintf+0x2d4>
    11f4:	83 2d       	mov	r24, r3
    11f6:	8e 7e       	andi	r24, 0xEE	; 238
    11f8:	a8 2e       	mov	r10, r24
    11fa:	05 c0       	rjmp	.+10     	; 0x1206 <vfprintf+0x2d4>
    11fc:	b8 2c       	mov	r11, r8
    11fe:	a3 2c       	mov	r10, r3
    1200:	03 c0       	rjmp	.+6      	; 0x1208 <vfprintf+0x2d6>
    1202:	b8 2c       	mov	r11, r8
    1204:	01 c0       	rjmp	.+2      	; 0x1208 <vfprintf+0x2d6>
    1206:	b9 2c       	mov	r11, r9
    1208:	a4 fe       	sbrs	r10, 4
    120a:	0f c0       	rjmp	.+30     	; 0x122a <vfprintf+0x2f8>
    120c:	fe 01       	movw	r30, r28
    120e:	e8 0d       	add	r30, r8
    1210:	f1 1d       	adc	r31, r1
    1212:	80 81       	ld	r24, Z
    1214:	80 33       	cpi	r24, 0x30	; 48
    1216:	21 f4       	brne	.+8      	; 0x1220 <vfprintf+0x2ee>
    1218:	9a 2d       	mov	r25, r10
    121a:	99 7e       	andi	r25, 0xE9	; 233
    121c:	a9 2e       	mov	r10, r25
    121e:	09 c0       	rjmp	.+18     	; 0x1232 <vfprintf+0x300>
    1220:	a2 fe       	sbrs	r10, 2
    1222:	06 c0       	rjmp	.+12     	; 0x1230 <vfprintf+0x2fe>
    1224:	b3 94       	inc	r11
    1226:	b3 94       	inc	r11
    1228:	04 c0       	rjmp	.+8      	; 0x1232 <vfprintf+0x300>
    122a:	8a 2d       	mov	r24, r10
    122c:	86 78       	andi	r24, 0x86	; 134
    122e:	09 f0       	breq	.+2      	; 0x1232 <vfprintf+0x300>
    1230:	b3 94       	inc	r11
    1232:	a3 fc       	sbrc	r10, 3
    1234:	11 c0       	rjmp	.+34     	; 0x1258 <vfprintf+0x326>
    1236:	a0 fe       	sbrs	r10, 0
    1238:	06 c0       	rjmp	.+12     	; 0x1246 <vfprintf+0x314>
    123a:	b2 14       	cp	r11, r2
    123c:	88 f4       	brcc	.+34     	; 0x1260 <vfprintf+0x32e>
    123e:	28 0c       	add	r2, r8
    1240:	92 2c       	mov	r9, r2
    1242:	9b 18       	sub	r9, r11
    1244:	0e c0       	rjmp	.+28     	; 0x1262 <vfprintf+0x330>
    1246:	b2 14       	cp	r11, r2
    1248:	60 f4       	brcc	.+24     	; 0x1262 <vfprintf+0x330>
    124a:	b6 01       	movw	r22, r12
    124c:	80 e2       	ldi	r24, 0x20	; 32
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	0e 94 90 09 	call	0x1320	; 0x1320 <fputc>
    1254:	b3 94       	inc	r11
    1256:	f7 cf       	rjmp	.-18     	; 0x1246 <vfprintf+0x314>
    1258:	b2 14       	cp	r11, r2
    125a:	18 f4       	brcc	.+6      	; 0x1262 <vfprintf+0x330>
    125c:	2b 18       	sub	r2, r11
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <vfprintf+0x332>
    1260:	98 2c       	mov	r9, r8
    1262:	21 2c       	mov	r2, r1
    1264:	a4 fe       	sbrs	r10, 4
    1266:	10 c0       	rjmp	.+32     	; 0x1288 <vfprintf+0x356>
    1268:	b6 01       	movw	r22, r12
    126a:	80 e3       	ldi	r24, 0x30	; 48
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	0e 94 90 09 	call	0x1320	; 0x1320 <fputc>
    1272:	a2 fe       	sbrs	r10, 2
    1274:	17 c0       	rjmp	.+46     	; 0x12a4 <vfprintf+0x372>
    1276:	a1 fc       	sbrc	r10, 1
    1278:	03 c0       	rjmp	.+6      	; 0x1280 <vfprintf+0x34e>
    127a:	88 e7       	ldi	r24, 0x78	; 120
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <vfprintf+0x352>
    1280:	88 e5       	ldi	r24, 0x58	; 88
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	b6 01       	movw	r22, r12
    1286:	0c c0       	rjmp	.+24     	; 0x12a0 <vfprintf+0x36e>
    1288:	8a 2d       	mov	r24, r10
    128a:	86 78       	andi	r24, 0x86	; 134
    128c:	59 f0       	breq	.+22     	; 0x12a4 <vfprintf+0x372>
    128e:	a1 fe       	sbrs	r10, 1
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <vfprintf+0x364>
    1292:	8b e2       	ldi	r24, 0x2B	; 43
    1294:	01 c0       	rjmp	.+2      	; 0x1298 <vfprintf+0x366>
    1296:	80 e2       	ldi	r24, 0x20	; 32
    1298:	a7 fc       	sbrc	r10, 7
    129a:	8d e2       	ldi	r24, 0x2D	; 45
    129c:	b6 01       	movw	r22, r12
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	0e 94 90 09 	call	0x1320	; 0x1320 <fputc>
    12a4:	89 14       	cp	r8, r9
    12a6:	38 f4       	brcc	.+14     	; 0x12b6 <vfprintf+0x384>
    12a8:	b6 01       	movw	r22, r12
    12aa:	80 e3       	ldi	r24, 0x30	; 48
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	0e 94 90 09 	call	0x1320	; 0x1320 <fputc>
    12b2:	9a 94       	dec	r9
    12b4:	f7 cf       	rjmp	.-18     	; 0x12a4 <vfprintf+0x372>
    12b6:	8a 94       	dec	r8
    12b8:	f3 01       	movw	r30, r6
    12ba:	e8 0d       	add	r30, r8
    12bc:	f1 1d       	adc	r31, r1
    12be:	80 81       	ld	r24, Z
    12c0:	b6 01       	movw	r22, r12
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	0e 94 90 09 	call	0x1320	; 0x1320 <fputc>
    12c8:	81 10       	cpse	r8, r1
    12ca:	f5 cf       	rjmp	.-22     	; 0x12b6 <vfprintf+0x384>
    12cc:	22 20       	and	r2, r2
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <vfprintf+0x3a0>
    12d0:	42 ce       	rjmp	.-892    	; 0xf56 <vfprintf+0x24>
    12d2:	b6 01       	movw	r22, r12
    12d4:	80 e2       	ldi	r24, 0x20	; 32
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	0e 94 90 09 	call	0x1320	; 0x1320 <fputc>
    12dc:	2a 94       	dec	r2
    12de:	f6 cf       	rjmp	.-20     	; 0x12cc <vfprintf+0x39a>
    12e0:	f6 01       	movw	r30, r12
    12e2:	86 81       	ldd	r24, Z+6	; 0x06
    12e4:	97 81       	ldd	r25, Z+7	; 0x07
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <vfprintf+0x3ba>
    12e8:	8f ef       	ldi	r24, 0xFF	; 255
    12ea:	9f ef       	ldi	r25, 0xFF	; 255
    12ec:	2b 96       	adiw	r28, 0x0b	; 11
    12ee:	e2 e1       	ldi	r30, 0x12	; 18
    12f0:	0c 94 46 0a 	jmp	0x148c	; 0x148c <__epilogue_restores__>

000012f4 <strnlen_P>:
    12f4:	fc 01       	movw	r30, r24
    12f6:	05 90       	lpm	r0, Z+
    12f8:	61 50       	subi	r22, 0x01	; 1
    12fa:	70 40       	sbci	r23, 0x00	; 0
    12fc:	01 10       	cpse	r0, r1
    12fe:	d8 f7       	brcc	.-10     	; 0x12f6 <strnlen_P+0x2>
    1300:	80 95       	com	r24
    1302:	90 95       	com	r25
    1304:	8e 0f       	add	r24, r30
    1306:	9f 1f       	adc	r25, r31
    1308:	08 95       	ret

0000130a <strnlen>:
    130a:	fc 01       	movw	r30, r24
    130c:	61 50       	subi	r22, 0x01	; 1
    130e:	70 40       	sbci	r23, 0x00	; 0
    1310:	01 90       	ld	r0, Z+
    1312:	01 10       	cpse	r0, r1
    1314:	d8 f7       	brcc	.-10     	; 0x130c <strnlen+0x2>
    1316:	80 95       	com	r24
    1318:	90 95       	com	r25
    131a:	8e 0f       	add	r24, r30
    131c:	9f 1f       	adc	r25, r31
    131e:	08 95       	ret

00001320 <fputc>:
    1320:	0f 93       	push	r16
    1322:	1f 93       	push	r17
    1324:	cf 93       	push	r28
    1326:	df 93       	push	r29
    1328:	fb 01       	movw	r30, r22
    132a:	23 81       	ldd	r18, Z+3	; 0x03
    132c:	21 fd       	sbrc	r18, 1
    132e:	03 c0       	rjmp	.+6      	; 0x1336 <fputc+0x16>
    1330:	8f ef       	ldi	r24, 0xFF	; 255
    1332:	9f ef       	ldi	r25, 0xFF	; 255
    1334:	2c c0       	rjmp	.+88     	; 0x138e <fputc+0x6e>
    1336:	22 ff       	sbrs	r18, 2
    1338:	16 c0       	rjmp	.+44     	; 0x1366 <fputc+0x46>
    133a:	46 81       	ldd	r20, Z+6	; 0x06
    133c:	57 81       	ldd	r21, Z+7	; 0x07
    133e:	24 81       	ldd	r18, Z+4	; 0x04
    1340:	35 81       	ldd	r19, Z+5	; 0x05
    1342:	42 17       	cp	r20, r18
    1344:	53 07       	cpc	r21, r19
    1346:	44 f4       	brge	.+16     	; 0x1358 <fputc+0x38>
    1348:	a0 81       	ld	r26, Z
    134a:	b1 81       	ldd	r27, Z+1	; 0x01
    134c:	9d 01       	movw	r18, r26
    134e:	2f 5f       	subi	r18, 0xFF	; 255
    1350:	3f 4f       	sbci	r19, 0xFF	; 255
    1352:	31 83       	std	Z+1, r19	; 0x01
    1354:	20 83       	st	Z, r18
    1356:	8c 93       	st	X, r24
    1358:	26 81       	ldd	r18, Z+6	; 0x06
    135a:	37 81       	ldd	r19, Z+7	; 0x07
    135c:	2f 5f       	subi	r18, 0xFF	; 255
    135e:	3f 4f       	sbci	r19, 0xFF	; 255
    1360:	37 83       	std	Z+7, r19	; 0x07
    1362:	26 83       	std	Z+6, r18	; 0x06
    1364:	14 c0       	rjmp	.+40     	; 0x138e <fputc+0x6e>
    1366:	8b 01       	movw	r16, r22
    1368:	ec 01       	movw	r28, r24
    136a:	fb 01       	movw	r30, r22
    136c:	00 84       	ldd	r0, Z+8	; 0x08
    136e:	f1 85       	ldd	r31, Z+9	; 0x09
    1370:	e0 2d       	mov	r30, r0
    1372:	09 95       	icall
    1374:	89 2b       	or	r24, r25
    1376:	e1 f6       	brne	.-72     	; 0x1330 <fputc+0x10>
    1378:	d8 01       	movw	r26, r16
    137a:	16 96       	adiw	r26, 0x06	; 6
    137c:	8d 91       	ld	r24, X+
    137e:	9c 91       	ld	r25, X
    1380:	17 97       	sbiw	r26, 0x07	; 7
    1382:	01 96       	adiw	r24, 0x01	; 1
    1384:	17 96       	adiw	r26, 0x07	; 7
    1386:	9c 93       	st	X, r25
    1388:	8e 93       	st	-X, r24
    138a:	16 97       	sbiw	r26, 0x06	; 6
    138c:	ce 01       	movw	r24, r28
    138e:	df 91       	pop	r29
    1390:	cf 91       	pop	r28
    1392:	1f 91       	pop	r17
    1394:	0f 91       	pop	r16
    1396:	08 95       	ret

00001398 <__ultoa_invert>:
    1398:	fa 01       	movw	r30, r20
    139a:	aa 27       	eor	r26, r26
    139c:	28 30       	cpi	r18, 0x08	; 8
    139e:	51 f1       	breq	.+84     	; 0x13f4 <__ultoa_invert+0x5c>
    13a0:	20 31       	cpi	r18, 0x10	; 16
    13a2:	81 f1       	breq	.+96     	; 0x1404 <__ultoa_invert+0x6c>
    13a4:	e8 94       	clt
    13a6:	6f 93       	push	r22
    13a8:	6e 7f       	andi	r22, 0xFE	; 254
    13aa:	6e 5f       	subi	r22, 0xFE	; 254
    13ac:	7f 4f       	sbci	r23, 0xFF	; 255
    13ae:	8f 4f       	sbci	r24, 0xFF	; 255
    13b0:	9f 4f       	sbci	r25, 0xFF	; 255
    13b2:	af 4f       	sbci	r26, 0xFF	; 255
    13b4:	b1 e0       	ldi	r27, 0x01	; 1
    13b6:	3e d0       	rcall	.+124    	; 0x1434 <__ultoa_invert+0x9c>
    13b8:	b4 e0       	ldi	r27, 0x04	; 4
    13ba:	3c d0       	rcall	.+120    	; 0x1434 <__ultoa_invert+0x9c>
    13bc:	67 0f       	add	r22, r23
    13be:	78 1f       	adc	r23, r24
    13c0:	89 1f       	adc	r24, r25
    13c2:	9a 1f       	adc	r25, r26
    13c4:	a1 1d       	adc	r26, r1
    13c6:	68 0f       	add	r22, r24
    13c8:	79 1f       	adc	r23, r25
    13ca:	8a 1f       	adc	r24, r26
    13cc:	91 1d       	adc	r25, r1
    13ce:	a1 1d       	adc	r26, r1
    13d0:	6a 0f       	add	r22, r26
    13d2:	71 1d       	adc	r23, r1
    13d4:	81 1d       	adc	r24, r1
    13d6:	91 1d       	adc	r25, r1
    13d8:	a1 1d       	adc	r26, r1
    13da:	20 d0       	rcall	.+64     	; 0x141c <__ultoa_invert+0x84>
    13dc:	09 f4       	brne	.+2      	; 0x13e0 <__ultoa_invert+0x48>
    13de:	68 94       	set
    13e0:	3f 91       	pop	r19
    13e2:	2a e0       	ldi	r18, 0x0A	; 10
    13e4:	26 9f       	mul	r18, r22
    13e6:	11 24       	eor	r1, r1
    13e8:	30 19       	sub	r19, r0
    13ea:	30 5d       	subi	r19, 0xD0	; 208
    13ec:	31 93       	st	Z+, r19
    13ee:	de f6       	brtc	.-74     	; 0x13a6 <__ultoa_invert+0xe>
    13f0:	cf 01       	movw	r24, r30
    13f2:	08 95       	ret
    13f4:	46 2f       	mov	r20, r22
    13f6:	47 70       	andi	r20, 0x07	; 7
    13f8:	40 5d       	subi	r20, 0xD0	; 208
    13fa:	41 93       	st	Z+, r20
    13fc:	b3 e0       	ldi	r27, 0x03	; 3
    13fe:	0f d0       	rcall	.+30     	; 0x141e <__ultoa_invert+0x86>
    1400:	c9 f7       	brne	.-14     	; 0x13f4 <__ultoa_invert+0x5c>
    1402:	f6 cf       	rjmp	.-20     	; 0x13f0 <__ultoa_invert+0x58>
    1404:	46 2f       	mov	r20, r22
    1406:	4f 70       	andi	r20, 0x0F	; 15
    1408:	40 5d       	subi	r20, 0xD0	; 208
    140a:	4a 33       	cpi	r20, 0x3A	; 58
    140c:	18 f0       	brcs	.+6      	; 0x1414 <__ultoa_invert+0x7c>
    140e:	49 5d       	subi	r20, 0xD9	; 217
    1410:	31 fd       	sbrc	r19, 1
    1412:	40 52       	subi	r20, 0x20	; 32
    1414:	41 93       	st	Z+, r20
    1416:	02 d0       	rcall	.+4      	; 0x141c <__ultoa_invert+0x84>
    1418:	a9 f7       	brne	.-22     	; 0x1404 <__ultoa_invert+0x6c>
    141a:	ea cf       	rjmp	.-44     	; 0x13f0 <__ultoa_invert+0x58>
    141c:	b4 e0       	ldi	r27, 0x04	; 4
    141e:	a6 95       	lsr	r26
    1420:	97 95       	ror	r25
    1422:	87 95       	ror	r24
    1424:	77 95       	ror	r23
    1426:	67 95       	ror	r22
    1428:	ba 95       	dec	r27
    142a:	c9 f7       	brne	.-14     	; 0x141e <__ultoa_invert+0x86>
    142c:	00 97       	sbiw	r24, 0x00	; 0
    142e:	61 05       	cpc	r22, r1
    1430:	71 05       	cpc	r23, r1
    1432:	08 95       	ret
    1434:	9b 01       	movw	r18, r22
    1436:	ac 01       	movw	r20, r24
    1438:	0a 2e       	mov	r0, r26
    143a:	06 94       	lsr	r0
    143c:	57 95       	ror	r21
    143e:	47 95       	ror	r20
    1440:	37 95       	ror	r19
    1442:	27 95       	ror	r18
    1444:	ba 95       	dec	r27
    1446:	c9 f7       	brne	.-14     	; 0x143a <__ultoa_invert+0xa2>
    1448:	62 0f       	add	r22, r18
    144a:	73 1f       	adc	r23, r19
    144c:	84 1f       	adc	r24, r20
    144e:	95 1f       	adc	r25, r21
    1450:	a0 1d       	adc	r26, r0
    1452:	08 95       	ret

00001454 <__prologue_saves__>:
    1454:	2f 92       	push	r2
    1456:	3f 92       	push	r3
    1458:	4f 92       	push	r4
    145a:	5f 92       	push	r5
    145c:	6f 92       	push	r6
    145e:	7f 92       	push	r7
    1460:	8f 92       	push	r8
    1462:	9f 92       	push	r9
    1464:	af 92       	push	r10
    1466:	bf 92       	push	r11
    1468:	cf 92       	push	r12
    146a:	df 92       	push	r13
    146c:	ef 92       	push	r14
    146e:	ff 92       	push	r15
    1470:	0f 93       	push	r16
    1472:	1f 93       	push	r17
    1474:	cf 93       	push	r28
    1476:	df 93       	push	r29
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
    147c:	ca 1b       	sub	r28, r26
    147e:	db 0b       	sbc	r29, r27
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	f8 94       	cli
    1484:	de bf       	out	0x3e, r29	; 62
    1486:	0f be       	out	0x3f, r0	; 63
    1488:	cd bf       	out	0x3d, r28	; 61
    148a:	09 94       	ijmp

0000148c <__epilogue_restores__>:
    148c:	2a 88       	ldd	r2, Y+18	; 0x12
    148e:	39 88       	ldd	r3, Y+17	; 0x11
    1490:	48 88       	ldd	r4, Y+16	; 0x10
    1492:	5f 84       	ldd	r5, Y+15	; 0x0f
    1494:	6e 84       	ldd	r6, Y+14	; 0x0e
    1496:	7d 84       	ldd	r7, Y+13	; 0x0d
    1498:	8c 84       	ldd	r8, Y+12	; 0x0c
    149a:	9b 84       	ldd	r9, Y+11	; 0x0b
    149c:	aa 84       	ldd	r10, Y+10	; 0x0a
    149e:	b9 84       	ldd	r11, Y+9	; 0x09
    14a0:	c8 84       	ldd	r12, Y+8	; 0x08
    14a2:	df 80       	ldd	r13, Y+7	; 0x07
    14a4:	ee 80       	ldd	r14, Y+6	; 0x06
    14a6:	fd 80       	ldd	r15, Y+5	; 0x05
    14a8:	0c 81       	ldd	r16, Y+4	; 0x04
    14aa:	1b 81       	ldd	r17, Y+3	; 0x03
    14ac:	aa 81       	ldd	r26, Y+2	; 0x02
    14ae:	b9 81       	ldd	r27, Y+1	; 0x01
    14b0:	ce 0f       	add	r28, r30
    14b2:	d1 1d       	adc	r29, r1
    14b4:	0f b6       	in	r0, 0x3f	; 63
    14b6:	f8 94       	cli
    14b8:	de bf       	out	0x3e, r29	; 62
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	cd bf       	out	0x3d, r28	; 61
    14be:	ed 01       	movw	r28, r26
    14c0:	08 95       	ret

000014c2 <_exit>:
    14c2:	f8 94       	cli

000014c4 <__stop_program>:
    14c4:	ff cf       	rjmp	.-2      	; 0x14c4 <__stop_program>
