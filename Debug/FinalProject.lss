
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013c  00800100  0000148e  00001522  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000148e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  0080023c  0080023c  0000165e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000165e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00001700  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011bc  00000000  00000000  000017a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b17  00000000  00000000  0000295c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008fd  00000000  00000000  00003473  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000029c  00000000  00000000  00003d70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000068e  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007d1  00000000  00000000  0000469a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00004e6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__ctors_end>
       4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
       8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
       c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      10:	0c 94 0a 02 	jmp	0x414	; 0x414 <__vector_4>
      14:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      18:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      1c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      20:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      24:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      28:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      2c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      30:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      34:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__vector_13>
      38:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      3c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      40:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      44:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      48:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      4c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      50:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      54:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      58:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      5c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      60:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      64:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      68:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      6c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      70:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      74:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      78:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      7c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      80:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      84:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      88:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      8c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      90:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      94:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      98:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      9c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      a0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      a4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      a8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      ac:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      b0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      b4:	08 00       	.word	0x0008	; ????
      b6:	00 00       	nop
      b8:	be 92       	st	-X, r11
      ba:	24 49       	sbci	r18, 0x94	; 148
      bc:	12 3e       	cpi	r17, 0xE2	; 226
      be:	ab aa       	std	Y+51, r10	; 0x33
      c0:	aa 2a       	or	r10, r26
      c2:	be cd       	rjmp	.-1156   	; 0xfffffc40 <__eeprom_end+0xff7efc40>
      c4:	cc cc       	rjmp	.-1640   	; 0xfffffa5e <__eeprom_end+0xff7efa5e>
      c6:	4c 3e       	cpi	r20, 0xEC	; 236
      c8:	00 00       	nop
      ca:	00 80       	ld	r0, Z
      cc:	be ab       	std	Y+54, r27	; 0x36
      ce:	aa aa       	std	Y+50, r10	; 0x32
      d0:	aa 3e       	cpi	r26, 0xEA	; 234
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	bf 00       	.word	0x00bf	; ????
      d8:	00 00       	nop
      da:	80 3f       	cpi	r24, 0xF0	; 240
      dc:	00 00       	nop
      de:	00 00       	nop
      e0:	00 08       	sbc	r0, r0
      e2:	41 78       	andi	r20, 0x81	; 129
      e4:	d3 bb       	out	0x13, r29	; 19
      e6:	43 87       	std	Z+11, r20	; 0x0b
      e8:	d1 13       	cpse	r29, r17
      ea:	3d 19       	sub	r19, r13
      ec:	0e 3c       	cpi	r16, 0xCE	; 206
      ee:	c3 bd       	out	0x23, r28	; 35
      f0:	42 82       	std	Z+2, r4	; 0x02
      f2:	ad 2b       	or	r26, r29
      f4:	3e 68       	ori	r19, 0x8E	; 142
      f6:	ec 82       	std	Y+4, r14	; 0x04
      f8:	76 be       	out	0x36, r7	; 54
      fa:	d9 8f       	std	Y+25, r29	; 0x19
      fc:	e1 a9       	ldd	r30, Z+49	; 0x31
      fe:	3e 4c       	sbci	r19, 0xCE	; 206
     100:	80 ef       	ldi	r24, 0xF0	; 240
     102:	ff be       	out	0x3f, r15	; 63
     104:	01 c4       	rjmp	.+2050   	; 0x908 <__stack+0x9>
     106:	ff 7f       	andi	r31, 0xFF	; 255
     108:	3f 00       	.word	0x003f	; ????
     10a:	00 00       	nop
	...

0000010e <__ctors_end>:
     10e:	11 24       	eor	r1, r1
     110:	1f be       	out	0x3f, r1	; 63
     112:	cf ef       	ldi	r28, 0xFF	; 255
     114:	d8 e0       	ldi	r29, 0x08	; 8
     116:	de bf       	out	0x3e, r29	; 62
     118:	cd bf       	out	0x3d, r28	; 61

0000011a <__do_copy_data>:
     11a:	12 e0       	ldi	r17, 0x02	; 2
     11c:	a0 e0       	ldi	r26, 0x00	; 0
     11e:	b1 e0       	ldi	r27, 0x01	; 1
     120:	ee e8       	ldi	r30, 0x8E	; 142
     122:	f4 e1       	ldi	r31, 0x14	; 20
     124:	02 c0       	rjmp	.+4      	; 0x12a <__do_copy_data+0x10>
     126:	05 90       	lpm	r0, Z+
     128:	0d 92       	st	X+, r0
     12a:	ac 33       	cpi	r26, 0x3C	; 60
     12c:	b1 07       	cpc	r27, r17
     12e:	d9 f7       	brne	.-10     	; 0x126 <__do_copy_data+0xc>

00000130 <__do_clear_bss>:
     130:	22 e0       	ldi	r18, 0x02	; 2
     132:	ac e3       	ldi	r26, 0x3C	; 60
     134:	b2 e0       	ldi	r27, 0x02	; 2
     136:	01 c0       	rjmp	.+2      	; 0x13a <.do_clear_bss_start>

00000138 <.do_clear_bss_loop>:
     138:	1d 92       	st	X+, r1

0000013a <.do_clear_bss_start>:
     13a:	ab 34       	cpi	r26, 0x4B	; 75
     13c:	b2 07       	cpc	r27, r18
     13e:	e1 f7       	brne	.-8      	; 0x138 <.do_clear_bss_loop>
     140:	0e 94 6d 04 	call	0x8da	; 0x8da <main>
     144:	0c 94 45 0a 	jmp	0x148a	; 0x148a <_exit>

00000148 <__bad_interrupt>:
     148:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000014c <Mega328P_Init>:
.section ".text"			
.global Mega328P_Init
Mega328P_Init:
		//***********************************************
		//initialize PB0(R*W),PB1(RS),PB2(E) as fixed cleared outputs
		ldi	r16,0x07		// 0b00000111
     14c:	07 e0       	ldi	r16, 0x07	; 7
		out	DDRB,r16		
     14e:	04 b9       	out	0x04, r16	; 4
		ldi	r16,0			// 0b00000000
     150:	00 e0       	ldi	r16, 0x00	; 0
		out	PORTB,r16		
     152:	05 b9       	out	0x05, r16	; 5
		//***********************************************
		//initialize UART, 8bits, no parity, 1 stop, 9600
		out	U2X0,r16		// 0b00000000	
     154:	01 b9       	out	0x01, r16	; 1
		ldi	r17,0x0			
     156:	10 e0       	ldi	r17, 0x00	; 0
		ldi	r16,0x67		
     158:	07 e6       	ldi	r16, 0x67	; 103
		sts	UBRR0H,r17		// 0b00000000
     15a:	10 93 c5 00 	sts	0x00C5, r17	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
		sts	UBRR0L,r16		// 0b01100111
     15e:	00 93 c4 00 	sts	0x00C4, r16	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
		ldi	r16,24			
     162:	08 e1       	ldi	r16, 0x18	; 24
		sts	UCSR0B,r16		// 0b00011000
     164:	00 93 c1 00 	sts	0x00C1, r16	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
		ldi	r16,6			
     168:	06 e0       	ldi	r16, 0x06	; 6
		sts	UCSR0C,r16		// 0b00000110
     16a:	00 93 c2 00 	sts	0x00C2, r16	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
		//************************************************
		//initialize ADC
		ldi r16,0x87		
     16e:	07 e8       	ldi	r16, 0x87	; 135
		sts	ADCSRA,r16		// 0b10000111
     170:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
		ldi r16,0x40		
     174:	00 e4       	ldi	r16, 0x40	; 64
		sts ADMUX,r16		// 0b01000000
     176:	00 93 7c 00 	sts	0x007C, r16	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
		ldi r16,0			
     17a:	00 e0       	ldi	r16, 0x00	; 0
		sts ADCSRB,r16		// 0b00000000
     17c:	00 93 7b 00 	sts	0x007B, r16	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
		ldi r16,0xFE		
     180:	0e ef       	ldi	r16, 0xFE	; 254
		sts DIDR0,r16		// 0b11111110
     182:	00 93 7e 00 	sts	0x007E, r16	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
		ldi r16,0xFF		
     186:	0f ef       	ldi	r16, 0xFF	; 255
		sts DIDR1,r16		// 0b11111111
     188:	00 93 7f 00 	sts	0x007F, r16	; 0x80007f <__TEXT_REGION_LENGTH__+0x7f807f>
		//************************************************
		//initialize PC1 as output for trigger and PC2 and input for echo
		; Initialize PC1 as output for trigger
		ldi r16, (1<<1)  ; Load register r16 with the bit mask for PC1
     18c:	02 e0       	ldi	r16, 0x02	; 2
		out DDRC, r16    ; Set PC1 as output
     18e:	07 b9       	out	0x07, r16	; 7

		; Initialize PC2 as input for echo
		ldi r16, (1<<2)  ; Load register r16 with the bit mask for PC2
     190:	04 e0       	ldi	r16, 0x04	; 4
		in r17, PORTC    ; Load the current value of PORTC into r17
     192:	18 b1       	in	r17, 0x08	; 8
		or r17, r16      ; Set the bit for PC2 in r17
     194:	10 2b       	or	r17, r16
		out PORTC, r17   ; Write the new value back to PORTC, enabling pull-up resistor for PC2
     196:	18 b9       	out	0x08, r17	; 8

		; Set all pins to low
		ldi r16, 0x00    ; Load register r16 with 0
     198:	00 e0       	ldi	r16, 0x00	; 0
		out PORTC, r16   ; Set all pins to low
     19a:	08 b9       	out	0x08, r16	; 8

0000019c <LCD_Write_Command>:
		//************************************************

.global LCD_Write_Command
LCD_Write_Command:
	call	UART_Off		
     19c:	0e 94 0b 01 	call	0x216	; 0x216 <UART_Off>
	ldi		r16,0xFF		
     1a0:	0f ef       	ldi	r16, 0xFF	; 255
	out		DDRD,r16		
     1a2:	0a b9       	out	0x0a, r16	; 10
	lds		r16,DATA		
     1a4:	00 91 3c 02 	lds	r16, 0x023C	; 0x80023c <__data_end>
	out		PORTD,r16		
     1a8:	0b b9       	out	0x0b, r16	; 11
	ldi		r16,4			
     1aa:	04 e0       	ldi	r16, 0x04	; 4
	out		PORTB,r16		
     1ac:	05 b9       	out	0x05, r16	; 5
	call	LCD_Delay		
     1ae:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_Delay>
	ldi		r16,0			
     1b2:	00 e0       	ldi	r16, 0x00	; 0
	out		PORTB,r16		
     1b4:	05 b9       	out	0x05, r16	; 5
	call	LCD_Delay		
     1b6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_Delay>
	call	UART_On			
     1ba:	0e 94 05 01 	call	0x20a	; 0x20a <UART_On>
	ret						
     1be:	08 95       	ret

000001c0 <LCD_Delay>:

LCD_Delay:
	ldi		r16,0xFA		
     1c0:	0a ef       	ldi	r16, 0xFA	; 250

000001c2 <D0>:
D0:	ldi		r17,0xFF		
     1c2:	1f ef       	ldi	r17, 0xFF	; 255

000001c4 <D1>:
D1:	dec		r17				
     1c4:	1a 95       	dec	r17
	brne	D1				
     1c6:	f1 f7       	brne	.-4      	; 0x1c4 <D1>
	dec		r16				
     1c8:	0a 95       	dec	r16
	brne	D0				
     1ca:	d9 f7       	brne	.-10     	; 0x1c2 <D0>
	ret						
     1cc:	08 95       	ret

000001ce <LCD_Write_Data>:

.global LCD_Write_Data
LCD_Write_Data:
	call	UART_Off		
     1ce:	0e 94 0b 01 	call	0x216	; 0x216 <UART_Off>
	ldi		r16,0xFF		
     1d2:	0f ef       	ldi	r16, 0xFF	; 255
	out		DDRD,r16		
     1d4:	0a b9       	out	0x0a, r16	; 10
	lds		r16,DATA		
     1d6:	00 91 3c 02 	lds	r16, 0x023C	; 0x80023c <__data_end>
	out		PORTD,r16		
     1da:	0b b9       	out	0x0b, r16	; 11
	ldi		r16,6			
     1dc:	06 e0       	ldi	r16, 0x06	; 6
	out		PORTB,r16		
     1de:	05 b9       	out	0x05, r16	; 5
	call	LCD_Delay		
     1e0:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_Delay>
	ldi		r16,0			
     1e4:	00 e0       	ldi	r16, 0x00	; 0
	out		PORTB,r16		
     1e6:	05 b9       	out	0x05, r16	; 5
	call	LCD_Delay		
     1e8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_Delay>
	call	UART_On			
     1ec:	0e 94 05 01 	call	0x20a	; 0x20a <UART_On>
	ret						
     1f0:	08 95       	ret

000001f2 <LCD_Read_Data>:

.global LCD_Read_Data
LCD_Read_Data:
	call	UART_Off		
     1f2:	0e 94 0b 01 	call	0x216	; 0x216 <UART_Off>
	ldi		r16,0x00		
     1f6:	00 e0       	ldi	r16, 0x00	; 0
	out		DDRD,r16		
     1f8:	0a b9       	out	0x0a, r16	; 10
	out		PORTB,4			
     1fa:	45 b8       	out	0x05, r4	; 5
	in		r16,PORTD		
     1fc:	0b b1       	in	r16, 0x0b	; 11
	sts		DATA,r16		
     1fe:	00 93 3c 02 	sts	0x023C, r16	; 0x80023c <__data_end>
	out		PORTB,0			
     202:	05 b8       	out	0x05, r0	; 5
	call	UART_On			
     204:	0e 94 05 01 	call	0x20a	; 0x20a <UART_On>
	ret						
     208:	08 95       	ret

0000020a <UART_On>:

.global UART_On
UART_On:
	ldi		r16,2				
     20a:	02 e0       	ldi	r16, 0x02	; 2
	out		DDRD,r16			
     20c:	0a b9       	out	0x0a, r16	; 10
	ldi		r16,24				
     20e:	08 e1       	ldi	r16, 0x18	; 24
	sts		UCSR0B,r16			
     210:	00 93 c1 00 	sts	0x00C1, r16	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	ret							
     214:	08 95       	ret

00000216 <UART_Off>:

.global UART_Off
UART_Off:
	ldi	r16,0					
     216:	00 e0       	ldi	r16, 0x00	; 0
	sts UCSR0B,r16				
     218:	00 93 c1 00 	sts	0x00C1, r16	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	ret							
     21c:	08 95       	ret

0000021e <UART_Clear>:

.global UART_Clear
UART_Clear:
	lds		r16,UCSR0A			
     21e:	00 91 c0 00 	lds	r16, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	sbrs	r16,RXC0			
     222:	07 ff       	sbrs	r16, 7
	ret							
     224:	08 95       	ret
	lds		r16,UDR0			
     226:	00 91 c6 00 	lds	r16, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	rjmp	UART_Clear			
     22a:	f9 cf       	rjmp	.-14     	; 0x21e <UART_Clear>

0000022c <UART_Get>:

.global UART_Get
UART_Get:
	lds		r16,UCSR0A			
     22c:	00 91 c0 00 	lds	r16, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	sbrs	r16,RXC0			
     230:	07 ff       	sbrs	r16, 7
	rjmp	UART_Get			
     232:	fc cf       	rjmp	.-8      	; 0x22c <UART_Get>
	lds		r16,UDR0			
     234:	00 91 c6 00 	lds	r16, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	sts		ASCII,r16			
     238:	00 93 42 02 	sts	0x0242, r16	; 0x800242 <ASCII>
	ret							
     23c:	08 95       	ret

0000023e <UART_Put>:

.global UART_Put
UART_Put:
	lds		r17,UCSR0A			
     23e:	10 91 c0 00 	lds	r17, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	sbrs	r17,UDRE0			
     242:	15 ff       	sbrs	r17, 5
	rjmp	UART_Put			
     244:	fc cf       	rjmp	.-8      	; 0x23e <UART_Put>
	lds		r16,ASCII			
     246:	00 91 42 02 	lds	r16, 0x0242	; 0x800242 <ASCII>
	sts		UDR0,r16			
     24a:	00 93 c6 00 	sts	0x00C6, r16	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	ret							
     24e:	08 95       	ret

00000250 <ADC_Get>:

.global ADC_Get
ADC_Get:
		ldi		r16,0xC7			
     250:	07 ec       	ldi	r16, 0xC7	; 199
		sts		ADCSRA,r16			
     252:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

00000256 <A2V1>:
A2V1:	lds		r16,ADCSRA			
     256:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
		sbrc	r16,ADSC			
     25a:	06 fd       	sbrc	r16, 6
		rjmp 	A2V1				
     25c:	fc cf       	rjmp	.-8      	; 0x256 <A2V1>
		lds		r16,ADCL			
     25e:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
		sts		LADC,r16			
     262:	00 93 48 02 	sts	0x0248, r16	; 0x800248 <LADC>
		lds		r16,ADCH			
     266:	00 91 79 00 	lds	r16, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
		sts		HADC,r16			
     26a:	00 93 3d 02 	sts	0x023D, r16	; 0x80023d <HADC>
		ret							
     26e:	08 95       	ret

00000270 <UART_Puts>:
	TIMSK1 &= ~(1 << TOIE1); // disable timer overflow interrupt
}


void UART_Puts(const char *str)				// Display a string in the PC Terminal Program
{
     270:	cf 93       	push	r28
     272:	df 93       	push	r29
     274:	ec 01       	movw	r28, r24
	while (*str)
     276:	05 c0       	rjmp	.+10     	; 0x282 <UART_Puts+0x12>
	{
		ASCII = *str++;
     278:	21 96       	adiw	r28, 0x01	; 1
     27a:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <ASCII>
		UART_Put();
     27e:	0e 94 1f 01 	call	0x23e	; 0x23e <UART_Put>
}


void UART_Puts(const char *str)				// Display a string in the PC Terminal Program
{
	while (*str)
     282:	88 81       	ld	r24, Y
     284:	81 11       	cpse	r24, r1
     286:	f8 cf       	rjmp	.-16     	; 0x278 <UART_Puts+0x8>
	{
		ASCII = *str++;
		UART_Put();
	}
}
     288:	df 91       	pop	r29
     28a:	cf 91       	pop	r28
     28c:	08 95       	ret

0000028e <Timer1>:
	}
	
}
*/

void Timer1(float us){
     28e:	8f 92       	push	r8
     290:	9f 92       	push	r9
     292:	af 92       	push	r10
     294:	bf 92       	push	r11
     296:	cf 92       	push	r12
     298:	df 92       	push	r13
     29a:	ef 92       	push	r14
     29c:	ff 92       	push	r15
     29e:	0f 93       	push	r16
     2a0:	1f 93       	push	r17
     2a2:	cf 93       	push	r28
     2a4:	df 93       	push	r29
     2a6:	cd b7       	in	r28, 0x3d	; 61
     2a8:	de b7       	in	r29, 0x3e	; 62
     2aa:	e0 97       	sbiw	r28, 0x30	; 48
     2ac:	0f b6       	in	r0, 0x3f	; 63
     2ae:	f8 94       	cli
     2b0:	de bf       	out	0x3e, r29	; 62
     2b2:	0f be       	out	0x3f, r0	; 63
     2b4:	cd bf       	out	0x3d, r28	; 61
	us *= pow(10, -6);		// adjust us to microseconds
     2b6:	2d eb       	ldi	r18, 0xBD	; 189
     2b8:	37 e3       	ldi	r19, 0x37	; 55
     2ba:	46 e8       	ldi	r20, 0x86	; 134
     2bc:	55 e3       	ldi	r21, 0x35	; 53
     2be:	0e 94 6d 06 	call	0xcda	; 0xcda <__mulsf3>
     2c2:	4b 01       	movw	r8, r22
     2c4:	5c 01       	movw	r10, r24
	
	int timerBits = 16;
	float C = pow(2, timerBits);
    //allowed prescaler values
    float prescalers[] = {1.0, 8.0, 64.0, 256.0, 1024.0};
     2c6:	84 e1       	ldi	r24, 0x14	; 20
     2c8:	e0 e0       	ldi	r30, 0x00	; 0
     2ca:	f1 e0       	ldi	r31, 0x01	; 1
     2cc:	de 01       	movw	r26, r28
     2ce:	11 96       	adiw	r26, 0x01	; 1
     2d0:	01 90       	ld	r0, Z+
     2d2:	0d 92       	st	X+, r0
     2d4:	8a 95       	dec	r24
     2d6:	e1 f7       	brne	.-8      	; 0x2d0 <Timer1+0x42>
	int i;
    //find the best prescaler value
    for (i = 0; i < 5; i++){
     2d8:	00 e0       	ldi	r16, 0x00	; 0
     2da:	10 e0       	ldi	r17, 0x00	; 0
     2dc:	35 c0       	rjmp	.+106    	; 0x348 <Timer1+0xba>
		if (C - (F_CPU * us)/prescalers[i] >= 0){
     2de:	20 e0       	ldi	r18, 0x00	; 0
     2e0:	34 e2       	ldi	r19, 0x24	; 36
     2e2:	44 e7       	ldi	r20, 0x74	; 116
     2e4:	5b e4       	ldi	r21, 0x4B	; 75
     2e6:	c5 01       	movw	r24, r10
     2e8:	b4 01       	movw	r22, r8
     2ea:	0e 94 6d 06 	call	0xcda	; 0xcda <__mulsf3>
     2ee:	f8 01       	movw	r30, r16
     2f0:	ee 0f       	add	r30, r30
     2f2:	ff 1f       	adc	r31, r31
     2f4:	ee 0f       	add	r30, r30
     2f6:	ff 1f       	adc	r31, r31
     2f8:	21 e0       	ldi	r18, 0x01	; 1
     2fa:	30 e0       	ldi	r19, 0x00	; 0
     2fc:	2c 0f       	add	r18, r28
     2fe:	3d 1f       	adc	r19, r29
     300:	e2 0f       	add	r30, r18
     302:	f3 1f       	adc	r31, r19
     304:	c0 80       	ld	r12, Z
     306:	d1 80       	ldd	r13, Z+1	; 0x01
     308:	e2 80       	ldd	r14, Z+2	; 0x02
     30a:	f3 80       	ldd	r15, Z+3	; 0x03
     30c:	a7 01       	movw	r20, r14
     30e:	96 01       	movw	r18, r12
     310:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__divsf3>
     314:	9b 01       	movw	r18, r22
     316:	ac 01       	movw	r20, r24
     318:	60 e0       	ldi	r22, 0x00	; 0
     31a:	70 e0       	ldi	r23, 0x00	; 0
     31c:	80 e8       	ldi	r24, 0x80	; 128
     31e:	97 e4       	ldi	r25, 0x47	; 71
     320:	0e 94 75 04 	call	0x8ea	; 0x8ea <__subsf3>
     324:	20 e0       	ldi	r18, 0x00	; 0
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	a9 01       	movw	r20, r18
     32a:	0e 94 18 06 	call	0xc30	; 0xc30 <__gesf2>
     32e:	88 23       	and	r24, r24
     330:	4c f0       	brlt	.+18     	; 0x344 <Timer1+0xb6>
			prescaler = prescalers[i];
     332:	c0 92 3e 02 	sts	0x023E, r12	; 0x80023e <prescaler>
     336:	d0 92 3f 02 	sts	0x023F, r13	; 0x80023f <prescaler+0x1>
     33a:	e0 92 40 02 	sts	0x0240, r14	; 0x800240 <prescaler+0x2>
     33e:	f0 92 41 02 	sts	0x0241, r15	; 0x800241 <prescaler+0x3>
			break;
     342:	05 c0       	rjmp	.+10     	; 0x34e <Timer1+0xc0>
	float C = pow(2, timerBits);
    //allowed prescaler values
    float prescalers[] = {1.0, 8.0, 64.0, 256.0, 1024.0};
	int i;
    //find the best prescaler value
    for (i = 0; i < 5; i++){
     344:	0f 5f       	subi	r16, 0xFF	; 255
     346:	1f 4f       	sbci	r17, 0xFF	; 255
     348:	05 30       	cpi	r16, 0x05	; 5
     34a:	11 05       	cpc	r17, r1
     34c:	44 f2       	brlt	.-112    	; 0x2de <Timer1+0x50>
			break;
		}
    }
	
    // calculate timer count
	float timerCount = C - (F_CPU * us)/prescalers[i];
     34e:	20 e0       	ldi	r18, 0x00	; 0
     350:	34 e2       	ldi	r19, 0x24	; 36
     352:	44 e7       	ldi	r20, 0x74	; 116
     354:	5b e4       	ldi	r21, 0x4B	; 75
     356:	c5 01       	movw	r24, r10
     358:	b4 01       	movw	r22, r8
     35a:	0e 94 6d 06 	call	0xcda	; 0xcda <__mulsf3>
     35e:	f8 01       	movw	r30, r16
     360:	ee 0f       	add	r30, r30
     362:	ff 1f       	adc	r31, r31
     364:	ee 0f       	add	r30, r30
     366:	ff 1f       	adc	r31, r31
     368:	21 e0       	ldi	r18, 0x01	; 1
     36a:	30 e0       	ldi	r19, 0x00	; 0
     36c:	2c 0f       	add	r18, r28
     36e:	3d 1f       	adc	r19, r29
     370:	e2 0f       	add	r30, r18
     372:	f3 1f       	adc	r31, r19
     374:	20 81       	ld	r18, Z
     376:	31 81       	ldd	r19, Z+1	; 0x01
     378:	42 81       	ldd	r20, Z+2	; 0x02
     37a:	53 81       	ldd	r21, Z+3	; 0x03
     37c:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__divsf3>
     380:	9b 01       	movw	r18, r22
     382:	ac 01       	movw	r20, r24
     384:	60 e0       	ldi	r22, 0x00	; 0
     386:	70 e0       	ldi	r23, 0x00	; 0
     388:	80 e8       	ldi	r24, 0x80	; 128
     38a:	97 e4       	ldi	r25, 0x47	; 71
     38c:	0e 94 75 04 	call	0x8ea	; 0x8ea <__subsf3>

	// set timer count in register
	TCNT1 = timerCount;
     390:	0e 94 5b 05 	call	0xab6	; 0xab6 <__fixunssfsi>
     394:	70 93 85 00 	sts	0x0085, r23	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     398:	60 93 84 00 	sts	0x0084, r22	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>

	// set TCCR1A and TCCR1B registers for normal mode and prescaler
	TCCR1A = 0x0;		// normal mode
     39c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = i + 1;		// prescaler bits 
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	80 0f       	add	r24, r16
     3a4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

	// enable timer overflow interrupt
	TIMSK1 = (1 << TOIE1);
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>

	// enable pin change interrupt for ECHO pin
	PCICR = (1 << PCIE1);
     3ae:	82 e0       	ldi	r24, 0x02	; 2
     3b0:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
	PCMSK1 = (1 << ECHO_PIN);
     3b4:	84 e0       	ldi	r24, 0x04	; 4
     3b6:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7f806c>
	
	
	// output value of i to UART
	char buff[28]; // buffer to store i value as string
	sprintf(buff, "i = %d\n", i); // actually convert to string
     3ba:	1f 93       	push	r17
     3bc:	0f 93       	push	r16
     3be:	84 e1       	ldi	r24, 0x14	; 20
     3c0:	91 e0       	ldi	r25, 0x01	; 1
     3c2:	9f 93       	push	r25
     3c4:	8f 93       	push	r24
     3c6:	8e 01       	movw	r16, r28
     3c8:	0b 5e       	subi	r16, 0xEB	; 235
     3ca:	1f 4f       	sbci	r17, 0xFF	; 255
     3cc:	1f 93       	push	r17
     3ce:	0f 93       	push	r16
     3d0:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <sprintf>
	UART_Puts(buff);
     3d4:	c8 01       	movw	r24, r16
     3d6:	0e 94 38 01 	call	0x270	; 0x270 <UART_Puts>
	
	while (TCCR1B != 0x0);	// wait for timer to finish
     3da:	0f 90       	pop	r0
     3dc:	0f 90       	pop	r0
     3de:	0f 90       	pop	r0
     3e0:	0f 90       	pop	r0
     3e2:	0f 90       	pop	r0
     3e4:	0f 90       	pop	r0
     3e6:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     3ea:	81 11       	cpse	r24, r1
     3ec:	fc cf       	rjmp	.-8      	; 0x3e6 <Timer1+0x158>
	return;
}
     3ee:	e0 96       	adiw	r28, 0x30	; 48
     3f0:	0f b6       	in	r0, 0x3f	; 63
     3f2:	f8 94       	cli
     3f4:	de bf       	out	0x3e, r29	; 62
     3f6:	0f be       	out	0x3f, r0	; 63
     3f8:	cd bf       	out	0x3d, r28	; 61
     3fa:	df 91       	pop	r29
     3fc:	cf 91       	pop	r28
     3fe:	1f 91       	pop	r17
     400:	0f 91       	pop	r16
     402:	ff 90       	pop	r15
     404:	ef 90       	pop	r14
     406:	df 90       	pop	r13
     408:	cf 90       	pop	r12
     40a:	bf 90       	pop	r11
     40c:	af 90       	pop	r10
     40e:	9f 90       	pop	r9
     410:	8f 90       	pop	r8
     412:	08 95       	ret

00000414 <__vector_4>:

// Timer1 interrupt for ECHO pin
ISR(PCINT1_vect){
     414:	1f 92       	push	r1
     416:	0f 92       	push	r0
     418:	0f b6       	in	r0, 0x3f	; 63
     41a:	0f 92       	push	r0
     41c:	11 24       	eor	r1, r1
     41e:	2f 93       	push	r18
     420:	3f 93       	push	r19
     422:	4f 93       	push	r20
     424:	5f 93       	push	r21
     426:	6f 93       	push	r22
     428:	7f 93       	push	r23
     42a:	8f 93       	push	r24
     42c:	9f 93       	push	r25
     42e:	af 93       	push	r26
     430:	bf 93       	push	r27
     432:	ef 93       	push	r30
     434:	ff 93       	push	r31
    UART_Puts("echo interrupt \n\r");
     436:	8c e1       	ldi	r24, 0x1C	; 28
     438:	91 e0       	ldi	r25, 0x01	; 1
     43a:	0e 94 38 01 	call	0x270	; 0x270 <UART_Puts>
    if (!(PINC & (1 << ECHO_PIN))){	// if ECHO pin is low
     43e:	32 99       	sbic	0x06, 2	; 6
     440:	0b c0       	rjmp	.+22     	; 0x458 <__vector_4+0x44>
        UART_Puts("AND ECHO WENT LOW \n\r");
     442:	8e e2       	ldi	r24, 0x2E	; 46
     444:	91 e0       	ldi	r25, 0x01	; 1
     446:	0e 94 38 01 	call	0x270	; 0x270 <UART_Puts>
        TCCR1B = 0x0; // stop the timer
     44a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		//disable echo pin change interrupt
		PCICR &= ~(1 << PCIE1);
     44e:	e8 e6       	ldi	r30, 0x68	; 104
     450:	f0 e0       	ldi	r31, 0x00	; 0
     452:	80 81       	ld	r24, Z
     454:	8d 7f       	andi	r24, 0xFD	; 253
     456:	80 83       	st	Z, r24
    }
}
     458:	ff 91       	pop	r31
     45a:	ef 91       	pop	r30
     45c:	bf 91       	pop	r27
     45e:	af 91       	pop	r26
     460:	9f 91       	pop	r25
     462:	8f 91       	pop	r24
     464:	7f 91       	pop	r23
     466:	6f 91       	pop	r22
     468:	5f 91       	pop	r21
     46a:	4f 91       	pop	r20
     46c:	3f 91       	pop	r19
     46e:	2f 91       	pop	r18
     470:	0f 90       	pop	r0
     472:	0f be       	out	0x3f, r0	; 63
     474:	0f 90       	pop	r0
     476:	1f 90       	pop	r1
     478:	18 95       	reti

0000047a <__vector_13>:

// Timer1 overflow interrupt
ISR(TIMER1_OVF_vect) 
{	
     47a:	1f 92       	push	r1
     47c:	0f 92       	push	r0
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	0f 92       	push	r0
     482:	11 24       	eor	r1, r1
     484:	2f 93       	push	r18
     486:	3f 93       	push	r19
     488:	4f 93       	push	r20
     48a:	5f 93       	push	r21
     48c:	6f 93       	push	r22
     48e:	7f 93       	push	r23
     490:	8f 93       	push	r24
     492:	9f 93       	push	r25
     494:	af 93       	push	r26
     496:	bf 93       	push	r27
     498:	ef 93       	push	r30
     49a:	ff 93       	push	r31
    UART_Puts("overflow interrupt \n\r");
     49c:	83 e4       	ldi	r24, 0x43	; 67
     49e:	91 e0       	ldi	r25, 0x01	; 1
     4a0:	0e 94 38 01 	call	0x270	; 0x270 <UART_Puts>
    TCCR1B = 0x0; // stop the timer
     4a4:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1 &= ~(1 << TOIE1); // disable timer overflow interrupt
     4a8:	ef e6       	ldi	r30, 0x6F	; 111
     4aa:	f0 e0       	ldi	r31, 0x00	; 0
     4ac:	80 81       	ld	r24, Z
     4ae:	8e 7f       	andi	r24, 0xFE	; 254
     4b0:	80 83       	st	Z, r24
}
     4b2:	ff 91       	pop	r31
     4b4:	ef 91       	pop	r30
     4b6:	bf 91       	pop	r27
     4b8:	af 91       	pop	r26
     4ba:	9f 91       	pop	r25
     4bc:	8f 91       	pop	r24
     4be:	7f 91       	pop	r23
     4c0:	6f 91       	pop	r22
     4c2:	5f 91       	pop	r21
     4c4:	4f 91       	pop	r20
     4c6:	3f 91       	pop	r19
     4c8:	2f 91       	pop	r18
     4ca:	0f 90       	pop	r0
     4cc:	0f be       	out	0x3f, r0	; 63
     4ce:	0f 90       	pop	r0
     4d0:	1f 90       	pop	r1
     4d2:	18 95       	reti

000004d4 <LCD_Puts>:
		UART_Put();
	}
}

void LCD_Puts(const char *str)				// Display a string on the LCD Module
{
     4d4:	cf 93       	push	r28
     4d6:	df 93       	push	r29
     4d8:	ec 01       	movw	r28, r24
	while (*str)
     4da:	05 c0       	rjmp	.+10     	; 0x4e6 <LCD_Puts+0x12>
	{
		DATA = *str++;
     4dc:	21 96       	adiw	r28, 0x01	; 1
     4de:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <__data_end>
		LCD_Write_Data();
     4e2:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LCD_Write_Data>
	}
}

void LCD_Puts(const char *str)				// Display a string on the LCD Module
{
	while (*str)
     4e6:	88 81       	ld	r24, Y
     4e8:	81 11       	cpse	r24, r1
     4ea:	f8 cf       	rjmp	.-16     	; 0x4dc <LCD_Puts+0x8>
	{
		DATA = *str++;
		LCD_Write_Data();
	}
}
     4ec:	df 91       	pop	r29
     4ee:	cf 91       	pop	r28
     4f0:	08 95       	ret

000004f2 <LCD>:

void LCD(void)								// LCD Display
{
	DATA = 0x38;					// 8 bit 1 line 
     4f2:	88 e3       	ldi	r24, 0x38	; 56
     4f4:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <__data_end>
	LCD_Write_Command();
     4f8:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_Write_Command>
	
	DATA = 0x0E;					// display cursor on 
     4fc:	8e e0       	ldi	r24, 0x0E	; 14
     4fe:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <__data_end>
	LCD_Write_Command();
     502:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_Write_Command>
	
	DATA = 0x01;					// clear LCD
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <__data_end>
	LCD_Write_Command();
     50c:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_Write_Command>
	
	LCD_Puts("test lcd");
     510:	89 e5       	ldi	r24, 0x59	; 89
     512:	91 e0       	ldi	r25, 0x01	; 1
     514:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_Puts>
     518:	08 95       	ret

0000051a <calculateTemperature>:
}

float calculateTemperature(int adcValue)	// helper function to calculate temperature from adc
{
     51a:	8f 92       	push	r8
     51c:	9f 92       	push	r9
     51e:	af 92       	push	r10
     520:	bf 92       	push	r11
     522:	cf 92       	push	r12
     524:	df 92       	push	r13
     526:	ef 92       	push	r14
     528:	ff 92       	push	r15
	// ADC reference voltage and resolution
	float Vref = 3.3;     // ADC reference voltage
	int resolution = 1024;  // ADC resolution (10 bits)

	// Convert ADC value to voltage
	float voltage = (adcValue * Vref) / (float)resolution;
     52a:	bc 01       	movw	r22, r24
     52c:	99 0f       	add	r25, r25
     52e:	88 0b       	sbc	r24, r24
     530:	99 0b       	sbc	r25, r25
     532:	0e 94 8c 05 	call	0xb18	; 0xb18 <__floatsisf>
     536:	23 e3       	ldi	r18, 0x33	; 51
     538:	33 e3       	ldi	r19, 0x33	; 51
     53a:	43 e5       	ldi	r20, 0x53	; 83
     53c:	50 e4       	ldi	r21, 0x40	; 64
     53e:	0e 94 6d 06 	call	0xcda	; 0xcda <__mulsf3>
     542:	20 e0       	ldi	r18, 0x00	; 0
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	40 e8       	ldi	r20, 0x80	; 128
     548:	5a e3       	ldi	r21, 0x3A	; 58
     54a:	0e 94 6d 06 	call	0xcda	; 0xcda <__mulsf3>
     54e:	6b 01       	movw	r12, r22
     550:	7c 01       	movw	r14, r24

	// Calculate thermistor resistance
	float resistance = R0 * voltage / (Vref - voltage);
     552:	20 e0       	ldi	r18, 0x00	; 0
     554:	30 e4       	ldi	r19, 0x40	; 64
     556:	4c e1       	ldi	r20, 0x1C	; 28
     558:	56 e4       	ldi	r21, 0x46	; 70
     55a:	0e 94 6d 06 	call	0xcda	; 0xcda <__mulsf3>
     55e:	4b 01       	movw	r8, r22
     560:	5c 01       	movw	r10, r24
     562:	a7 01       	movw	r20, r14
     564:	96 01       	movw	r18, r12
     566:	63 e3       	ldi	r22, 0x33	; 51
     568:	73 e3       	ldi	r23, 0x33	; 51
     56a:	83 e5       	ldi	r24, 0x53	; 83
     56c:	90 e4       	ldi	r25, 0x40	; 64
     56e:	0e 94 75 04 	call	0x8ea	; 0x8ea <__subsf3>
     572:	9b 01       	movw	r18, r22
     574:	ac 01       	movw	r20, r24
     576:	c5 01       	movw	r24, r10
     578:	b4 01       	movw	r22, r8
     57a:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__divsf3>
	
	// Calculate temperature in Kelvin using the Steinhart-Hart equation
	float tempKelvin = 1.0 / ((log(resistance / R0) / B) + (1.0 / (T0 + 273.15)));
     57e:	20 e0       	ldi	r18, 0x00	; 0
     580:	30 e4       	ldi	r19, 0x40	; 64
     582:	4c e1       	ldi	r20, 0x1C	; 28
     584:	56 e4       	ldi	r21, 0x46	; 70
     586:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__divsf3>
     58a:	0e 94 25 06 	call	0xc4a	; 0xc4a <log>
     58e:	20 e0       	ldi	r18, 0x00	; 0
     590:	30 ee       	ldi	r19, 0xE0	; 224
     592:	46 e7       	ldi	r20, 0x76	; 118
     594:	55 e4       	ldi	r21, 0x45	; 69
     596:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__divsf3>
     59a:	2f e0       	ldi	r18, 0x0F	; 15
     59c:	3f ec       	ldi	r19, 0xCF	; 207
     59e:	4b e5       	ldi	r20, 0x5B	; 91
     5a0:	5b e3       	ldi	r21, 0x3B	; 59
     5a2:	0e 94 76 04 	call	0x8ec	; 0x8ec <__addsf3>
     5a6:	9b 01       	movw	r18, r22
     5a8:	ac 01       	movw	r20, r24
     5aa:	60 e0       	ldi	r22, 0x00	; 0
     5ac:	70 e0       	ldi	r23, 0x00	; 0
     5ae:	80 e8       	ldi	r24, 0x80	; 128
     5b0:	9f e3       	ldi	r25, 0x3F	; 63
     5b2:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__divsf3>
	float temperature = tempKelvin - 273.15;
     5b6:	23 e3       	ldi	r18, 0x33	; 51
     5b8:	33 e9       	ldi	r19, 0x93	; 147
     5ba:	48 e8       	ldi	r20, 0x88	; 136
     5bc:	53 e4       	ldi	r21, 0x43	; 67
     5be:	0e 94 75 04 	call	0x8ea	; 0x8ea <__subsf3>
	
	return temperature;
}
     5c2:	ff 90       	pop	r15
     5c4:	ef 90       	pop	r14
     5c6:	df 90       	pop	r13
     5c8:	cf 90       	pop	r12
     5ca:	bf 90       	pop	r11
     5cc:	af 90       	pop	r10
     5ce:	9f 90       	pop	r9
     5d0:	8f 90       	pop	r8
     5d2:	08 95       	ret

000005d4 <ADConverter>:

void ADConverter(void)								// take in adc value and convert to temp
{
     5d4:	8f 92       	push	r8
     5d6:	9f 92       	push	r9
     5d8:	af 92       	push	r10
     5da:	bf 92       	push	r11
     5dc:	cf 92       	push	r12
     5de:	df 92       	push	r13
     5e0:	ef 92       	push	r14
     5e2:	ff 92       	push	r15
     5e4:	0f 93       	push	r16
     5e6:	1f 93       	push	r17
     5e8:	cf 93       	push	r28
     5ea:	df 93       	push	r29
	volts[0x1]='.';
     5ec:	c3 e4       	ldi	r28, 0x43	; 67
     5ee:	d2 e0       	ldi	r29, 0x02	; 2
     5f0:	8e e2       	ldi	r24, 0x2E	; 46
     5f2:	89 83       	std	Y+1, r24	; 0x01
	volts[0x3]=' ';
     5f4:	80 e2       	ldi	r24, 0x20	; 32
     5f6:	8b 83       	std	Y+3, r24	; 0x03
	volts[0x4]= 0;
     5f8:	1c 82       	std	Y+4, r1	; 0x04
	ADC_Get();
     5fa:	0e 94 28 01 	call	0x250	; 0x250 <ADC_Get>
	Acc = (((int)HADC) * 0x100 + (int)(LADC))*0xA;
     5fe:	e0 91 3d 02 	lds	r30, 0x023D	; 0x80023d <HADC>
     602:	f0 e0       	ldi	r31, 0x00	; 0
     604:	3e 2f       	mov	r19, r30
     606:	22 27       	eor	r18, r18
     608:	00 91 48 02 	lds	r16, 0x0248	; 0x800248 <LADC>
     60c:	10 e0       	ldi	r17, 0x00	; 0
     60e:	20 0f       	add	r18, r16
     610:	31 1f       	adc	r19, r17
     612:	c9 01       	movw	r24, r18
     614:	88 0f       	add	r24, r24
     616:	99 1f       	adc	r25, r25
     618:	22 0f       	add	r18, r18
     61a:	33 1f       	adc	r19, r19
     61c:	22 0f       	add	r18, r18
     61e:	33 1f       	adc	r19, r19
     620:	22 0f       	add	r18, r18
     622:	33 1f       	adc	r19, r19
     624:	82 0f       	add	r24, r18
     626:	93 1f       	adc	r25, r19
	volts[0x0] = 48 + (Acc / 0x7FE);
     628:	2e ef       	ldi	r18, 0xFE	; 254
     62a:	37 e0       	ldi	r19, 0x07	; 7
     62c:	b9 01       	movw	r22, r18
     62e:	0e 94 33 07 	call	0xe66	; 0xe66 <__divmodhi4>
     632:	40 e3       	ldi	r20, 0x30	; 48
     634:	46 0f       	add	r20, r22
     636:	48 83       	st	Y, r20
	Acc = Acc % 0x7FE;
	volts[0x2] = ((Acc *0xA) / 0x7FE) + 48;
     638:	bc 01       	movw	r22, r24
     63a:	66 0f       	add	r22, r22
     63c:	77 1f       	adc	r23, r23
     63e:	88 0f       	add	r24, r24
     640:	99 1f       	adc	r25, r25
     642:	88 0f       	add	r24, r24
     644:	99 1f       	adc	r25, r25
     646:	88 0f       	add	r24, r24
     648:	99 1f       	adc	r25, r25
     64a:	86 0f       	add	r24, r22
     64c:	97 1f       	adc	r25, r23
     64e:	b9 01       	movw	r22, r18
     650:	0e 94 33 07 	call	0xe66	; 0xe66 <__divmodhi4>
     654:	60 5d       	subi	r22, 0xD0	; 208
     656:	6a 83       	std	Y+2, r22	; 0x02
	Acc = (Acc * 0xA) % 0x7FE;
     658:	90 93 4a 02 	sts	0x024A, r25	; 0x80024a <Acc+0x1>
     65c:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <Acc>
	if (Acc >= 0x3FF) volts[0x2]++;
     660:	8f 3f       	cpi	r24, 0xFF	; 255
     662:	93 40       	sbci	r25, 0x03	; 3
     664:	1c f0       	brlt	.+6      	; 0x66c <ADConverter+0x98>
     666:	6f 5f       	subi	r22, 0xFF	; 255
     668:	60 93 45 02 	sts	0x0245, r22	; 0x800245 <volts+0x2>
	if (volts[0x2] == 58)
     66c:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <volts+0x2>
     670:	8a 33       	cpi	r24, 0x3A	; 58
     672:	41 f4       	brne	.+16     	; 0x684 <ADConverter+0xb0>
	{
		volts[0x2] = 48;
     674:	a3 e4       	ldi	r26, 0x43	; 67
     676:	b2 e0       	ldi	r27, 0x02	; 2
     678:	80 e3       	ldi	r24, 0x30	; 48
     67a:	12 96       	adiw	r26, 0x02	; 2
     67c:	8c 93       	st	X, r24
     67e:	12 97       	sbiw	r26, 0x02	; 2
		volts[0x0]++;
     680:	4f 5f       	subi	r20, 0xFF	; 255
     682:	4c 93       	st	X, r20
	}
	int adcValue = (HADC << 8) | LADC;
     684:	9e 2f       	mov	r25, r30
     686:	88 27       	eor	r24, r24
	float temperature_Celsius = calculateTemperature(adcValue);
     688:	80 2b       	or	r24, r16
     68a:	91 2b       	or	r25, r17
     68c:	0e 94 8d 02 	call	0x51a	; 0x51a <calculateTemperature>
     690:	4b 01       	movw	r8, r22
     692:	5c 01       	movw	r10, r24
	unsigned int temp_integer = (int)temperature_Celsius;
     694:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__fixsfsi>
     698:	6b 01       	movw	r12, r22
     69a:	7c 01       	movw	r14, r24
	int temp_fractional = (int)((temperature_Celsius - temp_integer)*100);
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	0e 94 8a 05 	call	0xb14	; 0xb14 <__floatunsisf>
     6a4:	9b 01       	movw	r18, r22
     6a6:	ac 01       	movw	r20, r24
     6a8:	c5 01       	movw	r24, r10
     6aa:	b4 01       	movw	r22, r8
     6ac:	0e 94 75 04 	call	0x8ea	; 0x8ea <__subsf3>
     6b0:	20 e0       	ldi	r18, 0x00	; 0
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	48 ec       	ldi	r20, 0xC8	; 200
     6b6:	52 e4       	ldi	r21, 0x42	; 66
     6b8:	0e 94 6d 06 	call	0xcda	; 0xcda <__mulsf3>
     6bc:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__fixsfsi>
	sprintf(volts, "%d.%d degrees Celsius\n", temp_integer, temp_fractional);
     6c0:	7f 93       	push	r23
     6c2:	6f 93       	push	r22
     6c4:	df 92       	push	r13
     6c6:	cf 92       	push	r12
     6c8:	82 e6       	ldi	r24, 0x62	; 98
     6ca:	91 e0       	ldi	r25, 0x01	; 1
     6cc:	9f 93       	push	r25
     6ce:	8f 93       	push	r24
     6d0:	83 e4       	ldi	r24, 0x43	; 67
     6d2:	92 e0       	ldi	r25, 0x02	; 2
     6d4:	9f 93       	push	r25
     6d6:	8f 93       	push	r24
     6d8:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <sprintf>
	UART_Puts(volts);
     6dc:	83 e4       	ldi	r24, 0x43	; 67
     6de:	92 e0       	ldi	r25, 0x02	; 2
     6e0:	0e 94 38 01 	call	0x270	; 0x270 <UART_Puts>
}
     6e4:	8d b7       	in	r24, 0x3d	; 61
     6e6:	9e b7       	in	r25, 0x3e	; 62
     6e8:	08 96       	adiw	r24, 0x08	; 8
     6ea:	0f b6       	in	r0, 0x3f	; 63
     6ec:	f8 94       	cli
     6ee:	9e bf       	out	0x3e, r25	; 62
     6f0:	0f be       	out	0x3f, r0	; 63
     6f2:	8d bf       	out	0x3d, r24	; 61
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	1f 91       	pop	r17
     6fa:	0f 91       	pop	r16
     6fc:	ff 90       	pop	r15
     6fe:	ef 90       	pop	r14
     700:	df 90       	pop	r13
     702:	cf 90       	pop	r12
     704:	bf 90       	pop	r11
     706:	af 90       	pop	r10
     708:	9f 90       	pop	r9
     70a:	8f 90       	pop	r8
     70c:	08 95       	ret

0000070e <pingDistance>:
	DDRC &= ~(1 << ECHO_PIN);	// Set PC2 as input
}
*/

float pingDistance(void)						// helper function to time trigger ping and return distance
{
     70e:	cf 92       	push	r12
     710:	df 92       	push	r13
     712:	ef 92       	push	r14
     714:	ff 92       	push	r15
     716:	0f 93       	push	r16
     718:	1f 93       	push	r17
     71a:	cf 93       	push	r28
     71c:	df 93       	push	r29
     71e:	cd b7       	in	r28, 0x3d	; 61
     720:	de b7       	in	r29, 0x3e	; 62
     722:	6c 97       	sbiw	r28, 0x1c	; 28
     724:	0f b6       	in	r0, 0x3f	; 63
     726:	f8 94       	cli
     728:	de bf       	out	0x3e, r29	; 62
     72a:	0f be       	out	0x3f, r0	; 63
     72c:	cd bf       	out	0x3d, r28	; 61
	UART_Puts("starting trigger ping\n\r");
     72e:	89 e7       	ldi	r24, 0x79	; 121
     730:	91 e0       	ldi	r25, 0x01	; 1
     732:	0e 94 38 01 	call	0x270	; 0x270 <UART_Puts>
	// Send a 10us pulse on the Trig pin
	PORTC |= (1 << TRIGGER_PIN);
     736:	88 b1       	in	r24, 0x08	; 8
     738:	82 60       	ori	r24, 0x02	; 2
     73a:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     73c:	85 e3       	ldi	r24, 0x35	; 53
     73e:	8a 95       	dec	r24
     740:	f1 f7       	brne	.-4      	; 0x73e <pingDistance+0x30>
     742:	00 00       	nop
	_delay_us(10);
	PORTC &= ~(1 << TRIGGER_PIN);
     744:	88 b1       	in	r24, 0x08	; 8
     746:	8d 7f       	andi	r24, 0xFD	; 253
     748:	88 b9       	out	0x08, r24	; 8

	// Measure the time the Echo pin stays high
	Timer1(MAX_TIMEOUT); // timeout/overflow value
     74a:	60 e0       	ldi	r22, 0x00	; 0
     74c:	7b e1       	ldi	r23, 0x1B	; 27
     74e:	87 e3       	ldi	r24, 0x37	; 55
     750:	9a e4       	ldi	r25, 0x4A	; 74
     752:	0e 94 47 01 	call	0x28e	; 0x28e <Timer1>
	
	// Calculate time passed
	float time = (TCNT1 * prescaler) / F_CPU; 	// time in seconds
     756:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     75a:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	0e 94 8a 05 	call	0xb14	; 0xb14 <__floatunsisf>
     766:	20 91 3e 02 	lds	r18, 0x023E	; 0x80023e <prescaler>
     76a:	30 91 3f 02 	lds	r19, 0x023F	; 0x80023f <prescaler+0x1>
     76e:	40 91 40 02 	lds	r20, 0x0240	; 0x800240 <prescaler+0x2>
     772:	50 91 41 02 	lds	r21, 0x0241	; 0x800241 <prescaler+0x3>
     776:	0e 94 6d 06 	call	0xcda	; 0xcda <__mulsf3>
     77a:	20 e0       	ldi	r18, 0x00	; 0
     77c:	34 e2       	ldi	r19, 0x24	; 36
     77e:	44 e7       	ldi	r20, 0x74	; 116
     780:	5b e4       	ldi	r21, 0x4B	; 75
     782:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__divsf3>
     786:	6b 01       	movw	r12, r22
     788:	7c 01       	movw	r14, r24
	
	// output TCNT1 value to UART
	char buff[28]; // buffer to store TCNT1 value as string
	
	sprintf(buff, "prescaler = %d\n\r", (int)prescaler);
     78a:	60 91 3e 02 	lds	r22, 0x023E	; 0x80023e <prescaler>
     78e:	70 91 3f 02 	lds	r23, 0x023F	; 0x80023f <prescaler+0x1>
     792:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <prescaler+0x2>
     796:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <prescaler+0x3>
     79a:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__fixsfsi>
     79e:	7f 93       	push	r23
     7a0:	6f 93       	push	r22
     7a2:	81 e9       	ldi	r24, 0x91	; 145
     7a4:	91 e0       	ldi	r25, 0x01	; 1
     7a6:	9f 93       	push	r25
     7a8:	8f 93       	push	r24
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5f       	subi	r16, 0xFF	; 255
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	1f 93       	push	r17
     7b2:	0f 93       	push	r16
     7b4:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <sprintf>
	UART_Puts(buff);
     7b8:	c8 01       	movw	r24, r16
     7ba:	0e 94 38 01 	call	0x270	; 0x270 <UART_Puts>
	UART_Puts("bruh");
     7be:	82 ea       	ldi	r24, 0xA2	; 162
     7c0:	91 e0       	ldi	r25, 0x01	; 1
     7c2:	0e 94 38 01 	call	0x270	; 0x270 <UART_Puts>

	// Calculate distance using speed of sound (34300 cm/s) and accounting for return trip
	float distance = time * 34300.0 / 2.0;	// distance in cm
     7c6:	20 e0       	ldi	r18, 0x00	; 0
     7c8:	3c ef       	ldi	r19, 0xFC	; 252
     7ca:	45 e0       	ldi	r20, 0x05	; 5
     7cc:	57 e4       	ldi	r21, 0x47	; 71
     7ce:	c7 01       	movw	r24, r14
     7d0:	b6 01       	movw	r22, r12
     7d2:	0e 94 6d 06 	call	0xcda	; 0xcda <__mulsf3>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	5f e3       	ldi	r21, 0x3F	; 63
     7de:	0e 94 6d 06 	call	0xcda	; 0xcda <__mulsf3>
     7e2:	6b 01       	movw	r12, r22
     7e4:	7c 01       	movw	r14, r24

	UART_Puts("distance calculated\n\r");
     7e6:	87 ea       	ldi	r24, 0xA7	; 167
     7e8:	91 e0       	ldi	r25, 0x01	; 1
     7ea:	0e 94 38 01 	call	0x270	; 0x270 <UART_Puts>
	return distance;
     7ee:	0f 90       	pop	r0
     7f0:	0f 90       	pop	r0
     7f2:	0f 90       	pop	r0
     7f4:	0f 90       	pop	r0
     7f6:	0f 90       	pop	r0
     7f8:	0f 90       	pop	r0
}
     7fa:	c7 01       	movw	r24, r14
     7fc:	b6 01       	movw	r22, r12
     7fe:	6c 96       	adiw	r28, 0x1c	; 28
     800:	0f b6       	in	r0, 0x3f	; 63
     802:	f8 94       	cli
     804:	de bf       	out	0x3e, r29	; 62
     806:	0f be       	out	0x3f, r0	; 63
     808:	cd bf       	out	0x3d, r28	; 61
     80a:	df 91       	pop	r29
     80c:	cf 91       	pop	r28
     80e:	1f 91       	pop	r17
     810:	0f 91       	pop	r16
     812:	ff 90       	pop	r15
     814:	ef 90       	pop	r14
     816:	df 90       	pop	r13
     818:	cf 90       	pop	r12
     81a:	08 95       	ret

0000081c <USS>:

void USS(void){
     81c:	0f 93       	push	r16
     81e:	1f 93       	push	r17
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	cd b7       	in	r28, 0x3d	; 61
     826:	de b7       	in	r29, 0x3e	; 62
     828:	6c 97       	sbiw	r28, 0x1c	; 28
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	f8 94       	cli
     82e:	de bf       	out	0x3e, r29	; 62
     830:	0f be       	out	0x3f, r0	; 63
     832:	cd bf       	out	0x3d, r28	; 61
	int distance = (int)pingDistance();
     834:	0e 94 87 03 	call	0x70e	; 0x70e <pingDistance>
     838:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__fixsfsi>
	char buff[28]; // buffer to store distance as string

	sprintf(buff, "distance = %d cm\n", distance); // actually convert to string
     83c:	7f 93       	push	r23
     83e:	6f 93       	push	r22
     840:	8d eb       	ldi	r24, 0xBD	; 189
     842:	91 e0       	ldi	r25, 0x01	; 1
     844:	9f 93       	push	r25
     846:	8f 93       	push	r24
     848:	8e 01       	movw	r16, r28
     84a:	0f 5f       	subi	r16, 0xFF	; 255
     84c:	1f 4f       	sbci	r17, 0xFF	; 255
     84e:	1f 93       	push	r17
     850:	0f 93       	push	r16
     852:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <sprintf>
	
	//display to both UART and LCD
	UART_Puts(buff);
     856:	c8 01       	movw	r24, r16
     858:	0e 94 38 01 	call	0x270	; 0x270 <UART_Puts>
	LCD_Puts(buff);
     85c:	c8 01       	movw	r24, r16
     85e:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_Puts>
	
	return;
     862:	0f 90       	pop	r0
     864:	0f 90       	pop	r0
     866:	0f 90       	pop	r0
     868:	0f 90       	pop	r0
     86a:	0f 90       	pop	r0
     86c:	0f 90       	pop	r0
}
     86e:	6c 96       	adiw	r28, 0x1c	; 28
     870:	0f b6       	in	r0, 0x3f	; 63
     872:	f8 94       	cli
     874:	de bf       	out	0x3e, r29	; 62
     876:	0f be       	out	0x3f, r0	; 63
     878:	cd bf       	out	0x3d, r28	; 61
     87a:	df 91       	pop	r29
     87c:	cf 91       	pop	r28
     87e:	1f 91       	pop	r17
     880:	0f 91       	pop	r16
     882:	08 95       	ret

00000884 <Banner>:

void Banner(void)							// Display the Banner
{
	LCD_Puts(BannerMSG);
     884:	8f ec       	ldi	r24, 0xCF	; 207
     886:	91 e0       	ldi	r25, 0x01	; 1
     888:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_Puts>
	UART_Puts(BannerMSG);
     88c:	8f ec       	ldi	r24, 0xCF	; 207
     88e:	91 e0       	ldi	r25, 0x01	; 1
     890:	0e 94 38 01 	call	0x270	; 0x270 <UART_Puts>
     894:	08 95       	ret

00000896 <Command>:
	return;
}

void Command(void)							// command interpreter
{
	UART_Puts(MenuMSG);
     896:	89 e1       	ldi	r24, 0x19	; 25
     898:	92 e0       	ldi	r25, 0x02	; 2
     89a:	0e 94 38 01 	call	0x270	; 0x270 <UART_Puts>
	ASCII = '\0';
     89e:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <ASCII>
	while (ASCII == '\0')
     8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <Command+0x12>
	{
		UART_Get();
     8a4:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Get>

void Command(void)							// command interpreter
{
	UART_Puts(MenuMSG);
	ASCII = '\0';
	while (ASCII == '\0')
     8a8:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <ASCII>
     8ac:	88 23       	and	r24, r24
     8ae:	d1 f3       	breq	.-12     	; 0x8a4 <Command+0xe>
	{
		UART_Get();
	}
	switch (ASCII)
     8b0:	8c 36       	cpi	r24, 0x6C	; 108
     8b2:	29 f0       	breq	.+10     	; 0x8be <Command+0x28>
     8b4:	80 37       	cpi	r24, 0x70	; 112
     8b6:	49 f0       	breq	.+18     	; 0x8ca <Command+0x34>
     8b8:	81 36       	cpi	r24, 0x61	; 97
     8ba:	51 f4       	brne	.+20     	; 0x8d0 <Command+0x3a>
     8bc:	03 c0       	rjmp	.+6      	; 0x8c4 <Command+0x2e>
	{
		case 'L' | 'l': LCD();
     8be:	0e 94 79 02 	call	0x4f2	; 0x4f2 <LCD>
		break;
     8c2:	08 95       	ret
		case 'A' | 'a': ADConverter();
     8c4:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <ADConverter>
		break;
     8c8:	08 95       	ret
		case 'P' | 'p': USS();
     8ca:	0e 94 0e 04 	call	0x81c	; 0x81c <USS>
		break;
     8ce:	08 95       	ret
		default: UART_Puts(InvalidCommandMSG);
     8d0:	8a ef       	ldi	r24, 0xFA	; 250
     8d2:	91 e0       	ldi	r25, 0x01	; 1
     8d4:	0e 94 38 01 	call	0x270	; 0x270 <UART_Puts>
     8d8:	08 95       	ret

000008da <main>:
}


int main(void)
{
	Mega328P_Init();
     8da:	0e 94 a6 00 	call	0x14c	; 0x14c <Mega328P_Init>
	Banner();
     8de:	0e 94 42 04 	call	0x884	; 0x884 <Banner>
	sei();
     8e2:	78 94       	sei
	
	while (1){
		Command();
     8e4:	0e 94 4b 04 	call	0x896	; 0x896 <Command>
     8e8:	fd cf       	rjmp	.-6      	; 0x8e4 <main+0xa>

000008ea <__subsf3>:
     8ea:	50 58       	subi	r21, 0x80	; 128

000008ec <__addsf3>:
     8ec:	bb 27       	eor	r27, r27
     8ee:	aa 27       	eor	r26, r26
     8f0:	0e 94 8d 04 	call	0x91a	; 0x91a <__addsf3x>
     8f4:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <__fp_round>
     8f8:	0e 94 d0 05 	call	0xba0	; 0xba0 <__fp_pscA>
     8fc:	38 f0       	brcs	.+14     	; 0x90c <__stack+0xd>
     8fe:	0e 94 d7 05 	call	0xbae	; 0xbae <__fp_pscB>
     902:	20 f0       	brcs	.+8      	; 0x90c <__stack+0xd>
     904:	39 f4       	brne	.+14     	; 0x914 <__stack+0x15>
     906:	9f 3f       	cpi	r25, 0xFF	; 255
     908:	19 f4       	brne	.+6      	; 0x910 <__stack+0x11>
     90a:	26 f4       	brtc	.+8      	; 0x914 <__stack+0x15>
     90c:	0c 94 cd 05 	jmp	0xb9a	; 0xb9a <__fp_nan>
     910:	0e f4       	brtc	.+2      	; 0x914 <__stack+0x15>
     912:	e0 95       	com	r30
     914:	e7 fb       	bst	r30, 7
     916:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <__fp_inf>

0000091a <__addsf3x>:
     91a:	e9 2f       	mov	r30, r25
     91c:	0e 94 ef 05 	call	0xbde	; 0xbde <__fp_split3>
     920:	58 f3       	brcs	.-42     	; 0x8f8 <__addsf3+0xc>
     922:	ba 17       	cp	r27, r26
     924:	62 07       	cpc	r22, r18
     926:	73 07       	cpc	r23, r19
     928:	84 07       	cpc	r24, r20
     92a:	95 07       	cpc	r25, r21
     92c:	20 f0       	brcs	.+8      	; 0x936 <__addsf3x+0x1c>
     92e:	79 f4       	brne	.+30     	; 0x94e <__addsf3x+0x34>
     930:	a6 f5       	brtc	.+104    	; 0x99a <__addsf3x+0x80>
     932:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__fp_zero>
     936:	0e f4       	brtc	.+2      	; 0x93a <__addsf3x+0x20>
     938:	e0 95       	com	r30
     93a:	0b 2e       	mov	r0, r27
     93c:	ba 2f       	mov	r27, r26
     93e:	a0 2d       	mov	r26, r0
     940:	0b 01       	movw	r0, r22
     942:	b9 01       	movw	r22, r18
     944:	90 01       	movw	r18, r0
     946:	0c 01       	movw	r0, r24
     948:	ca 01       	movw	r24, r20
     94a:	a0 01       	movw	r20, r0
     94c:	11 24       	eor	r1, r1
     94e:	ff 27       	eor	r31, r31
     950:	59 1b       	sub	r21, r25
     952:	99 f0       	breq	.+38     	; 0x97a <__addsf3x+0x60>
     954:	59 3f       	cpi	r21, 0xF9	; 249
     956:	50 f4       	brcc	.+20     	; 0x96c <__addsf3x+0x52>
     958:	50 3e       	cpi	r21, 0xE0	; 224
     95a:	68 f1       	brcs	.+90     	; 0x9b6 <__addsf3x+0x9c>
     95c:	1a 16       	cp	r1, r26
     95e:	f0 40       	sbci	r31, 0x00	; 0
     960:	a2 2f       	mov	r26, r18
     962:	23 2f       	mov	r18, r19
     964:	34 2f       	mov	r19, r20
     966:	44 27       	eor	r20, r20
     968:	58 5f       	subi	r21, 0xF8	; 248
     96a:	f3 cf       	rjmp	.-26     	; 0x952 <__addsf3x+0x38>
     96c:	46 95       	lsr	r20
     96e:	37 95       	ror	r19
     970:	27 95       	ror	r18
     972:	a7 95       	ror	r26
     974:	f0 40       	sbci	r31, 0x00	; 0
     976:	53 95       	inc	r21
     978:	c9 f7       	brne	.-14     	; 0x96c <__addsf3x+0x52>
     97a:	7e f4       	brtc	.+30     	; 0x99a <__addsf3x+0x80>
     97c:	1f 16       	cp	r1, r31
     97e:	ba 0b       	sbc	r27, r26
     980:	62 0b       	sbc	r22, r18
     982:	73 0b       	sbc	r23, r19
     984:	84 0b       	sbc	r24, r20
     986:	ba f0       	brmi	.+46     	; 0x9b6 <__addsf3x+0x9c>
     988:	91 50       	subi	r25, 0x01	; 1
     98a:	a1 f0       	breq	.+40     	; 0x9b4 <__addsf3x+0x9a>
     98c:	ff 0f       	add	r31, r31
     98e:	bb 1f       	adc	r27, r27
     990:	66 1f       	adc	r22, r22
     992:	77 1f       	adc	r23, r23
     994:	88 1f       	adc	r24, r24
     996:	c2 f7       	brpl	.-16     	; 0x988 <__addsf3x+0x6e>
     998:	0e c0       	rjmp	.+28     	; 0x9b6 <__addsf3x+0x9c>
     99a:	ba 0f       	add	r27, r26
     99c:	62 1f       	adc	r22, r18
     99e:	73 1f       	adc	r23, r19
     9a0:	84 1f       	adc	r24, r20
     9a2:	48 f4       	brcc	.+18     	; 0x9b6 <__addsf3x+0x9c>
     9a4:	87 95       	ror	r24
     9a6:	77 95       	ror	r23
     9a8:	67 95       	ror	r22
     9aa:	b7 95       	ror	r27
     9ac:	f7 95       	ror	r31
     9ae:	9e 3f       	cpi	r25, 0xFE	; 254
     9b0:	08 f0       	brcs	.+2      	; 0x9b4 <__addsf3x+0x9a>
     9b2:	b0 cf       	rjmp	.-160    	; 0x914 <__stack+0x15>
     9b4:	93 95       	inc	r25
     9b6:	88 0f       	add	r24, r24
     9b8:	08 f0       	brcs	.+2      	; 0x9bc <__addsf3x+0xa2>
     9ba:	99 27       	eor	r25, r25
     9bc:	ee 0f       	add	r30, r30
     9be:	97 95       	ror	r25
     9c0:	87 95       	ror	r24
     9c2:	08 95       	ret

000009c4 <__divsf3>:
     9c4:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__divsf3x>
     9c8:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <__fp_round>
     9cc:	0e 94 d7 05 	call	0xbae	; 0xbae <__fp_pscB>
     9d0:	58 f0       	brcs	.+22     	; 0x9e8 <__divsf3+0x24>
     9d2:	0e 94 d0 05 	call	0xba0	; 0xba0 <__fp_pscA>
     9d6:	40 f0       	brcs	.+16     	; 0x9e8 <__divsf3+0x24>
     9d8:	29 f4       	brne	.+10     	; 0x9e4 <__divsf3+0x20>
     9da:	5f 3f       	cpi	r21, 0xFF	; 255
     9dc:	29 f0       	breq	.+10     	; 0x9e8 <__divsf3+0x24>
     9de:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <__fp_inf>
     9e2:	51 11       	cpse	r21, r1
     9e4:	0c 94 12 06 	jmp	0xc24	; 0xc24 <__fp_szero>
     9e8:	0c 94 cd 05 	jmp	0xb9a	; 0xb9a <__fp_nan>

000009ec <__divsf3x>:
     9ec:	0e 94 ef 05 	call	0xbde	; 0xbde <__fp_split3>
     9f0:	68 f3       	brcs	.-38     	; 0x9cc <__divsf3+0x8>

000009f2 <__divsf3_pse>:
     9f2:	99 23       	and	r25, r25
     9f4:	b1 f3       	breq	.-20     	; 0x9e2 <__divsf3+0x1e>
     9f6:	55 23       	and	r21, r21
     9f8:	91 f3       	breq	.-28     	; 0x9de <__divsf3+0x1a>
     9fa:	95 1b       	sub	r25, r21
     9fc:	55 0b       	sbc	r21, r21
     9fe:	bb 27       	eor	r27, r27
     a00:	aa 27       	eor	r26, r26
     a02:	62 17       	cp	r22, r18
     a04:	73 07       	cpc	r23, r19
     a06:	84 07       	cpc	r24, r20
     a08:	38 f0       	brcs	.+14     	; 0xa18 <__divsf3_pse+0x26>
     a0a:	9f 5f       	subi	r25, 0xFF	; 255
     a0c:	5f 4f       	sbci	r21, 0xFF	; 255
     a0e:	22 0f       	add	r18, r18
     a10:	33 1f       	adc	r19, r19
     a12:	44 1f       	adc	r20, r20
     a14:	aa 1f       	adc	r26, r26
     a16:	a9 f3       	breq	.-22     	; 0xa02 <__divsf3_pse+0x10>
     a18:	35 d0       	rcall	.+106    	; 0xa84 <__divsf3_pse+0x92>
     a1a:	0e 2e       	mov	r0, r30
     a1c:	3a f0       	brmi	.+14     	; 0xa2c <__divsf3_pse+0x3a>
     a1e:	e0 e8       	ldi	r30, 0x80	; 128
     a20:	32 d0       	rcall	.+100    	; 0xa86 <__divsf3_pse+0x94>
     a22:	91 50       	subi	r25, 0x01	; 1
     a24:	50 40       	sbci	r21, 0x00	; 0
     a26:	e6 95       	lsr	r30
     a28:	00 1c       	adc	r0, r0
     a2a:	ca f7       	brpl	.-14     	; 0xa1e <__divsf3_pse+0x2c>
     a2c:	2b d0       	rcall	.+86     	; 0xa84 <__divsf3_pse+0x92>
     a2e:	fe 2f       	mov	r31, r30
     a30:	29 d0       	rcall	.+82     	; 0xa84 <__divsf3_pse+0x92>
     a32:	66 0f       	add	r22, r22
     a34:	77 1f       	adc	r23, r23
     a36:	88 1f       	adc	r24, r24
     a38:	bb 1f       	adc	r27, r27
     a3a:	26 17       	cp	r18, r22
     a3c:	37 07       	cpc	r19, r23
     a3e:	48 07       	cpc	r20, r24
     a40:	ab 07       	cpc	r26, r27
     a42:	b0 e8       	ldi	r27, 0x80	; 128
     a44:	09 f0       	breq	.+2      	; 0xa48 <__divsf3_pse+0x56>
     a46:	bb 0b       	sbc	r27, r27
     a48:	80 2d       	mov	r24, r0
     a4a:	bf 01       	movw	r22, r30
     a4c:	ff 27       	eor	r31, r31
     a4e:	93 58       	subi	r25, 0x83	; 131
     a50:	5f 4f       	sbci	r21, 0xFF	; 255
     a52:	3a f0       	brmi	.+14     	; 0xa62 <__divsf3_pse+0x70>
     a54:	9e 3f       	cpi	r25, 0xFE	; 254
     a56:	51 05       	cpc	r21, r1
     a58:	78 f0       	brcs	.+30     	; 0xa78 <__divsf3_pse+0x86>
     a5a:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <__fp_inf>
     a5e:	0c 94 12 06 	jmp	0xc24	; 0xc24 <__fp_szero>
     a62:	5f 3f       	cpi	r21, 0xFF	; 255
     a64:	e4 f3       	brlt	.-8      	; 0xa5e <__divsf3_pse+0x6c>
     a66:	98 3e       	cpi	r25, 0xE8	; 232
     a68:	d4 f3       	brlt	.-12     	; 0xa5e <__divsf3_pse+0x6c>
     a6a:	86 95       	lsr	r24
     a6c:	77 95       	ror	r23
     a6e:	67 95       	ror	r22
     a70:	b7 95       	ror	r27
     a72:	f7 95       	ror	r31
     a74:	9f 5f       	subi	r25, 0xFF	; 255
     a76:	c9 f7       	brne	.-14     	; 0xa6a <__divsf3_pse+0x78>
     a78:	88 0f       	add	r24, r24
     a7a:	91 1d       	adc	r25, r1
     a7c:	96 95       	lsr	r25
     a7e:	87 95       	ror	r24
     a80:	97 f9       	bld	r25, 7
     a82:	08 95       	ret
     a84:	e1 e0       	ldi	r30, 0x01	; 1
     a86:	66 0f       	add	r22, r22
     a88:	77 1f       	adc	r23, r23
     a8a:	88 1f       	adc	r24, r24
     a8c:	bb 1f       	adc	r27, r27
     a8e:	62 17       	cp	r22, r18
     a90:	73 07       	cpc	r23, r19
     a92:	84 07       	cpc	r24, r20
     a94:	ba 07       	cpc	r27, r26
     a96:	20 f0       	brcs	.+8      	; 0xaa0 <__divsf3_pse+0xae>
     a98:	62 1b       	sub	r22, r18
     a9a:	73 0b       	sbc	r23, r19
     a9c:	84 0b       	sbc	r24, r20
     a9e:	ba 0b       	sbc	r27, r26
     aa0:	ee 1f       	adc	r30, r30
     aa2:	88 f7       	brcc	.-30     	; 0xa86 <__divsf3_pse+0x94>
     aa4:	e0 95       	com	r30
     aa6:	08 95       	ret

00000aa8 <__fixsfsi>:
     aa8:	0e 94 5b 05 	call	0xab6	; 0xab6 <__fixunssfsi>
     aac:	68 94       	set
     aae:	b1 11       	cpse	r27, r1
     ab0:	0c 94 12 06 	jmp	0xc24	; 0xc24 <__fp_szero>
     ab4:	08 95       	ret

00000ab6 <__fixunssfsi>:
     ab6:	0e 94 f7 05 	call	0xbee	; 0xbee <__fp_splitA>
     aba:	88 f0       	brcs	.+34     	; 0xade <__fixunssfsi+0x28>
     abc:	9f 57       	subi	r25, 0x7F	; 127
     abe:	98 f0       	brcs	.+38     	; 0xae6 <__fixunssfsi+0x30>
     ac0:	b9 2f       	mov	r27, r25
     ac2:	99 27       	eor	r25, r25
     ac4:	b7 51       	subi	r27, 0x17	; 23
     ac6:	b0 f0       	brcs	.+44     	; 0xaf4 <__fixunssfsi+0x3e>
     ac8:	e1 f0       	breq	.+56     	; 0xb02 <__fixunssfsi+0x4c>
     aca:	66 0f       	add	r22, r22
     acc:	77 1f       	adc	r23, r23
     ace:	88 1f       	adc	r24, r24
     ad0:	99 1f       	adc	r25, r25
     ad2:	1a f0       	brmi	.+6      	; 0xada <__fixunssfsi+0x24>
     ad4:	ba 95       	dec	r27
     ad6:	c9 f7       	brne	.-14     	; 0xaca <__fixunssfsi+0x14>
     ad8:	14 c0       	rjmp	.+40     	; 0xb02 <__fixunssfsi+0x4c>
     ada:	b1 30       	cpi	r27, 0x01	; 1
     adc:	91 f0       	breq	.+36     	; 0xb02 <__fixunssfsi+0x4c>
     ade:	0e 94 11 06 	call	0xc22	; 0xc22 <__fp_zero>
     ae2:	b1 e0       	ldi	r27, 0x01	; 1
     ae4:	08 95       	ret
     ae6:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__fp_zero>
     aea:	67 2f       	mov	r22, r23
     aec:	78 2f       	mov	r23, r24
     aee:	88 27       	eor	r24, r24
     af0:	b8 5f       	subi	r27, 0xF8	; 248
     af2:	39 f0       	breq	.+14     	; 0xb02 <__fixunssfsi+0x4c>
     af4:	b9 3f       	cpi	r27, 0xF9	; 249
     af6:	cc f3       	brlt	.-14     	; 0xaea <__fixunssfsi+0x34>
     af8:	86 95       	lsr	r24
     afa:	77 95       	ror	r23
     afc:	67 95       	ror	r22
     afe:	b3 95       	inc	r27
     b00:	d9 f7       	brne	.-10     	; 0xaf8 <__fixunssfsi+0x42>
     b02:	3e f4       	brtc	.+14     	; 0xb12 <__fixunssfsi+0x5c>
     b04:	90 95       	com	r25
     b06:	80 95       	com	r24
     b08:	70 95       	com	r23
     b0a:	61 95       	neg	r22
     b0c:	7f 4f       	sbci	r23, 0xFF	; 255
     b0e:	8f 4f       	sbci	r24, 0xFF	; 255
     b10:	9f 4f       	sbci	r25, 0xFF	; 255
     b12:	08 95       	ret

00000b14 <__floatunsisf>:
     b14:	e8 94       	clt
     b16:	09 c0       	rjmp	.+18     	; 0xb2a <__floatsisf+0x12>

00000b18 <__floatsisf>:
     b18:	97 fb       	bst	r25, 7
     b1a:	3e f4       	brtc	.+14     	; 0xb2a <__floatsisf+0x12>
     b1c:	90 95       	com	r25
     b1e:	80 95       	com	r24
     b20:	70 95       	com	r23
     b22:	61 95       	neg	r22
     b24:	7f 4f       	sbci	r23, 0xFF	; 255
     b26:	8f 4f       	sbci	r24, 0xFF	; 255
     b28:	9f 4f       	sbci	r25, 0xFF	; 255
     b2a:	99 23       	and	r25, r25
     b2c:	a9 f0       	breq	.+42     	; 0xb58 <__floatsisf+0x40>
     b2e:	f9 2f       	mov	r31, r25
     b30:	96 e9       	ldi	r25, 0x96	; 150
     b32:	bb 27       	eor	r27, r27
     b34:	93 95       	inc	r25
     b36:	f6 95       	lsr	r31
     b38:	87 95       	ror	r24
     b3a:	77 95       	ror	r23
     b3c:	67 95       	ror	r22
     b3e:	b7 95       	ror	r27
     b40:	f1 11       	cpse	r31, r1
     b42:	f8 cf       	rjmp	.-16     	; 0xb34 <__floatsisf+0x1c>
     b44:	fa f4       	brpl	.+62     	; 0xb84 <__floatsisf+0x6c>
     b46:	bb 0f       	add	r27, r27
     b48:	11 f4       	brne	.+4      	; 0xb4e <__floatsisf+0x36>
     b4a:	60 ff       	sbrs	r22, 0
     b4c:	1b c0       	rjmp	.+54     	; 0xb84 <__floatsisf+0x6c>
     b4e:	6f 5f       	subi	r22, 0xFF	; 255
     b50:	7f 4f       	sbci	r23, 0xFF	; 255
     b52:	8f 4f       	sbci	r24, 0xFF	; 255
     b54:	9f 4f       	sbci	r25, 0xFF	; 255
     b56:	16 c0       	rjmp	.+44     	; 0xb84 <__floatsisf+0x6c>
     b58:	88 23       	and	r24, r24
     b5a:	11 f0       	breq	.+4      	; 0xb60 <__floatsisf+0x48>
     b5c:	96 e9       	ldi	r25, 0x96	; 150
     b5e:	11 c0       	rjmp	.+34     	; 0xb82 <__floatsisf+0x6a>
     b60:	77 23       	and	r23, r23
     b62:	21 f0       	breq	.+8      	; 0xb6c <__floatsisf+0x54>
     b64:	9e e8       	ldi	r25, 0x8E	; 142
     b66:	87 2f       	mov	r24, r23
     b68:	76 2f       	mov	r23, r22
     b6a:	05 c0       	rjmp	.+10     	; 0xb76 <__floatsisf+0x5e>
     b6c:	66 23       	and	r22, r22
     b6e:	71 f0       	breq	.+28     	; 0xb8c <__floatsisf+0x74>
     b70:	96 e8       	ldi	r25, 0x86	; 134
     b72:	86 2f       	mov	r24, r22
     b74:	70 e0       	ldi	r23, 0x00	; 0
     b76:	60 e0       	ldi	r22, 0x00	; 0
     b78:	2a f0       	brmi	.+10     	; 0xb84 <__floatsisf+0x6c>
     b7a:	9a 95       	dec	r25
     b7c:	66 0f       	add	r22, r22
     b7e:	77 1f       	adc	r23, r23
     b80:	88 1f       	adc	r24, r24
     b82:	da f7       	brpl	.-10     	; 0xb7a <__floatsisf+0x62>
     b84:	88 0f       	add	r24, r24
     b86:	96 95       	lsr	r25
     b88:	87 95       	ror	r24
     b8a:	97 f9       	bld	r25, 7
     b8c:	08 95       	ret

00000b8e <__fp_inf>:
     b8e:	97 f9       	bld	r25, 7
     b90:	9f 67       	ori	r25, 0x7F	; 127
     b92:	80 e8       	ldi	r24, 0x80	; 128
     b94:	70 e0       	ldi	r23, 0x00	; 0
     b96:	60 e0       	ldi	r22, 0x00	; 0
     b98:	08 95       	ret

00000b9a <__fp_nan>:
     b9a:	9f ef       	ldi	r25, 0xFF	; 255
     b9c:	80 ec       	ldi	r24, 0xC0	; 192
     b9e:	08 95       	ret

00000ba0 <__fp_pscA>:
     ba0:	00 24       	eor	r0, r0
     ba2:	0a 94       	dec	r0
     ba4:	16 16       	cp	r1, r22
     ba6:	17 06       	cpc	r1, r23
     ba8:	18 06       	cpc	r1, r24
     baa:	09 06       	cpc	r0, r25
     bac:	08 95       	ret

00000bae <__fp_pscB>:
     bae:	00 24       	eor	r0, r0
     bb0:	0a 94       	dec	r0
     bb2:	12 16       	cp	r1, r18
     bb4:	13 06       	cpc	r1, r19
     bb6:	14 06       	cpc	r1, r20
     bb8:	05 06       	cpc	r0, r21
     bba:	08 95       	ret

00000bbc <__fp_round>:
     bbc:	09 2e       	mov	r0, r25
     bbe:	03 94       	inc	r0
     bc0:	00 0c       	add	r0, r0
     bc2:	11 f4       	brne	.+4      	; 0xbc8 <__fp_round+0xc>
     bc4:	88 23       	and	r24, r24
     bc6:	52 f0       	brmi	.+20     	; 0xbdc <__fp_round+0x20>
     bc8:	bb 0f       	add	r27, r27
     bca:	40 f4       	brcc	.+16     	; 0xbdc <__fp_round+0x20>
     bcc:	bf 2b       	or	r27, r31
     bce:	11 f4       	brne	.+4      	; 0xbd4 <__fp_round+0x18>
     bd0:	60 ff       	sbrs	r22, 0
     bd2:	04 c0       	rjmp	.+8      	; 0xbdc <__fp_round+0x20>
     bd4:	6f 5f       	subi	r22, 0xFF	; 255
     bd6:	7f 4f       	sbci	r23, 0xFF	; 255
     bd8:	8f 4f       	sbci	r24, 0xFF	; 255
     bda:	9f 4f       	sbci	r25, 0xFF	; 255
     bdc:	08 95       	ret

00000bde <__fp_split3>:
     bde:	57 fd       	sbrc	r21, 7
     be0:	90 58       	subi	r25, 0x80	; 128
     be2:	44 0f       	add	r20, r20
     be4:	55 1f       	adc	r21, r21
     be6:	59 f0       	breq	.+22     	; 0xbfe <__fp_splitA+0x10>
     be8:	5f 3f       	cpi	r21, 0xFF	; 255
     bea:	71 f0       	breq	.+28     	; 0xc08 <__fp_splitA+0x1a>
     bec:	47 95       	ror	r20

00000bee <__fp_splitA>:
     bee:	88 0f       	add	r24, r24
     bf0:	97 fb       	bst	r25, 7
     bf2:	99 1f       	adc	r25, r25
     bf4:	61 f0       	breq	.+24     	; 0xc0e <__fp_splitA+0x20>
     bf6:	9f 3f       	cpi	r25, 0xFF	; 255
     bf8:	79 f0       	breq	.+30     	; 0xc18 <__fp_splitA+0x2a>
     bfa:	87 95       	ror	r24
     bfc:	08 95       	ret
     bfe:	12 16       	cp	r1, r18
     c00:	13 06       	cpc	r1, r19
     c02:	14 06       	cpc	r1, r20
     c04:	55 1f       	adc	r21, r21
     c06:	f2 cf       	rjmp	.-28     	; 0xbec <__fp_split3+0xe>
     c08:	46 95       	lsr	r20
     c0a:	f1 df       	rcall	.-30     	; 0xbee <__fp_splitA>
     c0c:	08 c0       	rjmp	.+16     	; 0xc1e <__fp_splitA+0x30>
     c0e:	16 16       	cp	r1, r22
     c10:	17 06       	cpc	r1, r23
     c12:	18 06       	cpc	r1, r24
     c14:	99 1f       	adc	r25, r25
     c16:	f1 cf       	rjmp	.-30     	; 0xbfa <__fp_splitA+0xc>
     c18:	86 95       	lsr	r24
     c1a:	71 05       	cpc	r23, r1
     c1c:	61 05       	cpc	r22, r1
     c1e:	08 94       	sec
     c20:	08 95       	ret

00000c22 <__fp_zero>:
     c22:	e8 94       	clt

00000c24 <__fp_szero>:
     c24:	bb 27       	eor	r27, r27
     c26:	66 27       	eor	r22, r22
     c28:	77 27       	eor	r23, r23
     c2a:	cb 01       	movw	r24, r22
     c2c:	97 f9       	bld	r25, 7
     c2e:	08 95       	ret

00000c30 <__gesf2>:
     c30:	0e 94 da 06 	call	0xdb4	; 0xdb4 <__fp_cmp>
     c34:	08 f4       	brcc	.+2      	; 0xc38 <__gesf2+0x8>
     c36:	8f ef       	ldi	r24, 0xFF	; 255
     c38:	08 95       	ret
     c3a:	16 f0       	brts	.+4      	; 0xc40 <__gesf2+0x10>
     c3c:	0c 94 fe 06 	jmp	0xdfc	; 0xdfc <__fp_mpack>
     c40:	0c 94 cd 05 	jmp	0xb9a	; 0xb9a <__fp_nan>
     c44:	68 94       	set
     c46:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <__fp_inf>

00000c4a <log>:
     c4a:	0e 94 f7 05 	call	0xbee	; 0xbee <__fp_splitA>
     c4e:	a8 f3       	brcs	.-22     	; 0xc3a <__gesf2+0xa>
     c50:	99 23       	and	r25, r25
     c52:	c1 f3       	breq	.-16     	; 0xc44 <__gesf2+0x14>
     c54:	ae f3       	brts	.-22     	; 0xc40 <__gesf2+0x10>
     c56:	df 93       	push	r29
     c58:	cf 93       	push	r28
     c5a:	1f 93       	push	r17
     c5c:	0f 93       	push	r16
     c5e:	ff 92       	push	r15
     c60:	c9 2f       	mov	r28, r25
     c62:	dd 27       	eor	r29, r29
     c64:	88 23       	and	r24, r24
     c66:	2a f0       	brmi	.+10     	; 0xc72 <log+0x28>
     c68:	21 97       	sbiw	r28, 0x01	; 1
     c6a:	66 0f       	add	r22, r22
     c6c:	77 1f       	adc	r23, r23
     c6e:	88 1f       	adc	r24, r24
     c70:	da f7       	brpl	.-10     	; 0xc68 <log+0x1e>
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	40 e8       	ldi	r20, 0x80	; 128
     c78:	5f eb       	ldi	r21, 0xBF	; 191
     c7a:	9f e3       	ldi	r25, 0x3F	; 63
     c7c:	88 39       	cpi	r24, 0x98	; 152
     c7e:	20 f0       	brcs	.+8      	; 0xc88 <log+0x3e>
     c80:	80 3e       	cpi	r24, 0xE0	; 224
     c82:	38 f0       	brcs	.+14     	; 0xc92 <log+0x48>
     c84:	21 96       	adiw	r28, 0x01	; 1
     c86:	8f 77       	andi	r24, 0x7F	; 127
     c88:	0e 94 76 04 	call	0x8ec	; 0x8ec <__addsf3>
     c8c:	e4 eb       	ldi	r30, 0xB4	; 180
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <log+0x50>
     c92:	0e 94 76 04 	call	0x8ec	; 0x8ec <__addsf3>
     c96:	e1 ee       	ldi	r30, 0xE1	; 225
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	0e 94 0c 07 	call	0xe18	; 0xe18 <__fp_powser>
     c9e:	8b 01       	movw	r16, r22
     ca0:	be 01       	movw	r22, r28
     ca2:	ec 01       	movw	r28, r24
     ca4:	fb 2e       	mov	r15, r27
     ca6:	6f 57       	subi	r22, 0x7F	; 127
     ca8:	71 09       	sbc	r23, r1
     caa:	75 95       	asr	r23
     cac:	77 1f       	adc	r23, r23
     cae:	88 0b       	sbc	r24, r24
     cb0:	99 0b       	sbc	r25, r25
     cb2:	0e 94 8c 05 	call	0xb18	; 0xb18 <__floatsisf>
     cb6:	28 e1       	ldi	r18, 0x18	; 24
     cb8:	32 e7       	ldi	r19, 0x72	; 114
     cba:	41 e3       	ldi	r20, 0x31	; 49
     cbc:	5f e3       	ldi	r21, 0x3F	; 63
     cbe:	0e 94 80 06 	call	0xd00	; 0xd00 <__mulsf3x>
     cc2:	af 2d       	mov	r26, r15
     cc4:	98 01       	movw	r18, r16
     cc6:	ae 01       	movw	r20, r28
     cc8:	ff 90       	pop	r15
     cca:	0f 91       	pop	r16
     ccc:	1f 91       	pop	r17
     cce:	cf 91       	pop	r28
     cd0:	df 91       	pop	r29
     cd2:	0e 94 8d 04 	call	0x91a	; 0x91a <__addsf3x>
     cd6:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <__fp_round>

00000cda <__mulsf3>:
     cda:	0e 94 80 06 	call	0xd00	; 0xd00 <__mulsf3x>
     cde:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <__fp_round>
     ce2:	0e 94 d0 05 	call	0xba0	; 0xba0 <__fp_pscA>
     ce6:	38 f0       	brcs	.+14     	; 0xcf6 <__mulsf3+0x1c>
     ce8:	0e 94 d7 05 	call	0xbae	; 0xbae <__fp_pscB>
     cec:	20 f0       	brcs	.+8      	; 0xcf6 <__mulsf3+0x1c>
     cee:	95 23       	and	r25, r21
     cf0:	11 f0       	breq	.+4      	; 0xcf6 <__mulsf3+0x1c>
     cf2:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <__fp_inf>
     cf6:	0c 94 cd 05 	jmp	0xb9a	; 0xb9a <__fp_nan>
     cfa:	11 24       	eor	r1, r1
     cfc:	0c 94 12 06 	jmp	0xc24	; 0xc24 <__fp_szero>

00000d00 <__mulsf3x>:
     d00:	0e 94 ef 05 	call	0xbde	; 0xbde <__fp_split3>
     d04:	70 f3       	brcs	.-36     	; 0xce2 <__mulsf3+0x8>

00000d06 <__mulsf3_pse>:
     d06:	95 9f       	mul	r25, r21
     d08:	c1 f3       	breq	.-16     	; 0xcfa <__mulsf3+0x20>
     d0a:	95 0f       	add	r25, r21
     d0c:	50 e0       	ldi	r21, 0x00	; 0
     d0e:	55 1f       	adc	r21, r21
     d10:	62 9f       	mul	r22, r18
     d12:	f0 01       	movw	r30, r0
     d14:	72 9f       	mul	r23, r18
     d16:	bb 27       	eor	r27, r27
     d18:	f0 0d       	add	r31, r0
     d1a:	b1 1d       	adc	r27, r1
     d1c:	63 9f       	mul	r22, r19
     d1e:	aa 27       	eor	r26, r26
     d20:	f0 0d       	add	r31, r0
     d22:	b1 1d       	adc	r27, r1
     d24:	aa 1f       	adc	r26, r26
     d26:	64 9f       	mul	r22, r20
     d28:	66 27       	eor	r22, r22
     d2a:	b0 0d       	add	r27, r0
     d2c:	a1 1d       	adc	r26, r1
     d2e:	66 1f       	adc	r22, r22
     d30:	82 9f       	mul	r24, r18
     d32:	22 27       	eor	r18, r18
     d34:	b0 0d       	add	r27, r0
     d36:	a1 1d       	adc	r26, r1
     d38:	62 1f       	adc	r22, r18
     d3a:	73 9f       	mul	r23, r19
     d3c:	b0 0d       	add	r27, r0
     d3e:	a1 1d       	adc	r26, r1
     d40:	62 1f       	adc	r22, r18
     d42:	83 9f       	mul	r24, r19
     d44:	a0 0d       	add	r26, r0
     d46:	61 1d       	adc	r22, r1
     d48:	22 1f       	adc	r18, r18
     d4a:	74 9f       	mul	r23, r20
     d4c:	33 27       	eor	r19, r19
     d4e:	a0 0d       	add	r26, r0
     d50:	61 1d       	adc	r22, r1
     d52:	23 1f       	adc	r18, r19
     d54:	84 9f       	mul	r24, r20
     d56:	60 0d       	add	r22, r0
     d58:	21 1d       	adc	r18, r1
     d5a:	82 2f       	mov	r24, r18
     d5c:	76 2f       	mov	r23, r22
     d5e:	6a 2f       	mov	r22, r26
     d60:	11 24       	eor	r1, r1
     d62:	9f 57       	subi	r25, 0x7F	; 127
     d64:	50 40       	sbci	r21, 0x00	; 0
     d66:	9a f0       	brmi	.+38     	; 0xd8e <__mulsf3_pse+0x88>
     d68:	f1 f0       	breq	.+60     	; 0xda6 <__mulsf3_pse+0xa0>
     d6a:	88 23       	and	r24, r24
     d6c:	4a f0       	brmi	.+18     	; 0xd80 <__mulsf3_pse+0x7a>
     d6e:	ee 0f       	add	r30, r30
     d70:	ff 1f       	adc	r31, r31
     d72:	bb 1f       	adc	r27, r27
     d74:	66 1f       	adc	r22, r22
     d76:	77 1f       	adc	r23, r23
     d78:	88 1f       	adc	r24, r24
     d7a:	91 50       	subi	r25, 0x01	; 1
     d7c:	50 40       	sbci	r21, 0x00	; 0
     d7e:	a9 f7       	brne	.-22     	; 0xd6a <__mulsf3_pse+0x64>
     d80:	9e 3f       	cpi	r25, 0xFE	; 254
     d82:	51 05       	cpc	r21, r1
     d84:	80 f0       	brcs	.+32     	; 0xda6 <__mulsf3_pse+0xa0>
     d86:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <__fp_inf>
     d8a:	0c 94 12 06 	jmp	0xc24	; 0xc24 <__fp_szero>
     d8e:	5f 3f       	cpi	r21, 0xFF	; 255
     d90:	e4 f3       	brlt	.-8      	; 0xd8a <__mulsf3_pse+0x84>
     d92:	98 3e       	cpi	r25, 0xE8	; 232
     d94:	d4 f3       	brlt	.-12     	; 0xd8a <__mulsf3_pse+0x84>
     d96:	86 95       	lsr	r24
     d98:	77 95       	ror	r23
     d9a:	67 95       	ror	r22
     d9c:	b7 95       	ror	r27
     d9e:	f7 95       	ror	r31
     da0:	e7 95       	ror	r30
     da2:	9f 5f       	subi	r25, 0xFF	; 255
     da4:	c1 f7       	brne	.-16     	; 0xd96 <__mulsf3_pse+0x90>
     da6:	fe 2b       	or	r31, r30
     da8:	88 0f       	add	r24, r24
     daa:	91 1d       	adc	r25, r1
     dac:	96 95       	lsr	r25
     dae:	87 95       	ror	r24
     db0:	97 f9       	bld	r25, 7
     db2:	08 95       	ret

00000db4 <__fp_cmp>:
     db4:	99 0f       	add	r25, r25
     db6:	00 08       	sbc	r0, r0
     db8:	55 0f       	add	r21, r21
     dba:	aa 0b       	sbc	r26, r26
     dbc:	e0 e8       	ldi	r30, 0x80	; 128
     dbe:	fe ef       	ldi	r31, 0xFE	; 254
     dc0:	16 16       	cp	r1, r22
     dc2:	17 06       	cpc	r1, r23
     dc4:	e8 07       	cpc	r30, r24
     dc6:	f9 07       	cpc	r31, r25
     dc8:	c0 f0       	brcs	.+48     	; 0xdfa <__fp_cmp+0x46>
     dca:	12 16       	cp	r1, r18
     dcc:	13 06       	cpc	r1, r19
     dce:	e4 07       	cpc	r30, r20
     dd0:	f5 07       	cpc	r31, r21
     dd2:	98 f0       	brcs	.+38     	; 0xdfa <__fp_cmp+0x46>
     dd4:	62 1b       	sub	r22, r18
     dd6:	73 0b       	sbc	r23, r19
     dd8:	84 0b       	sbc	r24, r20
     dda:	95 0b       	sbc	r25, r21
     ddc:	39 f4       	brne	.+14     	; 0xdec <__fp_cmp+0x38>
     dde:	0a 26       	eor	r0, r26
     de0:	61 f0       	breq	.+24     	; 0xdfa <__fp_cmp+0x46>
     de2:	23 2b       	or	r18, r19
     de4:	24 2b       	or	r18, r20
     de6:	25 2b       	or	r18, r21
     de8:	21 f4       	brne	.+8      	; 0xdf2 <__fp_cmp+0x3e>
     dea:	08 95       	ret
     dec:	0a 26       	eor	r0, r26
     dee:	09 f4       	brne	.+2      	; 0xdf2 <__fp_cmp+0x3e>
     df0:	a1 40       	sbci	r26, 0x01	; 1
     df2:	a6 95       	lsr	r26
     df4:	8f ef       	ldi	r24, 0xFF	; 255
     df6:	81 1d       	adc	r24, r1
     df8:	81 1d       	adc	r24, r1
     dfa:	08 95       	ret

00000dfc <__fp_mpack>:
     dfc:	9f 3f       	cpi	r25, 0xFF	; 255
     dfe:	31 f0       	breq	.+12     	; 0xe0c <__fp_mpack_finite+0xc>

00000e00 <__fp_mpack_finite>:
     e00:	91 50       	subi	r25, 0x01	; 1
     e02:	20 f4       	brcc	.+8      	; 0xe0c <__fp_mpack_finite+0xc>
     e04:	87 95       	ror	r24
     e06:	77 95       	ror	r23
     e08:	67 95       	ror	r22
     e0a:	b7 95       	ror	r27
     e0c:	88 0f       	add	r24, r24
     e0e:	91 1d       	adc	r25, r1
     e10:	96 95       	lsr	r25
     e12:	87 95       	ror	r24
     e14:	97 f9       	bld	r25, 7
     e16:	08 95       	ret

00000e18 <__fp_powser>:
     e18:	df 93       	push	r29
     e1a:	cf 93       	push	r28
     e1c:	1f 93       	push	r17
     e1e:	0f 93       	push	r16
     e20:	ff 92       	push	r15
     e22:	ef 92       	push	r14
     e24:	df 92       	push	r13
     e26:	7b 01       	movw	r14, r22
     e28:	8c 01       	movw	r16, r24
     e2a:	68 94       	set
     e2c:	06 c0       	rjmp	.+12     	; 0xe3a <__fp_powser+0x22>
     e2e:	da 2e       	mov	r13, r26
     e30:	ef 01       	movw	r28, r30
     e32:	0e 94 80 06 	call	0xd00	; 0xd00 <__mulsf3x>
     e36:	fe 01       	movw	r30, r28
     e38:	e8 94       	clt
     e3a:	a5 91       	lpm	r26, Z+
     e3c:	25 91       	lpm	r18, Z+
     e3e:	35 91       	lpm	r19, Z+
     e40:	45 91       	lpm	r20, Z+
     e42:	55 91       	lpm	r21, Z+
     e44:	a6 f3       	brts	.-24     	; 0xe2e <__fp_powser+0x16>
     e46:	ef 01       	movw	r28, r30
     e48:	0e 94 8d 04 	call	0x91a	; 0x91a <__addsf3x>
     e4c:	fe 01       	movw	r30, r28
     e4e:	97 01       	movw	r18, r14
     e50:	a8 01       	movw	r20, r16
     e52:	da 94       	dec	r13
     e54:	69 f7       	brne	.-38     	; 0xe30 <__fp_powser+0x18>
     e56:	df 90       	pop	r13
     e58:	ef 90       	pop	r14
     e5a:	ff 90       	pop	r15
     e5c:	0f 91       	pop	r16
     e5e:	1f 91       	pop	r17
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	08 95       	ret

00000e66 <__divmodhi4>:
     e66:	97 fb       	bst	r25, 7
     e68:	07 2e       	mov	r0, r23
     e6a:	16 f4       	brtc	.+4      	; 0xe70 <__divmodhi4+0xa>
     e6c:	00 94       	com	r0
     e6e:	07 d0       	rcall	.+14     	; 0xe7e <__divmodhi4_neg1>
     e70:	77 fd       	sbrc	r23, 7
     e72:	09 d0       	rcall	.+18     	; 0xe86 <__divmodhi4_neg2>
     e74:	0e 94 47 07 	call	0xe8e	; 0xe8e <__udivmodhi4>
     e78:	07 fc       	sbrc	r0, 7
     e7a:	05 d0       	rcall	.+10     	; 0xe86 <__divmodhi4_neg2>
     e7c:	3e f4       	brtc	.+14     	; 0xe8c <__divmodhi4_exit>

00000e7e <__divmodhi4_neg1>:
     e7e:	90 95       	com	r25
     e80:	81 95       	neg	r24
     e82:	9f 4f       	sbci	r25, 0xFF	; 255
     e84:	08 95       	ret

00000e86 <__divmodhi4_neg2>:
     e86:	70 95       	com	r23
     e88:	61 95       	neg	r22
     e8a:	7f 4f       	sbci	r23, 0xFF	; 255

00000e8c <__divmodhi4_exit>:
     e8c:	08 95       	ret

00000e8e <__udivmodhi4>:
     e8e:	aa 1b       	sub	r26, r26
     e90:	bb 1b       	sub	r27, r27
     e92:	51 e1       	ldi	r21, 0x11	; 17
     e94:	07 c0       	rjmp	.+14     	; 0xea4 <__udivmodhi4_ep>

00000e96 <__udivmodhi4_loop>:
     e96:	aa 1f       	adc	r26, r26
     e98:	bb 1f       	adc	r27, r27
     e9a:	a6 17       	cp	r26, r22
     e9c:	b7 07       	cpc	r27, r23
     e9e:	10 f0       	brcs	.+4      	; 0xea4 <__udivmodhi4_ep>
     ea0:	a6 1b       	sub	r26, r22
     ea2:	b7 0b       	sbc	r27, r23

00000ea4 <__udivmodhi4_ep>:
     ea4:	88 1f       	adc	r24, r24
     ea6:	99 1f       	adc	r25, r25
     ea8:	5a 95       	dec	r21
     eaa:	a9 f7       	brne	.-22     	; 0xe96 <__udivmodhi4_loop>
     eac:	80 95       	com	r24
     eae:	90 95       	com	r25
     eb0:	bc 01       	movw	r22, r24
     eb2:	cd 01       	movw	r24, r26
     eb4:	08 95       	ret

00000eb6 <sprintf>:
     eb6:	ae e0       	ldi	r26, 0x0E	; 14
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e1 e6       	ldi	r30, 0x61	; 97
     ebc:	f7 e0       	ldi	r31, 0x07	; 7
     ebe:	0c 94 1c 0a 	jmp	0x1438	; 0x1438 <__prologue_saves__+0x1c>
     ec2:	0d 89       	ldd	r16, Y+21	; 0x15
     ec4:	1e 89       	ldd	r17, Y+22	; 0x16
     ec6:	86 e0       	ldi	r24, 0x06	; 6
     ec8:	8c 83       	std	Y+4, r24	; 0x04
     eca:	1a 83       	std	Y+2, r17	; 0x02
     ecc:	09 83       	std	Y+1, r16	; 0x01
     ece:	8f ef       	ldi	r24, 0xFF	; 255
     ed0:	9f e7       	ldi	r25, 0x7F	; 127
     ed2:	9e 83       	std	Y+6, r25	; 0x06
     ed4:	8d 83       	std	Y+5, r24	; 0x05
     ed6:	ae 01       	movw	r20, r28
     ed8:	47 5e       	subi	r20, 0xE7	; 231
     eda:	5f 4f       	sbci	r21, 0xFF	; 255
     edc:	6f 89       	ldd	r22, Y+23	; 0x17
     ede:	78 8d       	ldd	r23, Y+24	; 0x18
     ee0:	ce 01       	movw	r24, r28
     ee2:	01 96       	adiw	r24, 0x01	; 1
     ee4:	0e 94 7d 07 	call	0xefa	; 0xefa <vfprintf>
     ee8:	ef 81       	ldd	r30, Y+7	; 0x07
     eea:	f8 85       	ldd	r31, Y+8	; 0x08
     eec:	e0 0f       	add	r30, r16
     eee:	f1 1f       	adc	r31, r17
     ef0:	10 82       	st	Z, r1
     ef2:	2e 96       	adiw	r28, 0x0e	; 14
     ef4:	e4 e0       	ldi	r30, 0x04	; 4
     ef6:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__epilogue_restores__+0x1c>

00000efa <vfprintf>:
     efa:	ab e0       	ldi	r26, 0x0B	; 11
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	e3 e8       	ldi	r30, 0x83	; 131
     f00:	f7 e0       	ldi	r31, 0x07	; 7
     f02:	0c 94 0e 0a 	jmp	0x141c	; 0x141c <__prologue_saves__>
     f06:	6c 01       	movw	r12, r24
     f08:	7b 01       	movw	r14, r22
     f0a:	8a 01       	movw	r16, r20
     f0c:	fc 01       	movw	r30, r24
     f0e:	17 82       	std	Z+7, r1	; 0x07
     f10:	16 82       	std	Z+6, r1	; 0x06
     f12:	83 81       	ldd	r24, Z+3	; 0x03
     f14:	81 ff       	sbrs	r24, 1
     f16:	cc c1       	rjmp	.+920    	; 0x12b0 <vfprintf+0x3b6>
     f18:	ce 01       	movw	r24, r28
     f1a:	01 96       	adiw	r24, 0x01	; 1
     f1c:	3c 01       	movw	r6, r24
     f1e:	f6 01       	movw	r30, r12
     f20:	93 81       	ldd	r25, Z+3	; 0x03
     f22:	f7 01       	movw	r30, r14
     f24:	93 fd       	sbrc	r25, 3
     f26:	85 91       	lpm	r24, Z+
     f28:	93 ff       	sbrs	r25, 3
     f2a:	81 91       	ld	r24, Z+
     f2c:	7f 01       	movw	r14, r30
     f2e:	88 23       	and	r24, r24
     f30:	09 f4       	brne	.+2      	; 0xf34 <vfprintf+0x3a>
     f32:	ba c1       	rjmp	.+884    	; 0x12a8 <vfprintf+0x3ae>
     f34:	85 32       	cpi	r24, 0x25	; 37
     f36:	39 f4       	brne	.+14     	; 0xf46 <vfprintf+0x4c>
     f38:	93 fd       	sbrc	r25, 3
     f3a:	85 91       	lpm	r24, Z+
     f3c:	93 ff       	sbrs	r25, 3
     f3e:	81 91       	ld	r24, Z+
     f40:	7f 01       	movw	r14, r30
     f42:	85 32       	cpi	r24, 0x25	; 37
     f44:	29 f4       	brne	.+10     	; 0xf50 <vfprintf+0x56>
     f46:	b6 01       	movw	r22, r12
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	0e 94 74 09 	call	0x12e8	; 0x12e8 <fputc>
     f4e:	e7 cf       	rjmp	.-50     	; 0xf1e <vfprintf+0x24>
     f50:	91 2c       	mov	r9, r1
     f52:	21 2c       	mov	r2, r1
     f54:	31 2c       	mov	r3, r1
     f56:	ff e1       	ldi	r31, 0x1F	; 31
     f58:	f3 15       	cp	r31, r3
     f5a:	d8 f0       	brcs	.+54     	; 0xf92 <vfprintf+0x98>
     f5c:	8b 32       	cpi	r24, 0x2B	; 43
     f5e:	79 f0       	breq	.+30     	; 0xf7e <vfprintf+0x84>
     f60:	38 f4       	brcc	.+14     	; 0xf70 <vfprintf+0x76>
     f62:	80 32       	cpi	r24, 0x20	; 32
     f64:	79 f0       	breq	.+30     	; 0xf84 <vfprintf+0x8a>
     f66:	83 32       	cpi	r24, 0x23	; 35
     f68:	a1 f4       	brne	.+40     	; 0xf92 <vfprintf+0x98>
     f6a:	23 2d       	mov	r18, r3
     f6c:	20 61       	ori	r18, 0x10	; 16
     f6e:	1d c0       	rjmp	.+58     	; 0xfaa <vfprintf+0xb0>
     f70:	8d 32       	cpi	r24, 0x2D	; 45
     f72:	61 f0       	breq	.+24     	; 0xf8c <vfprintf+0x92>
     f74:	80 33       	cpi	r24, 0x30	; 48
     f76:	69 f4       	brne	.+26     	; 0xf92 <vfprintf+0x98>
     f78:	23 2d       	mov	r18, r3
     f7a:	21 60       	ori	r18, 0x01	; 1
     f7c:	16 c0       	rjmp	.+44     	; 0xfaa <vfprintf+0xb0>
     f7e:	83 2d       	mov	r24, r3
     f80:	82 60       	ori	r24, 0x02	; 2
     f82:	38 2e       	mov	r3, r24
     f84:	e3 2d       	mov	r30, r3
     f86:	e4 60       	ori	r30, 0x04	; 4
     f88:	3e 2e       	mov	r3, r30
     f8a:	2a c0       	rjmp	.+84     	; 0xfe0 <vfprintf+0xe6>
     f8c:	f3 2d       	mov	r31, r3
     f8e:	f8 60       	ori	r31, 0x08	; 8
     f90:	1d c0       	rjmp	.+58     	; 0xfcc <vfprintf+0xd2>
     f92:	37 fc       	sbrc	r3, 7
     f94:	2d c0       	rjmp	.+90     	; 0xff0 <vfprintf+0xf6>
     f96:	20 ed       	ldi	r18, 0xD0	; 208
     f98:	28 0f       	add	r18, r24
     f9a:	2a 30       	cpi	r18, 0x0A	; 10
     f9c:	40 f0       	brcs	.+16     	; 0xfae <vfprintf+0xb4>
     f9e:	8e 32       	cpi	r24, 0x2E	; 46
     fa0:	b9 f4       	brne	.+46     	; 0xfd0 <vfprintf+0xd6>
     fa2:	36 fc       	sbrc	r3, 6
     fa4:	81 c1       	rjmp	.+770    	; 0x12a8 <vfprintf+0x3ae>
     fa6:	23 2d       	mov	r18, r3
     fa8:	20 64       	ori	r18, 0x40	; 64
     faa:	32 2e       	mov	r3, r18
     fac:	19 c0       	rjmp	.+50     	; 0xfe0 <vfprintf+0xe6>
     fae:	36 fe       	sbrs	r3, 6
     fb0:	06 c0       	rjmp	.+12     	; 0xfbe <vfprintf+0xc4>
     fb2:	8a e0       	ldi	r24, 0x0A	; 10
     fb4:	98 9e       	mul	r9, r24
     fb6:	20 0d       	add	r18, r0
     fb8:	11 24       	eor	r1, r1
     fba:	92 2e       	mov	r9, r18
     fbc:	11 c0       	rjmp	.+34     	; 0xfe0 <vfprintf+0xe6>
     fbe:	ea e0       	ldi	r30, 0x0A	; 10
     fc0:	2e 9e       	mul	r2, r30
     fc2:	20 0d       	add	r18, r0
     fc4:	11 24       	eor	r1, r1
     fc6:	22 2e       	mov	r2, r18
     fc8:	f3 2d       	mov	r31, r3
     fca:	f0 62       	ori	r31, 0x20	; 32
     fcc:	3f 2e       	mov	r3, r31
     fce:	08 c0       	rjmp	.+16     	; 0xfe0 <vfprintf+0xe6>
     fd0:	8c 36       	cpi	r24, 0x6C	; 108
     fd2:	21 f4       	brne	.+8      	; 0xfdc <vfprintf+0xe2>
     fd4:	83 2d       	mov	r24, r3
     fd6:	80 68       	ori	r24, 0x80	; 128
     fd8:	38 2e       	mov	r3, r24
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <vfprintf+0xe6>
     fdc:	88 36       	cpi	r24, 0x68	; 104
     fde:	41 f4       	brne	.+16     	; 0xff0 <vfprintf+0xf6>
     fe0:	f7 01       	movw	r30, r14
     fe2:	93 fd       	sbrc	r25, 3
     fe4:	85 91       	lpm	r24, Z+
     fe6:	93 ff       	sbrs	r25, 3
     fe8:	81 91       	ld	r24, Z+
     fea:	7f 01       	movw	r14, r30
     fec:	81 11       	cpse	r24, r1
     fee:	b3 cf       	rjmp	.-154    	; 0xf56 <vfprintf+0x5c>
     ff0:	98 2f       	mov	r25, r24
     ff2:	9f 7d       	andi	r25, 0xDF	; 223
     ff4:	95 54       	subi	r25, 0x45	; 69
     ff6:	93 30       	cpi	r25, 0x03	; 3
     ff8:	28 f4       	brcc	.+10     	; 0x1004 <vfprintf+0x10a>
     ffa:	0c 5f       	subi	r16, 0xFC	; 252
     ffc:	1f 4f       	sbci	r17, 0xFF	; 255
     ffe:	9f e3       	ldi	r25, 0x3F	; 63
    1000:	99 83       	std	Y+1, r25	; 0x01
    1002:	0d c0       	rjmp	.+26     	; 0x101e <vfprintf+0x124>
    1004:	83 36       	cpi	r24, 0x63	; 99
    1006:	31 f0       	breq	.+12     	; 0x1014 <vfprintf+0x11a>
    1008:	83 37       	cpi	r24, 0x73	; 115
    100a:	71 f0       	breq	.+28     	; 0x1028 <vfprintf+0x12e>
    100c:	83 35       	cpi	r24, 0x53	; 83
    100e:	09 f0       	breq	.+2      	; 0x1012 <vfprintf+0x118>
    1010:	59 c0       	rjmp	.+178    	; 0x10c4 <vfprintf+0x1ca>
    1012:	21 c0       	rjmp	.+66     	; 0x1056 <vfprintf+0x15c>
    1014:	f8 01       	movw	r30, r16
    1016:	80 81       	ld	r24, Z
    1018:	89 83       	std	Y+1, r24	; 0x01
    101a:	0e 5f       	subi	r16, 0xFE	; 254
    101c:	1f 4f       	sbci	r17, 0xFF	; 255
    101e:	88 24       	eor	r8, r8
    1020:	83 94       	inc	r8
    1022:	91 2c       	mov	r9, r1
    1024:	53 01       	movw	r10, r6
    1026:	13 c0       	rjmp	.+38     	; 0x104e <vfprintf+0x154>
    1028:	28 01       	movw	r4, r16
    102a:	f2 e0       	ldi	r31, 0x02	; 2
    102c:	4f 0e       	add	r4, r31
    102e:	51 1c       	adc	r5, r1
    1030:	f8 01       	movw	r30, r16
    1032:	a0 80       	ld	r10, Z
    1034:	b1 80       	ldd	r11, Z+1	; 0x01
    1036:	36 fe       	sbrs	r3, 6
    1038:	03 c0       	rjmp	.+6      	; 0x1040 <vfprintf+0x146>
    103a:	69 2d       	mov	r22, r9
    103c:	70 e0       	ldi	r23, 0x00	; 0
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <vfprintf+0x14a>
    1040:	6f ef       	ldi	r22, 0xFF	; 255
    1042:	7f ef       	ldi	r23, 0xFF	; 255
    1044:	c5 01       	movw	r24, r10
    1046:	0e 94 69 09 	call	0x12d2	; 0x12d2 <strnlen>
    104a:	4c 01       	movw	r8, r24
    104c:	82 01       	movw	r16, r4
    104e:	f3 2d       	mov	r31, r3
    1050:	ff 77       	andi	r31, 0x7F	; 127
    1052:	3f 2e       	mov	r3, r31
    1054:	16 c0       	rjmp	.+44     	; 0x1082 <vfprintf+0x188>
    1056:	28 01       	movw	r4, r16
    1058:	22 e0       	ldi	r18, 0x02	; 2
    105a:	42 0e       	add	r4, r18
    105c:	51 1c       	adc	r5, r1
    105e:	f8 01       	movw	r30, r16
    1060:	a0 80       	ld	r10, Z
    1062:	b1 80       	ldd	r11, Z+1	; 0x01
    1064:	36 fe       	sbrs	r3, 6
    1066:	03 c0       	rjmp	.+6      	; 0x106e <vfprintf+0x174>
    1068:	69 2d       	mov	r22, r9
    106a:	70 e0       	ldi	r23, 0x00	; 0
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <vfprintf+0x178>
    106e:	6f ef       	ldi	r22, 0xFF	; 255
    1070:	7f ef       	ldi	r23, 0xFF	; 255
    1072:	c5 01       	movw	r24, r10
    1074:	0e 94 5e 09 	call	0x12bc	; 0x12bc <strnlen_P>
    1078:	4c 01       	movw	r8, r24
    107a:	f3 2d       	mov	r31, r3
    107c:	f0 68       	ori	r31, 0x80	; 128
    107e:	3f 2e       	mov	r3, r31
    1080:	82 01       	movw	r16, r4
    1082:	33 fc       	sbrc	r3, 3
    1084:	1b c0       	rjmp	.+54     	; 0x10bc <vfprintf+0x1c2>
    1086:	82 2d       	mov	r24, r2
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	88 16       	cp	r8, r24
    108c:	99 06       	cpc	r9, r25
    108e:	b0 f4       	brcc	.+44     	; 0x10bc <vfprintf+0x1c2>
    1090:	b6 01       	movw	r22, r12
    1092:	80 e2       	ldi	r24, 0x20	; 32
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	0e 94 74 09 	call	0x12e8	; 0x12e8 <fputc>
    109a:	2a 94       	dec	r2
    109c:	f4 cf       	rjmp	.-24     	; 0x1086 <vfprintf+0x18c>
    109e:	f5 01       	movw	r30, r10
    10a0:	37 fc       	sbrc	r3, 7
    10a2:	85 91       	lpm	r24, Z+
    10a4:	37 fe       	sbrs	r3, 7
    10a6:	81 91       	ld	r24, Z+
    10a8:	5f 01       	movw	r10, r30
    10aa:	b6 01       	movw	r22, r12
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	0e 94 74 09 	call	0x12e8	; 0x12e8 <fputc>
    10b2:	21 10       	cpse	r2, r1
    10b4:	2a 94       	dec	r2
    10b6:	21 e0       	ldi	r18, 0x01	; 1
    10b8:	82 1a       	sub	r8, r18
    10ba:	91 08       	sbc	r9, r1
    10bc:	81 14       	cp	r8, r1
    10be:	91 04       	cpc	r9, r1
    10c0:	71 f7       	brne	.-36     	; 0x109e <vfprintf+0x1a4>
    10c2:	e8 c0       	rjmp	.+464    	; 0x1294 <vfprintf+0x39a>
    10c4:	84 36       	cpi	r24, 0x64	; 100
    10c6:	11 f0       	breq	.+4      	; 0x10cc <vfprintf+0x1d2>
    10c8:	89 36       	cpi	r24, 0x69	; 105
    10ca:	41 f5       	brne	.+80     	; 0x111c <vfprintf+0x222>
    10cc:	f8 01       	movw	r30, r16
    10ce:	37 fe       	sbrs	r3, 7
    10d0:	07 c0       	rjmp	.+14     	; 0x10e0 <vfprintf+0x1e6>
    10d2:	60 81       	ld	r22, Z
    10d4:	71 81       	ldd	r23, Z+1	; 0x01
    10d6:	82 81       	ldd	r24, Z+2	; 0x02
    10d8:	93 81       	ldd	r25, Z+3	; 0x03
    10da:	0c 5f       	subi	r16, 0xFC	; 252
    10dc:	1f 4f       	sbci	r17, 0xFF	; 255
    10de:	08 c0       	rjmp	.+16     	; 0x10f0 <vfprintf+0x1f6>
    10e0:	60 81       	ld	r22, Z
    10e2:	71 81       	ldd	r23, Z+1	; 0x01
    10e4:	07 2e       	mov	r0, r23
    10e6:	00 0c       	add	r0, r0
    10e8:	88 0b       	sbc	r24, r24
    10ea:	99 0b       	sbc	r25, r25
    10ec:	0e 5f       	subi	r16, 0xFE	; 254
    10ee:	1f 4f       	sbci	r17, 0xFF	; 255
    10f0:	f3 2d       	mov	r31, r3
    10f2:	ff 76       	andi	r31, 0x6F	; 111
    10f4:	3f 2e       	mov	r3, r31
    10f6:	97 ff       	sbrs	r25, 7
    10f8:	09 c0       	rjmp	.+18     	; 0x110c <vfprintf+0x212>
    10fa:	90 95       	com	r25
    10fc:	80 95       	com	r24
    10fe:	70 95       	com	r23
    1100:	61 95       	neg	r22
    1102:	7f 4f       	sbci	r23, 0xFF	; 255
    1104:	8f 4f       	sbci	r24, 0xFF	; 255
    1106:	9f 4f       	sbci	r25, 0xFF	; 255
    1108:	f0 68       	ori	r31, 0x80	; 128
    110a:	3f 2e       	mov	r3, r31
    110c:	2a e0       	ldi	r18, 0x0A	; 10
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	a3 01       	movw	r20, r6
    1112:	0e 94 b0 09 	call	0x1360	; 0x1360 <__ultoa_invert>
    1116:	88 2e       	mov	r8, r24
    1118:	86 18       	sub	r8, r6
    111a:	45 c0       	rjmp	.+138    	; 0x11a6 <vfprintf+0x2ac>
    111c:	85 37       	cpi	r24, 0x75	; 117
    111e:	31 f4       	brne	.+12     	; 0x112c <vfprintf+0x232>
    1120:	23 2d       	mov	r18, r3
    1122:	2f 7e       	andi	r18, 0xEF	; 239
    1124:	b2 2e       	mov	r11, r18
    1126:	2a e0       	ldi	r18, 0x0A	; 10
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	25 c0       	rjmp	.+74     	; 0x1176 <vfprintf+0x27c>
    112c:	93 2d       	mov	r25, r3
    112e:	99 7f       	andi	r25, 0xF9	; 249
    1130:	b9 2e       	mov	r11, r25
    1132:	8f 36       	cpi	r24, 0x6F	; 111
    1134:	c1 f0       	breq	.+48     	; 0x1166 <vfprintf+0x26c>
    1136:	18 f4       	brcc	.+6      	; 0x113e <vfprintf+0x244>
    1138:	88 35       	cpi	r24, 0x58	; 88
    113a:	79 f0       	breq	.+30     	; 0x115a <vfprintf+0x260>
    113c:	b5 c0       	rjmp	.+362    	; 0x12a8 <vfprintf+0x3ae>
    113e:	80 37       	cpi	r24, 0x70	; 112
    1140:	19 f0       	breq	.+6      	; 0x1148 <vfprintf+0x24e>
    1142:	88 37       	cpi	r24, 0x78	; 120
    1144:	21 f0       	breq	.+8      	; 0x114e <vfprintf+0x254>
    1146:	b0 c0       	rjmp	.+352    	; 0x12a8 <vfprintf+0x3ae>
    1148:	e9 2f       	mov	r30, r25
    114a:	e0 61       	ori	r30, 0x10	; 16
    114c:	be 2e       	mov	r11, r30
    114e:	b4 fe       	sbrs	r11, 4
    1150:	0d c0       	rjmp	.+26     	; 0x116c <vfprintf+0x272>
    1152:	fb 2d       	mov	r31, r11
    1154:	f4 60       	ori	r31, 0x04	; 4
    1156:	bf 2e       	mov	r11, r31
    1158:	09 c0       	rjmp	.+18     	; 0x116c <vfprintf+0x272>
    115a:	34 fe       	sbrs	r3, 4
    115c:	0a c0       	rjmp	.+20     	; 0x1172 <vfprintf+0x278>
    115e:	29 2f       	mov	r18, r25
    1160:	26 60       	ori	r18, 0x06	; 6
    1162:	b2 2e       	mov	r11, r18
    1164:	06 c0       	rjmp	.+12     	; 0x1172 <vfprintf+0x278>
    1166:	28 e0       	ldi	r18, 0x08	; 8
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	05 c0       	rjmp	.+10     	; 0x1176 <vfprintf+0x27c>
    116c:	20 e1       	ldi	r18, 0x10	; 16
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <vfprintf+0x27c>
    1172:	20 e1       	ldi	r18, 0x10	; 16
    1174:	32 e0       	ldi	r19, 0x02	; 2
    1176:	f8 01       	movw	r30, r16
    1178:	b7 fe       	sbrs	r11, 7
    117a:	07 c0       	rjmp	.+14     	; 0x118a <vfprintf+0x290>
    117c:	60 81       	ld	r22, Z
    117e:	71 81       	ldd	r23, Z+1	; 0x01
    1180:	82 81       	ldd	r24, Z+2	; 0x02
    1182:	93 81       	ldd	r25, Z+3	; 0x03
    1184:	0c 5f       	subi	r16, 0xFC	; 252
    1186:	1f 4f       	sbci	r17, 0xFF	; 255
    1188:	06 c0       	rjmp	.+12     	; 0x1196 <vfprintf+0x29c>
    118a:	60 81       	ld	r22, Z
    118c:	71 81       	ldd	r23, Z+1	; 0x01
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	0e 5f       	subi	r16, 0xFE	; 254
    1194:	1f 4f       	sbci	r17, 0xFF	; 255
    1196:	a3 01       	movw	r20, r6
    1198:	0e 94 b0 09 	call	0x1360	; 0x1360 <__ultoa_invert>
    119c:	88 2e       	mov	r8, r24
    119e:	86 18       	sub	r8, r6
    11a0:	fb 2d       	mov	r31, r11
    11a2:	ff 77       	andi	r31, 0x7F	; 127
    11a4:	3f 2e       	mov	r3, r31
    11a6:	36 fe       	sbrs	r3, 6
    11a8:	0d c0       	rjmp	.+26     	; 0x11c4 <vfprintf+0x2ca>
    11aa:	23 2d       	mov	r18, r3
    11ac:	2e 7f       	andi	r18, 0xFE	; 254
    11ae:	a2 2e       	mov	r10, r18
    11b0:	89 14       	cp	r8, r9
    11b2:	58 f4       	brcc	.+22     	; 0x11ca <vfprintf+0x2d0>
    11b4:	34 fe       	sbrs	r3, 4
    11b6:	0b c0       	rjmp	.+22     	; 0x11ce <vfprintf+0x2d4>
    11b8:	32 fc       	sbrc	r3, 2
    11ba:	09 c0       	rjmp	.+18     	; 0x11ce <vfprintf+0x2d4>
    11bc:	83 2d       	mov	r24, r3
    11be:	8e 7e       	andi	r24, 0xEE	; 238
    11c0:	a8 2e       	mov	r10, r24
    11c2:	05 c0       	rjmp	.+10     	; 0x11ce <vfprintf+0x2d4>
    11c4:	b8 2c       	mov	r11, r8
    11c6:	a3 2c       	mov	r10, r3
    11c8:	03 c0       	rjmp	.+6      	; 0x11d0 <vfprintf+0x2d6>
    11ca:	b8 2c       	mov	r11, r8
    11cc:	01 c0       	rjmp	.+2      	; 0x11d0 <vfprintf+0x2d6>
    11ce:	b9 2c       	mov	r11, r9
    11d0:	a4 fe       	sbrs	r10, 4
    11d2:	0f c0       	rjmp	.+30     	; 0x11f2 <vfprintf+0x2f8>
    11d4:	fe 01       	movw	r30, r28
    11d6:	e8 0d       	add	r30, r8
    11d8:	f1 1d       	adc	r31, r1
    11da:	80 81       	ld	r24, Z
    11dc:	80 33       	cpi	r24, 0x30	; 48
    11de:	21 f4       	brne	.+8      	; 0x11e8 <vfprintf+0x2ee>
    11e0:	9a 2d       	mov	r25, r10
    11e2:	99 7e       	andi	r25, 0xE9	; 233
    11e4:	a9 2e       	mov	r10, r25
    11e6:	09 c0       	rjmp	.+18     	; 0x11fa <vfprintf+0x300>
    11e8:	a2 fe       	sbrs	r10, 2
    11ea:	06 c0       	rjmp	.+12     	; 0x11f8 <vfprintf+0x2fe>
    11ec:	b3 94       	inc	r11
    11ee:	b3 94       	inc	r11
    11f0:	04 c0       	rjmp	.+8      	; 0x11fa <vfprintf+0x300>
    11f2:	8a 2d       	mov	r24, r10
    11f4:	86 78       	andi	r24, 0x86	; 134
    11f6:	09 f0       	breq	.+2      	; 0x11fa <vfprintf+0x300>
    11f8:	b3 94       	inc	r11
    11fa:	a3 fc       	sbrc	r10, 3
    11fc:	11 c0       	rjmp	.+34     	; 0x1220 <vfprintf+0x326>
    11fe:	a0 fe       	sbrs	r10, 0
    1200:	06 c0       	rjmp	.+12     	; 0x120e <vfprintf+0x314>
    1202:	b2 14       	cp	r11, r2
    1204:	88 f4       	brcc	.+34     	; 0x1228 <vfprintf+0x32e>
    1206:	28 0c       	add	r2, r8
    1208:	92 2c       	mov	r9, r2
    120a:	9b 18       	sub	r9, r11
    120c:	0e c0       	rjmp	.+28     	; 0x122a <vfprintf+0x330>
    120e:	b2 14       	cp	r11, r2
    1210:	60 f4       	brcc	.+24     	; 0x122a <vfprintf+0x330>
    1212:	b6 01       	movw	r22, r12
    1214:	80 e2       	ldi	r24, 0x20	; 32
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	0e 94 74 09 	call	0x12e8	; 0x12e8 <fputc>
    121c:	b3 94       	inc	r11
    121e:	f7 cf       	rjmp	.-18     	; 0x120e <vfprintf+0x314>
    1220:	b2 14       	cp	r11, r2
    1222:	18 f4       	brcc	.+6      	; 0x122a <vfprintf+0x330>
    1224:	2b 18       	sub	r2, r11
    1226:	02 c0       	rjmp	.+4      	; 0x122c <vfprintf+0x332>
    1228:	98 2c       	mov	r9, r8
    122a:	21 2c       	mov	r2, r1
    122c:	a4 fe       	sbrs	r10, 4
    122e:	10 c0       	rjmp	.+32     	; 0x1250 <vfprintf+0x356>
    1230:	b6 01       	movw	r22, r12
    1232:	80 e3       	ldi	r24, 0x30	; 48
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	0e 94 74 09 	call	0x12e8	; 0x12e8 <fputc>
    123a:	a2 fe       	sbrs	r10, 2
    123c:	17 c0       	rjmp	.+46     	; 0x126c <vfprintf+0x372>
    123e:	a1 fc       	sbrc	r10, 1
    1240:	03 c0       	rjmp	.+6      	; 0x1248 <vfprintf+0x34e>
    1242:	88 e7       	ldi	r24, 0x78	; 120
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	02 c0       	rjmp	.+4      	; 0x124c <vfprintf+0x352>
    1248:	88 e5       	ldi	r24, 0x58	; 88
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	b6 01       	movw	r22, r12
    124e:	0c c0       	rjmp	.+24     	; 0x1268 <vfprintf+0x36e>
    1250:	8a 2d       	mov	r24, r10
    1252:	86 78       	andi	r24, 0x86	; 134
    1254:	59 f0       	breq	.+22     	; 0x126c <vfprintf+0x372>
    1256:	a1 fe       	sbrs	r10, 1
    1258:	02 c0       	rjmp	.+4      	; 0x125e <vfprintf+0x364>
    125a:	8b e2       	ldi	r24, 0x2B	; 43
    125c:	01 c0       	rjmp	.+2      	; 0x1260 <vfprintf+0x366>
    125e:	80 e2       	ldi	r24, 0x20	; 32
    1260:	a7 fc       	sbrc	r10, 7
    1262:	8d e2       	ldi	r24, 0x2D	; 45
    1264:	b6 01       	movw	r22, r12
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	0e 94 74 09 	call	0x12e8	; 0x12e8 <fputc>
    126c:	89 14       	cp	r8, r9
    126e:	38 f4       	brcc	.+14     	; 0x127e <vfprintf+0x384>
    1270:	b6 01       	movw	r22, r12
    1272:	80 e3       	ldi	r24, 0x30	; 48
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	0e 94 74 09 	call	0x12e8	; 0x12e8 <fputc>
    127a:	9a 94       	dec	r9
    127c:	f7 cf       	rjmp	.-18     	; 0x126c <vfprintf+0x372>
    127e:	8a 94       	dec	r8
    1280:	f3 01       	movw	r30, r6
    1282:	e8 0d       	add	r30, r8
    1284:	f1 1d       	adc	r31, r1
    1286:	80 81       	ld	r24, Z
    1288:	b6 01       	movw	r22, r12
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	0e 94 74 09 	call	0x12e8	; 0x12e8 <fputc>
    1290:	81 10       	cpse	r8, r1
    1292:	f5 cf       	rjmp	.-22     	; 0x127e <vfprintf+0x384>
    1294:	22 20       	and	r2, r2
    1296:	09 f4       	brne	.+2      	; 0x129a <vfprintf+0x3a0>
    1298:	42 ce       	rjmp	.-892    	; 0xf1e <vfprintf+0x24>
    129a:	b6 01       	movw	r22, r12
    129c:	80 e2       	ldi	r24, 0x20	; 32
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	0e 94 74 09 	call	0x12e8	; 0x12e8 <fputc>
    12a4:	2a 94       	dec	r2
    12a6:	f6 cf       	rjmp	.-20     	; 0x1294 <vfprintf+0x39a>
    12a8:	f6 01       	movw	r30, r12
    12aa:	86 81       	ldd	r24, Z+6	; 0x06
    12ac:	97 81       	ldd	r25, Z+7	; 0x07
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <vfprintf+0x3ba>
    12b0:	8f ef       	ldi	r24, 0xFF	; 255
    12b2:	9f ef       	ldi	r25, 0xFF	; 255
    12b4:	2b 96       	adiw	r28, 0x0b	; 11
    12b6:	e2 e1       	ldi	r30, 0x12	; 18
    12b8:	0c 94 2a 0a 	jmp	0x1454	; 0x1454 <__epilogue_restores__>

000012bc <strnlen_P>:
    12bc:	fc 01       	movw	r30, r24
    12be:	05 90       	lpm	r0, Z+
    12c0:	61 50       	subi	r22, 0x01	; 1
    12c2:	70 40       	sbci	r23, 0x00	; 0
    12c4:	01 10       	cpse	r0, r1
    12c6:	d8 f7       	brcc	.-10     	; 0x12be <strnlen_P+0x2>
    12c8:	80 95       	com	r24
    12ca:	90 95       	com	r25
    12cc:	8e 0f       	add	r24, r30
    12ce:	9f 1f       	adc	r25, r31
    12d0:	08 95       	ret

000012d2 <strnlen>:
    12d2:	fc 01       	movw	r30, r24
    12d4:	61 50       	subi	r22, 0x01	; 1
    12d6:	70 40       	sbci	r23, 0x00	; 0
    12d8:	01 90       	ld	r0, Z+
    12da:	01 10       	cpse	r0, r1
    12dc:	d8 f7       	brcc	.-10     	; 0x12d4 <strnlen+0x2>
    12de:	80 95       	com	r24
    12e0:	90 95       	com	r25
    12e2:	8e 0f       	add	r24, r30
    12e4:	9f 1f       	adc	r25, r31
    12e6:	08 95       	ret

000012e8 <fputc>:
    12e8:	0f 93       	push	r16
    12ea:	1f 93       	push	r17
    12ec:	cf 93       	push	r28
    12ee:	df 93       	push	r29
    12f0:	fb 01       	movw	r30, r22
    12f2:	23 81       	ldd	r18, Z+3	; 0x03
    12f4:	21 fd       	sbrc	r18, 1
    12f6:	03 c0       	rjmp	.+6      	; 0x12fe <fputc+0x16>
    12f8:	8f ef       	ldi	r24, 0xFF	; 255
    12fa:	9f ef       	ldi	r25, 0xFF	; 255
    12fc:	2c c0       	rjmp	.+88     	; 0x1356 <fputc+0x6e>
    12fe:	22 ff       	sbrs	r18, 2
    1300:	16 c0       	rjmp	.+44     	; 0x132e <fputc+0x46>
    1302:	46 81       	ldd	r20, Z+6	; 0x06
    1304:	57 81       	ldd	r21, Z+7	; 0x07
    1306:	24 81       	ldd	r18, Z+4	; 0x04
    1308:	35 81       	ldd	r19, Z+5	; 0x05
    130a:	42 17       	cp	r20, r18
    130c:	53 07       	cpc	r21, r19
    130e:	44 f4       	brge	.+16     	; 0x1320 <fputc+0x38>
    1310:	a0 81       	ld	r26, Z
    1312:	b1 81       	ldd	r27, Z+1	; 0x01
    1314:	9d 01       	movw	r18, r26
    1316:	2f 5f       	subi	r18, 0xFF	; 255
    1318:	3f 4f       	sbci	r19, 0xFF	; 255
    131a:	31 83       	std	Z+1, r19	; 0x01
    131c:	20 83       	st	Z, r18
    131e:	8c 93       	st	X, r24
    1320:	26 81       	ldd	r18, Z+6	; 0x06
    1322:	37 81       	ldd	r19, Z+7	; 0x07
    1324:	2f 5f       	subi	r18, 0xFF	; 255
    1326:	3f 4f       	sbci	r19, 0xFF	; 255
    1328:	37 83       	std	Z+7, r19	; 0x07
    132a:	26 83       	std	Z+6, r18	; 0x06
    132c:	14 c0       	rjmp	.+40     	; 0x1356 <fputc+0x6e>
    132e:	8b 01       	movw	r16, r22
    1330:	ec 01       	movw	r28, r24
    1332:	fb 01       	movw	r30, r22
    1334:	00 84       	ldd	r0, Z+8	; 0x08
    1336:	f1 85       	ldd	r31, Z+9	; 0x09
    1338:	e0 2d       	mov	r30, r0
    133a:	09 95       	icall
    133c:	89 2b       	or	r24, r25
    133e:	e1 f6       	brne	.-72     	; 0x12f8 <fputc+0x10>
    1340:	d8 01       	movw	r26, r16
    1342:	16 96       	adiw	r26, 0x06	; 6
    1344:	8d 91       	ld	r24, X+
    1346:	9c 91       	ld	r25, X
    1348:	17 97       	sbiw	r26, 0x07	; 7
    134a:	01 96       	adiw	r24, 0x01	; 1
    134c:	17 96       	adiw	r26, 0x07	; 7
    134e:	9c 93       	st	X, r25
    1350:	8e 93       	st	-X, r24
    1352:	16 97       	sbiw	r26, 0x06	; 6
    1354:	ce 01       	movw	r24, r28
    1356:	df 91       	pop	r29
    1358:	cf 91       	pop	r28
    135a:	1f 91       	pop	r17
    135c:	0f 91       	pop	r16
    135e:	08 95       	ret

00001360 <__ultoa_invert>:
    1360:	fa 01       	movw	r30, r20
    1362:	aa 27       	eor	r26, r26
    1364:	28 30       	cpi	r18, 0x08	; 8
    1366:	51 f1       	breq	.+84     	; 0x13bc <__ultoa_invert+0x5c>
    1368:	20 31       	cpi	r18, 0x10	; 16
    136a:	81 f1       	breq	.+96     	; 0x13cc <__ultoa_invert+0x6c>
    136c:	e8 94       	clt
    136e:	6f 93       	push	r22
    1370:	6e 7f       	andi	r22, 0xFE	; 254
    1372:	6e 5f       	subi	r22, 0xFE	; 254
    1374:	7f 4f       	sbci	r23, 0xFF	; 255
    1376:	8f 4f       	sbci	r24, 0xFF	; 255
    1378:	9f 4f       	sbci	r25, 0xFF	; 255
    137a:	af 4f       	sbci	r26, 0xFF	; 255
    137c:	b1 e0       	ldi	r27, 0x01	; 1
    137e:	3e d0       	rcall	.+124    	; 0x13fc <__ultoa_invert+0x9c>
    1380:	b4 e0       	ldi	r27, 0x04	; 4
    1382:	3c d0       	rcall	.+120    	; 0x13fc <__ultoa_invert+0x9c>
    1384:	67 0f       	add	r22, r23
    1386:	78 1f       	adc	r23, r24
    1388:	89 1f       	adc	r24, r25
    138a:	9a 1f       	adc	r25, r26
    138c:	a1 1d       	adc	r26, r1
    138e:	68 0f       	add	r22, r24
    1390:	79 1f       	adc	r23, r25
    1392:	8a 1f       	adc	r24, r26
    1394:	91 1d       	adc	r25, r1
    1396:	a1 1d       	adc	r26, r1
    1398:	6a 0f       	add	r22, r26
    139a:	71 1d       	adc	r23, r1
    139c:	81 1d       	adc	r24, r1
    139e:	91 1d       	adc	r25, r1
    13a0:	a1 1d       	adc	r26, r1
    13a2:	20 d0       	rcall	.+64     	; 0x13e4 <__ultoa_invert+0x84>
    13a4:	09 f4       	brne	.+2      	; 0x13a8 <__ultoa_invert+0x48>
    13a6:	68 94       	set
    13a8:	3f 91       	pop	r19
    13aa:	2a e0       	ldi	r18, 0x0A	; 10
    13ac:	26 9f       	mul	r18, r22
    13ae:	11 24       	eor	r1, r1
    13b0:	30 19       	sub	r19, r0
    13b2:	30 5d       	subi	r19, 0xD0	; 208
    13b4:	31 93       	st	Z+, r19
    13b6:	de f6       	brtc	.-74     	; 0x136e <__ultoa_invert+0xe>
    13b8:	cf 01       	movw	r24, r30
    13ba:	08 95       	ret
    13bc:	46 2f       	mov	r20, r22
    13be:	47 70       	andi	r20, 0x07	; 7
    13c0:	40 5d       	subi	r20, 0xD0	; 208
    13c2:	41 93       	st	Z+, r20
    13c4:	b3 e0       	ldi	r27, 0x03	; 3
    13c6:	0f d0       	rcall	.+30     	; 0x13e6 <__ultoa_invert+0x86>
    13c8:	c9 f7       	brne	.-14     	; 0x13bc <__ultoa_invert+0x5c>
    13ca:	f6 cf       	rjmp	.-20     	; 0x13b8 <__ultoa_invert+0x58>
    13cc:	46 2f       	mov	r20, r22
    13ce:	4f 70       	andi	r20, 0x0F	; 15
    13d0:	40 5d       	subi	r20, 0xD0	; 208
    13d2:	4a 33       	cpi	r20, 0x3A	; 58
    13d4:	18 f0       	brcs	.+6      	; 0x13dc <__ultoa_invert+0x7c>
    13d6:	49 5d       	subi	r20, 0xD9	; 217
    13d8:	31 fd       	sbrc	r19, 1
    13da:	40 52       	subi	r20, 0x20	; 32
    13dc:	41 93       	st	Z+, r20
    13de:	02 d0       	rcall	.+4      	; 0x13e4 <__ultoa_invert+0x84>
    13e0:	a9 f7       	brne	.-22     	; 0x13cc <__ultoa_invert+0x6c>
    13e2:	ea cf       	rjmp	.-44     	; 0x13b8 <__ultoa_invert+0x58>
    13e4:	b4 e0       	ldi	r27, 0x04	; 4
    13e6:	a6 95       	lsr	r26
    13e8:	97 95       	ror	r25
    13ea:	87 95       	ror	r24
    13ec:	77 95       	ror	r23
    13ee:	67 95       	ror	r22
    13f0:	ba 95       	dec	r27
    13f2:	c9 f7       	brne	.-14     	; 0x13e6 <__ultoa_invert+0x86>
    13f4:	00 97       	sbiw	r24, 0x00	; 0
    13f6:	61 05       	cpc	r22, r1
    13f8:	71 05       	cpc	r23, r1
    13fa:	08 95       	ret
    13fc:	9b 01       	movw	r18, r22
    13fe:	ac 01       	movw	r20, r24
    1400:	0a 2e       	mov	r0, r26
    1402:	06 94       	lsr	r0
    1404:	57 95       	ror	r21
    1406:	47 95       	ror	r20
    1408:	37 95       	ror	r19
    140a:	27 95       	ror	r18
    140c:	ba 95       	dec	r27
    140e:	c9 f7       	brne	.-14     	; 0x1402 <__ultoa_invert+0xa2>
    1410:	62 0f       	add	r22, r18
    1412:	73 1f       	adc	r23, r19
    1414:	84 1f       	adc	r24, r20
    1416:	95 1f       	adc	r25, r21
    1418:	a0 1d       	adc	r26, r0
    141a:	08 95       	ret

0000141c <__prologue_saves__>:
    141c:	2f 92       	push	r2
    141e:	3f 92       	push	r3
    1420:	4f 92       	push	r4
    1422:	5f 92       	push	r5
    1424:	6f 92       	push	r6
    1426:	7f 92       	push	r7
    1428:	8f 92       	push	r8
    142a:	9f 92       	push	r9
    142c:	af 92       	push	r10
    142e:	bf 92       	push	r11
    1430:	cf 92       	push	r12
    1432:	df 92       	push	r13
    1434:	ef 92       	push	r14
    1436:	ff 92       	push	r15
    1438:	0f 93       	push	r16
    143a:	1f 93       	push	r17
    143c:	cf 93       	push	r28
    143e:	df 93       	push	r29
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
    1444:	ca 1b       	sub	r28, r26
    1446:	db 0b       	sbc	r29, r27
    1448:	0f b6       	in	r0, 0x3f	; 63
    144a:	f8 94       	cli
    144c:	de bf       	out	0x3e, r29	; 62
    144e:	0f be       	out	0x3f, r0	; 63
    1450:	cd bf       	out	0x3d, r28	; 61
    1452:	09 94       	ijmp

00001454 <__epilogue_restores__>:
    1454:	2a 88       	ldd	r2, Y+18	; 0x12
    1456:	39 88       	ldd	r3, Y+17	; 0x11
    1458:	48 88       	ldd	r4, Y+16	; 0x10
    145a:	5f 84       	ldd	r5, Y+15	; 0x0f
    145c:	6e 84       	ldd	r6, Y+14	; 0x0e
    145e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1460:	8c 84       	ldd	r8, Y+12	; 0x0c
    1462:	9b 84       	ldd	r9, Y+11	; 0x0b
    1464:	aa 84       	ldd	r10, Y+10	; 0x0a
    1466:	b9 84       	ldd	r11, Y+9	; 0x09
    1468:	c8 84       	ldd	r12, Y+8	; 0x08
    146a:	df 80       	ldd	r13, Y+7	; 0x07
    146c:	ee 80       	ldd	r14, Y+6	; 0x06
    146e:	fd 80       	ldd	r15, Y+5	; 0x05
    1470:	0c 81       	ldd	r16, Y+4	; 0x04
    1472:	1b 81       	ldd	r17, Y+3	; 0x03
    1474:	aa 81       	ldd	r26, Y+2	; 0x02
    1476:	b9 81       	ldd	r27, Y+1	; 0x01
    1478:	ce 0f       	add	r28, r30
    147a:	d1 1d       	adc	r29, r1
    147c:	0f b6       	in	r0, 0x3f	; 63
    147e:	f8 94       	cli
    1480:	de bf       	out	0x3e, r29	; 62
    1482:	0f be       	out	0x3f, r0	; 63
    1484:	cd bf       	out	0x3d, r28	; 61
    1486:	ed 01       	movw	r28, r26
    1488:	08 95       	ret

0000148a <_exit>:
    148a:	f8 94       	cli

0000148c <__stop_program>:
    148c:	ff cf       	rjmp	.-2      	; 0x148c <__stop_program>
